{
    "pipes": [],
    "interfaces": [
        {
            "name": "IForgetPassRequest",
            "id": "interface-IForgetPassRequest-21be6f330a57614e6d6b80f9528284cde45a6741f2c17f0e067f504c023be3e42da3609bc16030dc0e8248a2bca58f4e917b1627952806cd9c9a8b5b87a38a09",
            "file": "src/app/interfaces/iforget-pass-request.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IForgetPassRequest {\r\n    password:string;\r\n    confirmNewPassword:string;\r\n}\r\n",
            "properties": [
                {
                    "name": "confirmNewPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ILogin",
            "id": "interface-ILogin-fb3704532450198dc64db48984d0218b0ffac3c546a90a7f4ae5560f6b63bad961ad9f04e3ba998dc9cbd2d191029016c2b27a660221c8a6fab07c7c2747e779",
            "file": "src/app/interfaces/logininterface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ILogin {\r\n    email:string;\r\n    password:string;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ISignInResponse",
            "id": "interface-ISignInResponse-cae07239c6160633cad1b48d191ce63a6f55c964ac3dd04bda95d4bf8b4f47f3a5048cc916e21b6107b006c0f084dd44672bb5609e1291ca9ee8854449a4f28e",
            "file": "src/app/interfaces/isign-in-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ISignInResponse {\r\n    message:string;\r\n}\r\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ISignUpResponse",
            "id": "interface-ISignUpResponse-59031b4270ec924523c7043ddf891f27406d6955f84d4c98d4097f28f5e670e07c7302a9ba6c23ced55c8bd33d628bd7ed92992315b4a3902a39b2a2d963007f",
            "file": "src/app/interfaces/isign-up-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ISignUpResponse {\r\n    message:string;\r\n    email:string;\r\n    token:string;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-23c11020a2831beb3fa02ee911a75b64009c31bb46f73a01145c2560cb13b7f7e641105b678bd8fb01a5a199117001f3da4a78351d29d85d213ed7b82982091f",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-f1fbdb9b9c8d9940da3e71502a4e3fece571e639b3eb6bc3801a951780e225a10ead8824650e682754eacfaa6c0efb949ba69914468a352c650001127f94e297",
            "file": "src/app/services/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "forgetPassword",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "Login",
                    "args": [
                        {
                            "name": "request",
                            "type": "ILogin",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "ILogin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resendOTP",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetVerificationCode",
                    "args": [
                        {
                            "name": "res",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveUserSession",
                    "args": [
                        {
                            "name": "applicationUser",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "applicationUser",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendMail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTokenInSessionStorage",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "registerData",
                            "type": "ISignupRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ISignUpResponse>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "registerData",
                            "type": "ISignupRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verificationCode",
                    "args": [
                        {
                            "name": "otp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "otp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { ISignupRequest } from '../interfaces/signupinterface';\r\nimport { ILogin } from '../interfaces/logininterface';\r\nimport { ISignUpResponse } from '../interfaces/isign-up-response';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  signUp(registerData: ISignupRequest): Observable<ISignUpResponse> {\r\n    console.log(registerData);\r\n    return this.http.post<ISignUpResponse>(\r\n      environment.BASEURL + 'api/Authentication/Register',\r\n      registerData\r\n    );\r\n  }\r\n\r\n  verificationCode(otp: string): Observable<any> {\r\n    var obj = {\r\n      email: sessionStorage.getItem('email')?.toString(),\r\n      otp: otp.toString(),\r\n      token: sessionStorage.getItem('token')?.toString(),\r\n    };\r\n    console.log(obj);\r\n    return this.http.post(\r\n      `${environment.BASEURL}api/Authentication/ConfirmEmail`,\r\n      obj\r\n    );\r\n  }\r\n\r\n  resendOTP() {\r\n    var obj = {\r\n      email: sessionStorage.getItem('email')?.toString(),\r\n    };\r\n    console.log(obj);\r\n    return this.http.post(\r\n      environment.BASEURL + `api/Authentication/ResendOTP?email=${obj.email}`,\r\n      {}\r\n    );\r\n  }\r\n\r\n  setToken(token: string) {\r\n    localStorage.setItem('token', token);\r\n  }\r\n\r\n  setTokenInSessionStorage(token: string) {\r\n    sessionStorage.setItem('token', token);\r\n  }\r\n\r\n  get isLoggedIn(): boolean {\r\n    // return true;\r\n    const userData = localStorage.getItem(localStorage['token'].userSession);\r\n    console.log(userData);\r\n    if (userData) {\r\n      const jsonUserData = JSON.parse(userData);\r\n      const token = jsonUserData[localStorage['token']];\r\n\r\n      const tokenExpireDate =\r\n        jsonUserData[localStorage['token'].tokenExpireDate];\r\n      return token && new Date(tokenExpireDate) >= new Date();\r\n    }\r\n    return false;\r\n  }\r\n\r\n  saveUserSession(applicationUser: any) {\r\n    localStorage.setItem(\r\n      localStorage['userSession'],\r\n      JSON.stringify(applicationUser)\r\n    );\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem(localStorage['userSession']);\r\n  }\r\n\r\n  get Name() {\r\n    if (this.isLoggedIn) {\r\n      let userData = localStorage.getItem(localStorage['userSession']);\r\n      if (userData) return JSON.parse(userData)[localStorage['fullName']];\r\n      return null;\r\n    }\r\n  }\r\n\r\n  get Token() {\r\n    if (this.isLoggedIn) {\r\n      let userData = localStorage.getItem(localStorage['userSession']);\r\n      if (userData) return JSON.parse(userData)[localStorage['token']];\r\n      return null;\r\n    }\r\n  }\r\n\r\n\r\n  sendMail(email: string): Observable<any> {\r\n    console.log(email);\r\n    return this.http.post(\r\n      environment.BASEURL + `api/Authentication/ForgetPassword?email=${email}`,\r\n      {}\r\n    );\r\n  }\r\n\r\n\r\n  resetVerificationCode(res: string): Observable<any> {\r\n    var obj = {\r\n      email: sessionStorage.getItem('email')?.toString(),\r\n      otp: res.toString(),\r\n      //token: sessionStorage.getItem('token')?.toString(),\r\n    };\r\n    console.log(obj);\r\n    return this.http.post(\r\n      `${environment.BASEURL}api/Authentication/ConfirmForgetPasswordOTP`,\r\n      obj\r\n    );\r\n  }\r\n\r\n\r\n  Login(request: ILogin): Observable<any> {\r\n    console.log(request);\r\n    return this.http.post<any>(\r\n      environment.BASEURL + 'api/Authentication/Login',\r\n      request\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n  // setNewPass(res:IForgetPassRequest){\r\n  //   var obj={\r\n  //     email: sessionStorage.getItem('email')?.toString(),\r\n  //     token: sessionStorage.getItem('token')?.toString(),\r\n  //     message: sessionStorage.getItem('message')?.toString(),\r\n  //     password: res.password.toString(),\r\n  //     confirmNewPassword: res.confirmNewPassword.toString()\r\n  //   }\r\n  //   console.log(obj);\r\n  //   return this.http.post(\r\n  //     environment.BASEURL + `api/Authentication/ConfirmForgetPassword`, obj);\r\n  // }\r\n\r\n  forgetPassword(email: string) {\r\n    console.log(email);\r\n    return this.http.post<any>(\r\n      `${environment.BASEURL}api/Authentication/ForgetPassword?email=${email}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isLoggedIn": {
                    "name": "isLoggedIn",
                    "getSignature": {
                        "name": "isLoggedIn",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 55
                    }
                },
                "Name": {
                    "name": "Name",
                    "getSignature": {
                        "name": "Name",
                        "type": "",
                        "returnType": "",
                        "line": 81
                    }
                },
                "Token": {
                    "name": "Token",
                    "getSignature": {
                        "name": "Token",
                        "type": "",
                        "returnType": "",
                        "line": 89
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "BreadcrumbService",
            "id": "injectable-BreadcrumbService-225b104699a5be7048809c0f40b4dacf4e3f176a81f07e5d1b4f2e64aaaada9939297ddbcbce88fe4a26f15178d8a6529981989385b578efbae2ca0432eabff0",
            "file": "src/app/services/breadcrumb/breadcrumb.service.ts",
            "properties": [
                {
                    "name": "fullPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changeCurrentPath",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCurrentPath",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { LocationStrategy } from '@angular/common';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\n\r\nexport class BreadcrumbService {\r\n  private fullPath!: BehaviorSubject<string[]>;\r\n  constructor(private _LocationStrategy: LocationStrategy) {\r\n    this.fullPath = new BehaviorSubject<string[]>([]);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fullPath.next(this._LocationStrategy.path().split('/'));\r\n  }\r\n\r\n  changeCurrentPath() {\r\n    this.fullPath.next(this._LocationStrategy.path().split('/'));\r\n  }\r\n\r\n  getCurrentPath(): Observable<any> {\r\n    this.fullPath.next(this._LocationStrategy.path().split('/'));\r\n    return this.fullPath;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_LocationStrategy",
                        "type": "LocationStrategy",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_LocationStrategy",
                        "type": "LocationStrategy",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ResetPasswordService",
            "id": "injectable-ResetPasswordService-dc365dbd623fcbaee45065401ed75b0d380bfbdeeba13b92b157639a0f7063c70d0fe8977db12abbd71d259afdac4e24b880631498efd651f013ffa372a8c35f",
            "file": "src/app/services/reset-password.service.ts",
            "properties": [
                {
                    "name": "authenticationURL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "baseURL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "res",
                            "type": "IForgetPassRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "IForgetPassRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { IForgetPassRequest } from '../interfaces/iforget-pass-request';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ResetPasswordService {\r\n  authenticationURL!: string;\r\n  baseURL!: string;\r\n\r\n  constructor(private _HttpClient: HttpClient) {\r\n    this.baseURL = environment.BASEURL;\r\n    this.authenticationURL = '/api/Authentication'\r\n  }\r\n\r\n  resetPassword(res:IForgetPassRequest): Observable<any> {\r\n    const obj = {\r\n      email: sessionStorage.getItem('email')?.toString(),\r\n      token: sessionStorage.getItem('token')?.toString(),\r\n      // message: sessionStorage.getItem('message')?.toString(),\r\n      newPassword: res.password.toString(),\r\n      confirmNewPassword: res.confirmNewPassword.toString()\r\n    }\r\n    return this._HttpClient.post<any>(`${this.baseURL}api/Authentication/ConfirmForgetPassword`, obj);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_HttpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_HttpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ToggleDeleteModalService",
            "id": "injectable-ToggleDeleteModalService-bcbc030a3e483a44962fc239fc249bad2c02ad9f75f67f9c27bff3cb378ef855f06a86c2140c5020dc99d54a60ad2e975ad7862c47d60ac3e26736fd8d5b8be5",
            "file": "src/app/services/toggleModal/toggle-delete-modal.service.ts",
            "properties": [
                {
                    "name": "filterToggler",
                    "defaultValue": "new BehaviorSubject<Boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Boolean>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sortToggler",
                    "defaultValue": "new BehaviorSubject<Boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toggler",
                    "defaultValue": "new BehaviorSubject<Boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getFilterValue",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Boolean>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSortValue",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Boolean>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getToggleValue",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Boolean>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSort",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToggleDeleteModalService {\r\n\r\n  constructor() { }\r\n\r\n  private toggler: BehaviorSubject<Boolean> = new BehaviorSubject<Boolean>(false);\r\n\r\n  private filterToggler: BehaviorSubject<Boolean> = new BehaviorSubject<Boolean>(false);\r\n\r\n  private sortToggler: BehaviorSubject<Boolean> = new BehaviorSubject<Boolean>(false);\r\n\r\n  toggle() {\r\n    this.toggler.next(!this.toggler.value);\r\n  }\r\n\r\n  getToggleValue(): Observable<Boolean> {\r\n    return this.toggler;\r\n  }\r\n\r\n  toggleFilter() {\r\n    this.filterToggler.next(!this.filterToggler.value);\r\n  }\r\n\r\n  getFilterValue(): Observable<Boolean> {\r\n    return this.filterToggler;\r\n  }\r\n  toggleSort() {\r\n    this.sortToggler.next(!this.sortToggler.value);\r\n  }\r\n\r\n  getSortValue(): Observable<Boolean> {\r\n    return this.sortToggler;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ToggleService",
            "id": "injectable-ToggleService-84f9cb4e19e2be62d4af728e44d1934467f2f68fafed317f2c3f52c27885bc300e908cb8b74ae8aa2b193cabccab9e278e1f4bc5a63859a95202d650ad2b47f6",
            "file": "src/app/services/toggleBtn/toggle.service.ts",
            "properties": [
                {
                    "name": "toggler",
                    "defaultValue": "new BehaviorSubject<Boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getToggleValue",
                    "args": [],
                    "optional": false,
                    "returnType": "BehaviorSubject<Boolean>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToggleService {\r\n  constructor() { }\r\n\r\n  private toggler: BehaviorSubject<Boolean> = new BehaviorSubject<Boolean>(false);\r\n\r\n  toggle() {\r\n    this.toggler.next(!this.toggler.value);\r\n    console.log(this.toggler.value);\r\n  }\r\n\r\n  getToggleValue(): BehaviorSubject<Boolean> {\r\n    return this.toggler;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserManagementsService",
            "id": "injectable-UserManagementsService-0e42db5745b347a87d0075c60ea91aa4abcaf64c7f131ca82a8d0aed20ade844203b0ea16412a609049bea967f9ef48a5dedc16633679faf9cc89e9f9775c1fb",
            "file": "src/app/services/user-managements/user-managements.service.ts",
            "properties": [
                {
                    "name": "IsDescending",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "addUser",
                    "args": [
                        {
                            "name": "formData",
                            "type": "IUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formData",
                            "type": "IUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IUser } from '../../interfaces/iuser';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserManagementsService {\r\n  IsDescending:boolean = false;\r\n  constructor( private _HttpClient:HttpClient) { \r\n\r\n  }\r\n  \r\n  addUser(formData:IUser): Observable<any>{\r\n   return this._HttpClient.post(``,formData);\r\n\r\n  }\r\n\r\n  getAllUsers():Observable<any>{\r\n    return this._HttpClient.get(`${environment.BASEURL}api/UserManagment/GetUserAllUsers?IsDescending=${this.IsDescending}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_HttpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "_HttpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [
        {
            "name": "TokenInterceptor",
            "id": "injectable-TokenInterceptor-892571f82bdc51347885629ad422322dd81cf4eaf2f11dd32b9b84b03a7e7216e8f9eecd68a1a75aa19ec709097c0c858b7ffe57fe4a7cf1dc8cfbe744ab8809",
            "file": "src/app/token.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { AuthService } from './services/auth.service';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n  constructor(private authService: AuthService) { }\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const token = this.authService.Token;\r\n\r\n    const authReq = request.clone({\r\n\r\n      headers: request.headers\r\n        .set('Authorization', token)\r\n        .append('Content-Type', 'text/plain')\r\n        .append('Access-Control-Allow-Origin', '*'),\r\n    });\r\n    return next.handle(authReq);\r\n\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "ISignupRequest",
            "id": "class-ISignupRequest-70d5c2e22df4029003367edc7337b2f34440bd041a77a6a0ac96e83611066806e7f39867a99f4e1e5f06624fdad46e009fd78d7444ea76c6083bbe5f3bec9dbf",
            "file": "src/app/interfaces/signupinterface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ISignupRequest {\r\n    fullName!:string;\r\n    email!:string;\r\n    password!:string;\r\n    confirmPassword!:string;\r\n}\r\n",
            "properties": [
                {
                    "name": "confirmPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "fullName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IUser",
            "id": "class-IUser-d210c27e58bad87d99150ff8f8df95daf6f38dc184a32a8ef4e2a5ef911dcdf47e885db6aa763cffb0271366d61914479ce724b4a50443c984a80bbaf45d9c1a",
            "file": "src/app/interfaces/iuser.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class IUser {\r\n    fullName!:string;\r\n    email!:string;\r\n    password!:string;\r\n    confirmPassword!:string;\r\n    \r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "confirmPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "fullName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "PasswordDirective",
            "id": "directive-PasswordDirective-485e1a8683ad45cf5d4f41bb1e129a5b64a81921b1e3152c651e46165e48406184e268536116da078d2d3d916992a6972ed54c114cf0bce98fcf349bf46a0925",
            "file": "src/app/components/Authentication/password.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, HostListener, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appPassword]',\r\n  standalone: true,\r\n})\r\nexport class PasswordDirective {\r\n  lastInputTime: number = 2000;\r\n  @Input('appPassword') currentPasswordType!: Boolean;\r\n  constructor(private ele: ElementRef) { }\r\n\r\n  @HostListener('input') onInput() {\r\n    if (!this.currentPasswordType) {\r\n      const input = this.ele.nativeElement as HTMLInputElement;\r\n      input.type = 'text';\r\n      setTimeout(() => {\r\n        input.type = 'password';\r\n      }, 1000);\r\n    }\r\n  }\r\n  // private showLastCharachter(input = this.ele.nativeElement as HTMLInputElement, value:string){\r\n  //   const lastChar = value.charAt(value.length - 1);\r\n  //   input.type = 'text';\r\n  //   input.value = lastChar;\r\n  //   setTimeout(() => {\r\n  //     input.type = 'password';\r\n  //     input.value = value;\r\n  //   }, 1000);\r\n  // }\r\n\r\n  // private hideCharachters(input = this.ele.nativeElement as HTMLInputElement, value:string){\r\n  //   input.type = 'password'\r\n  //   input.value = value;\r\n  // }\r\n}\r\n",
            "selector": "[appPassword]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "appPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "Boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "input",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12
                }
            ],
            "propertiesClass": [
                {
                    "name": "lastInputTime",
                    "defaultValue": "2000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methodsClass": [
                {
                    "name": "onInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ele",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "ele",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ToggleFilterDirective",
            "id": "directive-ToggleFilterDirective-4e640b14bfcdb4cf3124b78ae62a609f945554b09410eb2047fb30f623a9aafe447f5d136e33e1d74a372bfebfe1306580abed8cbc1c7c30f75f6e1b06104924",
            "file": "src/app/shared/directives/toggle-filter.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appToggleFilter]',\r\n  standalone: true\r\n})\r\nexport class ToggleFilterDirective {\r\n\r\n  @HostBinding('class.showFilter') isOpen: Boolean = false;\r\n\r\n  @HostListener('click') toggleFilter() {\r\n    this.isOpen = !this.isOpen;\r\n  }\r\n\r\n  constructor() { }\r\n\r\n}\r\n",
            "selector": "[appToggleFilter]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.showFilter",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "Boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11
                }
            ],
            "propertiesClass": [
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.showFilter'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            }
        }
    ],
    "components": [
        {
            "name": "AddUserComponent",
            "id": "component-AddUserComponent-4a03ee95453422206c1213ba69ab5495bc6c1c0716359903335d39af6482bce9456f23eb2c646e3bbbb5cab0abd5fa94f2947b9ebb014a774eb68c101189aa45",
            "file": "src/app/components/core/add-user/add-user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-user",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./add-user.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addAccountModal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "addUser",
                    "defaultValue": "new FormGroup({\r\n    fullName: new FormControl(null, [Validators.required]),\r\n    email: new FormControl(null, [Validators.required]),\r\n    password: new FormControl(null),\r\n    confirmPassword: new FormControl(null),\r\n    roleId: new FormControl(null),\r\n    profileImagePath: new FormControl(null),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isavailable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "AddUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CardModalComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { CardModalComponent } from '../../../shared/pop-up-card/card-modal/card-modal.component';\r\nimport { ToggleDeleteModalService } from '../../../services/toggleModal/toggle-delete-modal.service';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\n@Component({\r\n  selector: 'app-add-user',\r\n  standalone: true,\r\n  imports: [ReactiveFormsModule, CardModalComponent, CommonModule],\r\n  templateUrl: './add-user.component.html',\r\n  styleUrl: './add-user.component.css'\r\n})\r\nexport class AddUserComponent implements OnInit {\r\n  isavailable!: Boolean;\r\n  addAccountModal!: Boolean;\r\n\r\n\r\n  addUser: FormGroup = new FormGroup({\r\n    fullName: new FormControl(null, [Validators.required]),\r\n    email: new FormControl(null, [Validators.required]),\r\n    password: new FormControl(null),\r\n    confirmPassword: new FormControl(null),\r\n    roleId: new FormControl(null),\r\n    profileImagePath: new FormControl(null),\r\n  })\r\n\r\n  constructor(private _ToggleAddModalService: ToggleDeleteModalService) { }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this._ToggleAddModalService.getToggleValue().subscribe({\r\n      next: (toggler) => {\r\n        this.isavailable = toggler;\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  close() {\r\n    this.isavailable = false;\r\n    this._ToggleAddModalService.toggle();\r\n  }\r\n\r\n\r\n  AddUser() {\r\n    console.log(this.addUser)\r\n  }\r\n\r\n\r\n}\r\n",
            "styleUrl": "./add-user.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_ToggleAddModalService",
                        "type": "ToggleDeleteModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "_ToggleAddModalService",
                        "type": "ToggleDeleteModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "@if( isavailable){\r\n\r\n<div class=\"container\">\r\n  <div class=\"add-user-container\">\r\n    <div class=\"user-header\">\r\n      <div class=\"header-icons\">\r\n        <div class=\"header-text\">\r\n          <h3>Create New User</h3>\r\n          <p>Lorem ipsum is placeholder text commonly</p>\r\n        </div>\r\n\r\n        <img\r\n          src=\"assets/images/Frame 1000016151.svg\"\r\n          alt=\"\"\r\n          (click)=\"close()\"\r\n        />\r\n      </div>\r\n      <div class=\"hr\"></div>\r\n\r\n      <div class=\"user-background\">\r\n        <div class=\"user-info\">\r\n          <img src=\"assets/images/add-user.svg\" alt=\"user-img\" />\r\n          <div class=\"edit\"><img src=\"assets/images/edit2.svg\" alt=\"\" /></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"user-form\">\r\n      <form [formGroup]=\"addUser\" (ngSubmit)=\"AddUser()\">\r\n        <div class=\"full-input\">\r\n          <label for=\"name\"> Full Name</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"name\"\r\n            placeholder=\"Haitham Mohamed\"\r\n            formControlName=\"fullName\"\r\n          />\r\n        </div>\r\n\r\n        <div class=\"inputs-container\">\r\n          <div class=\"input\">\r\n            <div class=\"input\">\r\n              <label for=\"email\">Email</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"email\"\r\n                placeholder=\"HaithamMohamed@saptiumsoftware.com\"\r\n                formControlName=\"email\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div class=\"input\">\r\n            <label for=\"selectRole\">Role & Permissions</label>\r\n\r\n            <select name=\"\" id=\"selectRole\">\r\n              <option value=\"\">Super Admin</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div class=\"inputs-container\">\r\n          <div class=\"input\">\r\n            <label for=\"password\">Password</label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"password\"\r\n              placeholder=\"*****************\"\r\n              formControlName=\"password\"\r\n            />\r\n          </div>\r\n\r\n          <div class=\"input\">\r\n            <label for=\"confirm-password\">Confirm Password</label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"confirm-password\"\r\n              placeholder=\"***************\"\r\n              formControlName=\"confirmPassword\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"hr\"></div>\r\n        <div class=\"user-form-footer\">\r\n          <button type=\"button\" (click)=\"close()\">Cancel</button>\r\n          <button [disabled]=\"addUser.invalid\" type=\"submit\">Add User</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n}\r\n\r\n<!-- <div\r\n  class=\"card-modal\"\r\n  [ngClass]=\"{ hide: !addAccountModal, show: addAccountModal }\"\r\n>\r\n  <app-card-modal\r\n    [title]=\"'Are you sure to delete the account?'\"\r\n    [description]=\"\r\n      'Lorem ipsum is placeholder text commonly ipsum is placeholde commonly'\r\n    \"\r\n    [backgroundImg]=\"'http://localhost:4200/assets/images/ellipse.svg'\"\r\n    [icon_path]=\"'assets/images/delete_icon.svg'\"\r\n    [cancel]=\"'Cancel'\"\r\n    [action]=\"'Delete Account'\"\r\n    [actionBackground]=\"'rgba(241, 65, 108, 1);'\"\r\n    (actionBtn)=\"AddUser()\"\r\n    (cancelBtn)=\"closeModal()\"\r\n  ></app-card-modal>\r\n</div> -->\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-39d23f81fa00d1f5ab8df0c38a60c9a95d61ae8854728649bbb13d587796390595f2d5001e21a3ebf8b3f512196579dbccd4012f29b7470665b2dcb5c8b74827",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'crmproject'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "SignupComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { SignupComponent } from './components/Authentication/signup/signup.component';\r\n\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [RouterOutlet, SignupComponent, ReactiveFormsModule],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.css'\r\n})\r\nexport class AppComponent {\r\n  title = 'crmproject';\r\n}\r\n",
            "styleUrl": "./app.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<!DOCTYPE html>\r\n<router-outlet></router-outlet>"
        },
        {
            "name": "BlogComponent",
            "id": "component-BlogComponent-c847950e2c5f3c6bddabd05a43cc3791d1a36481cddf86793f8652c7c2376f24d39c5959862ac4eb1c486970de549a9317a4799a1ed9b62bf5986d95d71faf05",
            "file": "src/app/components/core/blog/blog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-blog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./blog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { BreadcrumbService } from '../../../services/breadcrumb/breadcrumb.service';\r\n\r\n@Component({\r\n  selector: 'app-blog',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './blog.component.html',\r\n  styleUrl: './blog.component.css'\r\n})\r\nexport class BlogComponent implements OnInit {\r\n\r\n  constructor(private _BreadCurmb: BreadcrumbService) { }\r\n\r\n  ngOnInit() {\r\n    this._BreadCurmb.changeCurrentPath();\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./blog.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_BreadCurmb",
                        "type": "BreadcrumbService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "_BreadCurmb",
                        "type": "BreadcrumbService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>blog works!</p>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-c3bd323da00016e22e16a3a7d43440094eeceddea5e6076a399bcaba62f8e742efe65e543735e36f9ea1bed026ab8e3c8fb60482667ae55ec324f8adfe79b9f7",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 837,
                            "end": 851,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 838,
                                "end": 846,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 35,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 51
                    }
                }
            }
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-aa4adca5307bc8d2d5052dc4b1ebee025ebfd1bca6622409b7506dd52d77aa7cbe42a305f9dfb4c69a3613d6e6fa6e17105f43ca885041675c8870118d936495",
            "file": "src/app/shared/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "description_continue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "total_number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCall",
                    "defaultValue": "new EventEmitter<String>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "something",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-card',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './card.component.html',\r\n  styleUrl: './card.component.css'\r\n})\r\nexport class CardComponent implements OnInit {\r\n\r\n  @Input('icon_path') icon_path!: string;\r\n  @Input('title') title!: string;\r\n  @Input('description') description!: string;\r\n  @Input('description_continue') description_continue!: string;\r\n  @Input('total_number') total_number!: string;\r\n  @Output() onCall = new EventEmitter<String>();\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  ngOnChanges(): void { }\r\n\r\n  something() {\r\n    this.onCall.emit('ssssssssssss');\r\n  }\r\n}\r\n",
            "styleUrl": "./card.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\" (click)=\"something()\">\r\n  <div class=\"info\">\r\n    <div class=\"main-info\">\r\n      <div class=\"icon\">\r\n        <img [src]=\"icon_path\" alt=\"icon\" />\r\n      </div>\r\n      <div class=\"title\">{{ title }}</div>\r\n    </div>\r\n    <small class=\"description\"\r\n      >{{ description }} <br />\r\n      {{ description_continue }}</small\r\n    >\r\n  </div>\r\n  <div class=\"total-number\">{{ total_number }}</div>\r\n\r\n</div>\r\n"
        },
        {
            "name": "CardModalComponent",
            "id": "component-CardModalComponent-9808b9682f5f87116c85c1eeab245fa580e37905a617ba3b72690a2ad171d68e50b502b3c10169952b3fd04b4404c010e071137cc1d60729b810bf808f651bda",
            "file": "src/app/shared/pop-up-card/card-modal/card-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./card-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "actionBackground",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "backgroundImg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "actionBtn",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "cancelBtn",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "deleteAccountModal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { ToggleDeleteModalService } from '../../../services/toggleModal/toggle-delete-modal.service';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-card-modal',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './card-modal.component.html',\r\n  styleUrl: './card-modal.component.css'\r\n})\r\nexport class CardModalComponent {\r\n\r\n  deleteAccountModal!: Boolean;\r\n\r\n  @Input('title') title!: string;\r\n  @Input('description') description!: string;\r\n  @Input('cancel') cancel!: string;\r\n  @Input('action') action!: string;\r\n  @Input('actionBackground') actionBackground!: string;\r\n  @Input('icon_path') icon_path!: string;\r\n  @Input('backgroundImg') backgroundImg!: string;\r\n\r\n  @Output() actionBtn = new EventEmitter<Event>();\r\n  @Output() cancelBtn = new EventEmitter<Event>();\r\n\r\n  constructor(private _ToggleDeleteModalService: ToggleDeleteModalService) {\r\n    this.deleteAccountModal = false\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._ToggleDeleteModalService.getToggleValue().subscribe({\r\n      next: (toggler) => {\r\n        this.deleteAccountModal = toggler;\r\n      }\r\n    })\r\n  }\r\n\r\n  closeModal() {\r\n    this._ToggleDeleteModalService.toggle();\r\n  }\r\n\r\n\r\n\r\n}\r\n",
            "styleUrl": "./card-modal.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_ToggleDeleteModalService",
                        "type": "ToggleDeleteModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "_ToggleDeleteModalService",
                        "type": "ToggleDeleteModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div [ngClass]=\"{ hide: !deleteAccountModal, container: deleteAccountModal }\">\r\n  <div class=\"row\">\r\n    <div class=\"col-12\">\r\n      <div class=\"card\">\r\n        <div class=\"delete-icon\" (click)=\"closeModal()\">\r\n          <img src=\"assets/images/delete-icon.svg\" alt=\"delete\" />\r\n        </div>\r\n        <div class=\"icon\" [ngStyle]=\"{ 'background-image': backgroundImg }\">\r\n          <img [src]=\"icon_path\" alt=\"delete\" />\r\n        </div>\r\n        <div class=\"card-content\">\r\n          <h4>{{ title }}</h4>\r\n          <p>\r\n            {{ description }}\r\n          </p>\r\n        </div>\r\n        <div class=\"card-actions\">\r\n          <button class=\"cancel\" (click)=\"this.cancelBtn.emit()\">\r\n            {{ cancel }}\r\n          </button>\r\n          <button\r\n            class=\"action\"\r\n            [ngStyle]=\"{ 'background-color': actionBackground }\"\r\n            (click)=\"this.actionBtn.emit()\"\r\n          >\r\n            {{ action }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "CmsMainComponent",
            "id": "component-CmsMainComponent-0b86ad2de3c6d93ddd49cc4baa36dd37d95810796fac8a9a9cebb87d7f03307212fb69cd8d0c60ed21dad4868bbb983d8ee07aecf6e4e338df5f29a69b212e7a",
            "file": "src/app/components/core/cms-main/cms-main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cms-main",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./cms-main.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "toggler_val",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "SidebarComponent",
                    "type": "component"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { ActivatedRoute, RouterOutlet } from '@angular/router';\r\nimport { SidebarComponent } from '../../../shared/sidebar/sidebar.component';\r\nimport { HeaderComponent } from '../../../shared/header/header.component';\r\nimport { ToggleService } from '../../../services/toggleBtn/toggle.service';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-cms-main',\r\n  standalone: true,\r\n  imports: [RouterOutlet, CommonModule, SidebarComponent, HeaderComponent],\r\n  templateUrl: './cms-main.component.html',\r\n  styleUrl: './cms-main.component.css'\r\n})\r\nexport class CmsMainComponent {\r\n\r\n  toggler_val!: Boolean;\r\n\r\n  constructor(private _Toggle: ToggleService) { }\r\n\r\n  ngOnInit() {\r\n    this._Toggle.getToggleValue().subscribe({\r\n      next: (res) => {\r\n        this.toggler_val = res;\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./cms-main.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_Toggle",
                        "type": "ToggleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "_Toggle",
                        "type": "ToggleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"sidebar\" [ngClass]=\"toggler_val ? 'toggle' : 'beforeToggle'\">\r\n      <app-sidebar></app-sidebar>\r\n    </div>\r\n    <div class=\"col-12\">\r\n      <div class=\"row header\">\r\n        <div class=\"col-12 head-side\">\r\n          <app-header></app-header>\r\n        </div>\r\n        <div class=\"col-12 content\">\r\n          <router-outlet></router-outlet>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "CorrectchagesComponent",
            "id": "component-CorrectchagesComponent-720817baba43ed694aa8f1e335d34325ff1d251d9f05492068efa4a520c90076e4a9f8112b2f45e74f017134110ef982c2d1048526a47aa1c5719535fe27c030",
            "file": "src/app/components/Authentication/correctchages/correctchages.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-correctchages",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./correctchages.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\nimport { Router, RouterModule } from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-correctchages',\r\n  standalone: true,\r\n  imports: [RouterModule],\r\n  templateUrl: './correctchages.component.html',\r\n  styleUrl: './correctchages.component.css',\r\n  animations: [\r\n    trigger('flipInOut', [\r\n      transition(':enter', [\r\n        animate('1s', style({ transform: 'rotateY(90deg)' })),\r\n      ]),\r\n      transition(':leave', [\r\n        animate('1s', style({ transform: 'rotateY(180deg)' })),\r\n      ]),\r\n    ]),\r\n  ],\r\n})\r\nexport class CorrectchagesComponent {\r\n\r\n}\r\n",
            "styleUrl": "./correctchages.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<!DOCTYPE html>\r\n<div class=\"container\">\r\n  <div class=\"projName\">\r\n    <div class=\"nameContainer\">\r\n      <div><img src=\"../../../assets/images/Icon.png\" alt=\"Logo\" /></div>\r\n      <div class=\"projNDiv\"><p class=\"Name\">CMS Software</p></div>\r\n    </div>\r\n\r\n    \r\n  </div>\r\n\r\n  <div class=\"loginContainer\" id=\"loginContainerId\">\r\n    <div class=\"bg3\">\r\n      <div class=\"loginDiv\">\r\n        <div style=\"text-align: center;\">\r\n          <img src=\"../../../../assets/images/Animation - 1702803941821.gif\" alt=\"\" width=\"250px\" height=\"250px\" >\r\n          <h1>Password Changed</h1>\r\n          <p class=\"info1\">Your password has been changed</p>\r\n          <button><a class=\"Link\" routerLink=\"/signin\">LOG IN</a></button> \r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "EmailVerificationComponent",
            "id": "component-EmailVerificationComponent-704e7aaf309d4c80ebc6bc80031161c728c0342d567075bd0d9aa7eb6eb6fb31b6ab947a7a1bd574111f61eddf9a971ff4766aad5413b35649cf08142631e354",
            "file": "src/app/components/Authentication/email-verification/email-verification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-email-verification",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./email-verification.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorExit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "formVerification",
                    "defaultValue": "new FormGroup({\r\n    verificationCode1: new FormControl(''),\r\n    verificationCode2: new FormControl(''),\r\n    verificationCode3: new FormControl(''),\r\n    verificationCode4: new FormControl(''),\r\n    verificationCode5: new FormControl(''),\r\n    verificationCode6: new FormControl(''),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "otp",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "str1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "str2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "str3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "str4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "str5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "str6",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resendOTP",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "verificationSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, DoCheck, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { ILogin } from '../../../interfaces/logininterface';\r\n\r\n@Component({\r\n  selector: 'app-email-verification',\r\n  standalone: true,\r\n  imports: [RouterModule, FormsModule, ReactiveFormsModule, CommonModule],\r\n  templateUrl: './email-verification.component.html',\r\n  styleUrl: './email-verification.component.css',\r\n  animations: [\r\n    trigger('flipInOut', [\r\n      transition(':enter', [\r\n        animate('1s', style({ transform: 'rotateY(90deg)' })),\r\n      ]),\r\n      transition(':leave', [\r\n        animate('1s', style({ transform: 'rotateY(180deg)' })),\r\n      ]),\r\n    ]),\r\n  ],\r\n})\r\nexport class EmailVerificationComponent implements OnInit, DoCheck {\r\n  str1!: string;\r\n  str2!: string;\r\n  str3!: string;\r\n  str4!: string;\r\n  str5!: string;\r\n  str6!: string;\r\n\r\n  otp: string = '';\r\n  errorExit:boolean =false;\r\n\r\n  formVerification = new FormGroup({\r\n    verificationCode1: new FormControl(''),\r\n    verificationCode2: new FormControl(''),\r\n    verificationCode3: new FormControl(''),\r\n    verificationCode4: new FormControl(''),\r\n    verificationCode5: new FormControl(''),\r\n    verificationCode6: new FormControl(''),\r\n  });\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private _authService: AuthService,\r\n    private _Router: Router\r\n  ) {}\r\n  ngDoCheck(): void {}\r\n  ngOnInit(): void {\r\n    this.formVerification = this.formBuilder.group({\r\n      verificationCode1: ['', [Validators.required, Validators.maxLength(1)]],\r\n      verificationCode2: ['', [Validators.required, Validators.maxLength(1)]],\r\n      verificationCode3: ['', [Validators.required, Validators.maxLength(1)]],\r\n      verificationCode4: ['', [Validators.required, Validators.maxLength(1)]],\r\n      verificationCode5: ['', [Validators.required, Validators.maxLength(1)]],\r\n      verificationCode6: ['', [Validators.required, Validators.maxLength(1)]],\r\n    });\r\n  }\r\n\r\n  // send otp\r\n  verificationSubmit() {\r\n    if (this.formVerification.invalid) {\r\n      console.log(this.formVerification);\r\n      return;\r\n    }\r\n\r\n    this.otp = `${this.str1}${this.str2}${this.str3}${this.str4}${this.str5}${this.str6}`;\r\n    console.log(this.otp);\r\n    \r\n\r\n    this._authService.resetVerificationCode(this.otp).subscribe({\r\n      next: (res) => {\r\n        console.log(res);\r\n        sessionStorage.setItem('token',res.token);\r\n        this._Router.navigateByUrl('setnewpassword');\r\n      },\r\n      error: (err) => {\r\n        console.log(err.message)\r\n        // alert(\"Incorrect Code\");\r\n        this.errorExit = true;\r\n      },\r\n    });\r\n    \r\n  }\r\n\r\n\r\n\r\n  resendOTP(){\r\n    this._authService.resendOTP().subscribe({\r\n      next: (res)=>{\r\n        console.log(res);\r\n      },\r\n      error: (err)=>{\r\n        console.log(err);\r\n      }\r\n    })\r\n  }\r\n}\r\n",
            "styleUrl": "./email-verification.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "DoCheck"
            ],
            "templateData": "<!DOCTYPE html>\r\n<div class=\"container\">\r\n  <div class=\"projName\">\r\n    <div class=\"nameContainer\">\r\n      <div><img src=\"../../../assets/images/Icon.png\" alt=\"Logo\" /></div>\r\n      <div class=\"projNDiv\"><p>CMS Software</p></div>\r\n    </div>\r\n\r\n    <div class=\"selDiv\">\r\n      <select name=\"language\">\r\n        <option value=\"en\">English</option>\r\n        <option value=\"en\">Arabic</option>\r\n      </select>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"loginContainer\" id=\"loginContainerId\" [@flipInOut]>\r\n    <div class=\"bg3\">\r\n      <div style=\"text-align: center\" class=\"loginDiv\">\r\n        <h1>Email Verification</h1>\r\n        <p class=\"info1\">We sent OTP code to</p>\r\n        <img\r\n          style=\"margin-left: auto; margin-right: auto\"\r\n          src=\"../../../assets/images/smartphone.svg\"\r\n          alt=\"OTP photo\"\r\n        />\r\n        <div>\r\n          <form\r\n            action=\"\"\r\n            [formGroup]=\"formVerification\"\r\n            (ngSubmit)=\"verificationSubmit()\"\r\n            #form=\"ngForm\"\r\n          >\r\n            <div>\r\n              <label for=\"verificationCode\" class=\"labelInput\"\r\n                >Type your 6 digit security code</label\r\n              ><br />\r\n              <div class=\"verificationInpts\">\r\n                <input\r\n                  type=\"text\"\r\n                  maxlength=\"1\"\r\n                  class=\"inputVerificationStyle\"\r\n                  id=\"verificationCode\"\r\n                  formControlName=\"verificationCode1\"\r\n                  [(ngModel)]=\"str1\"\r\n                  min=\"0\"\r\n                  max=\"9\"\r\n                  oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode1.touched &&\r\n                      formVerification.controls.verificationCode1.errors\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-valid':\r\n                      formVerification.controls.verificationCode1.touched &&\r\n                      formVerification.controls.verificationCode1.errors ==\r\n                        null &&\r\n                      formVerification.controls.verificationCode1.dirty\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode1.errors &&\r\n                      formVerification.controls.verificationCode1.dirty, \r\n                  }\"\r\n                  [ngClass]=\"{'is-invalid1':errorExit == true}\"\r\n                />&#32;\r\n                <input\r\n                  type=\"text\"\r\n                  maxlength=\"1\"\r\n                  class=\"inputVerificationStyle\"\r\n                  id=\"verificationNum\"\r\n                  [(ngModel)]=\"str2\"\r\n                  min=\"0\"\r\n                  max=\"9\"\r\n                  oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n                  formControlName=\"verificationCode2\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode2.touched &&\r\n                      formVerification.controls.verificationCode2.errors,\r\n                    'is-valid':\r\n                      formVerification.controls.verificationCode2.touched &&\r\n                      formVerification.controls.verificationCode2.errors ==\r\n                        null &&\r\n                      formVerification.controls.verificationCode2.dirty\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode2.errors &&\r\n                      formVerification.controls.verificationCode2.dirty, \r\n                  }\"\r\n                  [ngClass]=\"{'is-invalid1':errorExit == true}\"\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  maxlength=\"1\"\r\n                  minlength=\"1\"\r\n                  class=\"inputVerificationStyle\"\r\n                  id=\"verificationNum\"\r\n                  [(ngModel)]=\"str3\"\r\n                  min=\"0\"\r\n                  max=\"9\"\r\n                  oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n                  formControlName=\"verificationCode3\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode3.touched &&\r\n                      formVerification.controls.verificationCode3.errors\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-valid':\r\n                      formVerification.controls.verificationCode3.touched &&\r\n                      formVerification.controls.verificationCode3.errors ==\r\n                        null &&\r\n                      formVerification.controls.verificationCode3.dirty\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode3.errors &&\r\n                      formVerification.controls.verificationCode3.dirty, \r\n                  }\"\r\n                  [ngClass]=\"{'is-invalid1':errorExit == true}\"\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  maxlength=\"1\"\r\n                  minlength=\"1\"\r\n                  class=\"inputVerificationStyle\"\r\n                  id=\"verificationNum\"\r\n                  formControlName=\"verificationCode4\"\r\n                  [(ngModel)]=\"str4\"\r\n                  min=\"0\"\r\n                  max=\"9\"\r\n                  oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode4.touched &&\r\n                      formVerification.controls.verificationCode4.errors\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-valid':\r\n                      formVerification.controls.verificationCode4.touched &&\r\n                      formVerification.controls.verificationCode4.errors ==\r\n                        null &&\r\n                      formVerification.controls.verificationCode4.dirty\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode4.errors &&\r\n                      formVerification.controls.verificationCode4.dirty, \r\n                  }\"\r\n                  [ngClass]=\"{'is-invalid1':errorExit == true}\"\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  maxlength=\"1\"\r\n                  minlength=\"1\"\r\n                  class=\"inputVerificationStyle\"\r\n                  id=\"verificationNum\"\r\n                  formControlName=\"verificationCode5\"\r\n                  [(ngModel)]=\"str5\"\r\n                  min=\"0\"\r\n                  max=\"9\"\r\n                  oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode5.touched &&\r\n                      formVerification.controls.verificationCode5.errors\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-valid':\r\n                      formVerification.controls.verificationCode5.touched &&\r\n                      formVerification.controls.verificationCode5.errors ==\r\n                        null &&\r\n                      formVerification.controls.verificationCode5.dirty\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode5.errors &&\r\n                      formVerification.controls.verificationCode5.dirty, \r\n                  }\"\r\n                  [ngClass]=\"{'is-invalid1':errorExit == true}\"\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  maxlength=\"1\"\r\n                  minlength=\"1\"\r\n                  class=\"inputVerificationStyle\"\r\n                  id=\"verificationNum\"\r\n                  formControlName=\"verificationCode6\"\r\n                  [(ngModel)]=\"str6\"\r\n                  min=\"0\"\r\n                  max=\"9\"\r\n                  oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode6.touched &&\r\n                      formVerification.controls.verificationCode6.errors\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-valid':\r\n                      formVerification.controls.verificationCode6.touched &&\r\n                      formVerification.controls.verificationCode6.errors ==\r\n                        null &&\r\n                      formVerification.controls.verificationCode6.dirty\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode6.errors &&\r\n                      formVerification.controls.verificationCode6.dirty, \r\n                  }\"\r\n                  [ngClass]=\"{'is-invalid1':errorExit == true}\"\r\n                />\r\n              </div>\r\n              @if (errorExit) {\r\n                <p class=\"required1\">Invalid Code</p>\r\n              }\r\n            </div>\r\n            <button type=\"submit\" [disabled]=\"formVerification.invalid\">\r\n              Reset password\r\n            </button>\r\n            <p class=\"info2\">\r\n              Dont't get the code ? <a (click)=\"resendOTP()\">Resend</a> or\r\n              <a>call us</a>\r\n            </p>\r\n            <!-- <input type=\"submit\"> -->\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "FilterComponent",
            "id": "component-FilterComponent-bd7fe7f874da0f7d9de8b4a17834f35d847af2770ab5c2cb0f64300b76253aff8c0df90cfb75b30741bb55d1347c2bb498b5cc34bb8c03140dc32ee20cf7b509",
            "file": "src/app/shared/filter/filter/filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-filter",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./filter.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cols",
                    "defaultValue": "[\"Blog Title\", \"Status\", \"SEO\", \"Created At\", \"Created By\", \"Author\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "filteredArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "filterForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "filterSearch",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "tempCols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "toggleAddFilterBtn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "addFilter",
                    "args": [
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fb",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "filter",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleAddBtn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ToggleFilterDirective",
                    "type": "directive"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ToggleFilterDirective } from '../../directives/toggle-filter.directive';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-filter',\r\n  standalone: true,\r\n  imports: [ToggleFilterDirective, ReactiveFormsModule, FormsModule, CommonModule],\r\n  templateUrl: './filter.component.html',\r\n  styleUrl: './filter.component.css'\r\n})\r\nexport class FilterComponent {\r\n\r\n  toggleAddFilterBtn!: Boolean;\r\n  filterForm!: FormGroup;\r\n  filteredArray!: FormArray;\r\n  cols: string[] = [\"Blog Title\", \"Status\", \"SEO\", \"Created At\", \"Created By\", \"Author\"]\r\n  tempCols!: string[];\r\n  filterSearch: string = \"\";\r\n  constructor(private _FormBuilder: FormBuilder) {\r\n    this.toggleAddFilterBtn = false;\r\n    this.tempCols = this.cols;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.fb();\r\n  }\r\n\r\n  fb() {\r\n    this.filterForm = this._FormBuilder.group({\r\n      columnId: [null, Validators.required],\r\n      columnName: [null, Validators.required],\r\n      columnValue: [null, Validators.required],\r\n      condition: [null, Validators.required]\r\n    })\r\n  }\r\n\r\n  toggleAddBtn() {\r\n    this.toggleAddFilterBtn = !this.toggleAddFilterBtn;\r\n  }\r\n\r\n  filter(event: any) {\r\n    if (this.filterSearch) {\r\n      this.tempCols\r\n        = this.cols.filter(column => column.toLowerCase().includes(this.filterSearch));\r\n    }\r\n    else if (event.inputType == \"deleteContentBackward\" || event.inputType == \"deleteContentForward\") {\r\n      this.tempCols = this.cols\r\n      this.cols = this.cols.filter(column => column.toLowerCase().includes(this.filterSearch));\r\n    }\r\n    else {\r\n      this.tempCols = this.cols\r\n    }\r\n  }\r\n\r\n  addFilter(columnIndex: number): void {\r\n    // (<FormArray>this.filteredArray).push(\r\n    //   new FormGroup(\r\n    //     {\r\n    //       columnid: new FormControl(null, [Validators.required]),\r\n    //       columnName: new FormControl([this.cols[columnIndex], [Validators.required]]),\r\n    //       condition: new FormControl(null, [Validators.required]),\r\n    //       columnValue: new FormControl(null, [Validators.required]),\r\n    //     }\r\n    //   )\r\n    // )\r\n  }\r\n\r\n\r\n  get controls() {\r\n    return (<FormArray>this.filterForm.get('filteredArray')).controls;\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./filter.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_FormBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "_FormBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "controls": {
                    "name": "controls",
                    "getSignature": {
                        "name": "controls",
                        "type": "",
                        "returnType": "",
                        "line": 71
                    }
                }
            },
            "templateData": "<div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col-12\">\r\n      <div class=\"filter-container\">\r\n        <div appToggleFilter>\r\n          <button class=\"filter-btn\">\r\n            <img src=\"assets/images/filter.svg\" alt=\"filter\" />Filter\r\n          </button>\r\n        </div>\r\n        <div class=\"addFilter\">\r\n          <div class=\"header\">\r\n            <p>No filter conditions are applied to this table</p>\r\n          </div>\r\n          \r\n          <button (click)=\"toggleAddBtn()\">\r\n            <img src=\"assets/images/addfilter.svg\" alt=\"addfilter\" />\r\n            Add Filter\r\n          </button>\r\n\r\n          @if(toggleAddFilterBtn){\r\n          <div class=\"filter\">\r\n            <div class=\"filterSearch\">\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"search\"\r\n                id=\"search\"\r\n                placeholder=\"Search columns\"\r\n                [(ngModel)]=\"filterSearch\"\r\n                (input)=\"filter($event)\"\r\n              />\r\n              <img src=\"assets/images/search-normal.svg\" alt=\"Search\" />\r\n            </div>\r\n            <div class=\"filteredList\">\r\n              <ul>\r\n                @for (col of tempCols; track col; let i = $index) {\r\n                <li (click)=\"addFilter(i)\">{{ col }}</li>\r\n                }\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-07f894be6f38e12f30e1e7e5d9e999c27c78ce2f0be03c15c8c5f39207229e147892a2fd1fdb54e935c4f04f03c2162e39a22c28cdc64e027ea15824ddf0f3c9",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ButtonComponent } from './button.component';\r\nimport type { User } from './user';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  standalone: true,\r\n  imports: [CommonModule, ButtonComponent],\r\n  template: `<header>\r\n    <div class=\"storybook-header\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <div *ngIf=\"user\">\r\n          <span class=\"welcome\">\r\n            Welcome, <b>{{ user.name }}</b\r\n            >!\r\n          </span>\r\n          <storybook-button\r\n            *ngIf=\"user\"\r\n            size=\"small\"\r\n            (onClick)=\"onLogout.emit($event)\"\r\n            label=\"Log out\"\r\n          ></storybook-button>\r\n        </div>\r\n        <div *ngIf=\"!user\">\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            size=\"small\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onLogin.emit($event)\"\r\n            label=\"Log in\"\r\n          ></storybook-button>\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            size=\"small\"\r\n            [primary]=\"true\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onCreateAccount.emit($event)\"\r\n            label=\"Sign up\"\r\n          ></storybook-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport class HeaderComponent {\r\n  @Input()\r\n  user: User | null = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.storybook-header svg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-header h1 {\r\n  font-weight: 700;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-header button + button {\r\n  margin-left: 10px;\r\n}\r\n\r\n.storybook-header .welcome {\r\n  color: #333;\r\n  font-size: 14px;\r\n  margin-right: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-1fe2d90eed1e175806ba37efbac502542d80de718501609b6fc7b0be3b942af6df58ded4a6354e1b944c2ff80bf5485b77e1ce3524b91c9f08c70bc5c1678be8-1",
            "file": "src/app/shared/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fullPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "notification_status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "toggleUserMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "search",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "userMenuToggled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TitleCasePipe",
                    "type": "pipe"
                },
                {
                    "name": "UpperCasePipe",
                    "type": "pipe"
                },
                {
                    "name": "UserProfileComponent",
                    "type": "component"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "CardModalComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule, LocationStrategy, TitleCasePipe, UpperCasePipe } from '@angular/common';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { BreadcrumbService } from '../../services/breadcrumb/breadcrumb.service';\r\nimport { UserProfileComponent } from '../../components/core/user-profile/user-profile.component';\r\nimport { RouterLink, RouterModule, RouterOutlet } from '@angular/router';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CardModalComponent } from '../pop-up-card/card-modal/card-modal.component';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  standalone: true,\r\n  imports: [TitleCasePipe, UpperCasePipe, UserProfileComponent, RouterOutlet, RouterModule, RouterLink, FormsModule, CardModalComponent, CommonModule],\r\n  templateUrl: './header.component.html',\r\n  styleUrl: './header.component.css'\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  notification_status!: Boolean\r\n  toggleUserMenu!: Boolean\r\n\r\n  fullPath!: string[];\r\n\r\n  constructor(private _BreadCurmb: BreadcrumbService) {\r\n    this.notification_status = false;\r\n    this.toggleUserMenu = false;\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._BreadCurmb.changeCurrentPath();\r\n    this._BreadCurmb.getCurrentPath().subscribe({\r\n      next: (res: string[]) => {\r\n        this.fullPath = res.splice(1);\r\n      }\r\n    })\r\n  }\r\n\r\n  search(event: any) {\r\n    if (event.target.value > 3)\r\n      console.log(event.target.value);\r\n  }\r\n\r\n  userMenuToggled() {\r\n    this.toggleUserMenu = !this.toggleUserMenu;\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./header.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_BreadCurmb",
                        "type": "BreadcrumbService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "_BreadCurmb",
                        "type": "BreadcrumbService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col-4 breadcrumb-col\">\r\n      <div class=\"breadcrumb\">\r\n        <!-- <div class=\"stage\">\r\n          <img src=\"assets/images/dashboard.svg\" alt=\"dashboard\" />\r\n          <img\r\n            src=\"assets/images/profile-circle-dark.svg\"\r\n            alt=\"profile-circle-dark\"\r\n          />\r\n          {{ fullPath[1] | uppercase }}\r\n        </div> -->\r\n\r\n        @for (path of fullPath; track i; let i = $index) {\r\n        <div class=\"stage\">\r\n          {{ path | titlecase }}\r\n\r\n          @if (fullPath[i] !== fullPath[fullPath.length - 1]) {\r\n          <span>></span>\r\n          }\r\n        </div>\r\n\r\n        }\r\n      </div>\r\n    </div>\r\n    <div class=\"col-8 header-right-side\">\r\n      <div class=\"row\">\r\n        <div class=\"col-4 middle-section\">\r\n          <div class=\"search-notify-message\">\r\n            <div class=\"seacrhInput\">\r\n              <input\r\n                type=\"search\"\r\n                name=\"search\"\r\n                id=\"search\"\r\n                (input)=\"search($event)\"\r\n                placeholder=\"Search for anything here\"\r\n              />\r\n              <img\r\n                class=\"magnifier\"\r\n                src=\"assets/images/magnifier.svg\"\r\n                alt=\"magnifier\"\r\n              />\r\n            </div>\r\n\r\n            <div class=\"notification\">\r\n              <div class=\"notify\">\r\n                <img\r\n                  src=\"assets/images/notification-bing.svg\"\r\n                  alt=\"bing\"\r\n                  class=\"notification-img\"\r\n                />\r\n                <span class=\"number-of-notification\">5</span>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"message\">\r\n              <div class=\"message-content\">\r\n                <img\r\n                  src=\"assets/images/notification-statu.svg\"\r\n                  alt=\"bing\"\r\n                  class=\"notification-img\"\r\n                />\r\n                @if (notification_status) {\r\n                <span class=\"number-of-notification\"></span>\r\n                }\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"col-4\">\r\n          <div class=\"user-profile\" (click)=\"userMenuToggled()\">\r\n            <div>\r\n              <div class=\"user-content-img\">\r\n                <img\r\n                  src=\"https://s3-alpha-sig.figma.com/img/c9c6/4f89/610532d55faa08c0e9757f8eaf082064?Expires=1709510400&Key-Pair-Id=APKAQ4GOSFWCVNEHN3O4&Signature=PQsvfrHW1Edq0R8ut~kBdxS-aLM~dKN45rQ4Q4VcAwCJMRV90BD9QKXQvuyHmSHu9N0SM1o0EPfZQC7xS4QT~UJmfO~TDioNd0jPYhOGZXNQOi~mRen0ZLUKWLR6t5Qp6ySJL-gZph-zLT1tpIZ8-RVgCVlXoqn7zU5wV6wko68SKLPi15NdWTYH8O9woI~M0EjIWpnmcEhujAosZi67GIHEy9OyL87jhs0cgz3oitZ0YUiCrARD9vaEk65yLCwjctOWov-2E33XD9c5X62D7vhQR-1A8ptZrVNfeEVUNXRPd9BYTrn7e7VOCtXtmjj3dT7lQanqw35o5Q9zmWA79w__\"\r\n                  alt=\"\"\r\n                />\r\n              </div>\r\n              <div class=\"user-content-info\">\r\n                <h4>Haitham Mohamed</h4>\r\n                <small>Super admin</small>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"user-arrow\">\r\n              <img src=\"assets/images/userprofile-arrow.svg\" alt=\"downarrow\" />\r\n            </div>\r\n            @if (toggleUserMenu) {\r\n            <div class=\"user-dropdown\">\r\n              <ul>\r\n                <li>\r\n                  <img\r\n                    src=\"assets/images/profile-circle-blue.svg\"\r\n                    alt=\"logout\"\r\n                  />\r\n                  Account Information\r\n                </li>\r\n                <li>\r\n                  <img src=\"assets/images/cheque.svg\" alt=\"logout\" />\r\n\r\n                  My Subscription\r\n                </li>\r\n\r\n                <li>\r\n                  <img src=\"assets/images/exit-right.svg\" alt=\"logout\" />\r\n\r\n                  Log out\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ManageRolesComponent",
            "id": "component-ManageRolesComponent-b0ebd3041cb61bc01e1bfe428a3aec4aadfc9daf106c52fb6901870353517dd8b4cf362949584793cf3f3b14f2207e1c2c0627da0122917762b6e7b5576591c7",
            "file": "src/app/components/core/management/manage-roles/manageroles.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-manageroles",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./manageroles.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isShown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { BreadcrumbService } from '../../../../services/breadcrumb/breadcrumb.service';\r\n\r\n@Component({\r\n  selector: 'app-manageroles',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './manageroles.component.html',\r\n  styleUrl: './manageroles.component.css'\r\n})\r\nexport class ManageRolesComponent implements OnInit {\r\n\r\n  constructor(private _BreadCurmb: BreadcrumbService) { }\r\n\r\n  ngOnInit() {\r\n    this._BreadCurmb.changeCurrentPath();\r\n\r\n  }\r\n  isShown: boolean = false;\r\n\r\n  show() {\r\n    if (this.isShown == true) {\r\n      this.isShown = false;\r\n\r\n    }\r\n    else {\r\n      this.isShown = true;\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./manageroles.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_BreadCurmb",
                        "type": "BreadcrumbService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "_BreadCurmb",
                        "type": "BreadcrumbService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"roles-container\">\r\n\r\n\r\n    <div class=\"role-card\">\r\n        <div class=\"card-header\">\r\n            <div class=\"left\">\r\n                <img src=\"assets/images/admin.svg\" alt=\"\">\r\n                <div class=\"text\">\r\n                    <h2>Super Admin</h2>\r\n                    <p>Lorem ipsum dolor sit amet.</p>\r\n                </div>\r\n\r\n\r\n            </div>\r\n            <div class=\"right-header\">\r\n                <div class=\"status\">\r\n                    <div class=\"dot\">\r\n\r\n                    </div>\r\n                    <p>Activate</p>\r\n                </div>\r\n\r\n                <div class=\"dots\" (click)=\"show()\">\r\n                    <div class=\"dot\" [style.background-color]=\"!isShown? '#A1A5B7':'#0660FC'\"></div>\r\n                    <div class=\"dot\" [style.background-color]=\"!isShown? '#A1A5B7':'#0660FC'\"></div>\r\n                    <div class=\"dot\" [style.background-color]=\"!isShown? '#A1A5B7':'#0660FC'\"></div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"hr\"></div>\r\n\r\n        <div class=\"members\">\r\n            <div class=\"members-numbers\">\r\n                <p>Members</p>\r\n                <div class=\"number\">3</div>\r\n            </div>\r\n            <div class=\"imgs-container\">\r\n                <img src=\"assets/images/Image-40.svg\" alt=\"\">\r\n                <img src=\"assets/images/Image-40.svg\" alt=\"\">\r\n                <img src=\"assets/images/Image-40.svg\" alt=\"\">\r\n            </div>\r\n        </div>\r\n\r\n\r\n        @if (isShown) {\r\n        <div class=\"roles-status\">\r\n            <ul>\r\n                <li><img src=\"assets/images/message-edit.svg\" alt=\"\"> Update Role</li>\r\n                <li> <img src=\"assets/images/profile-delete.svg\" alt=\"\"> Deactivate</li>\r\n                <li> <img src=\"assets/images/trash.svg\" alt=\"\"> Delete Role</li>\r\n            </ul>\r\n\r\n        </div>\r\n        }\r\n    </div>\r\n\r\n\r\n\r\n\r\n</div>\r\n"
        },
        {
            "name": "ManageUsersComponent",
            "id": "component-ManageUsersComponent-ad4a2ca43de0f421f8821f138f6c4ad691f4ea9a850ccd8595d6e6d5d6027c827b0193adf48b6083353d38f81f52ab9ea50c88867c4bcff32bed786e1063c6c9",
            "file": "src/app/components/core/management/manage-users/manage-users.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-manage-users",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./manage-users.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addUserToggler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "bodydata",
                    "defaultValue": "[12345]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "filterValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "headdata",
                    "defaultValue": "this.row1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "row1",
                    "defaultValue": "[12345]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "row2",
                    "defaultValue": "2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openFilterModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleUserModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CardComponent",
                    "type": "component"
                },
                {
                    "name": "TableComponent",
                    "type": "component"
                },
                {
                    "name": "FilterComponent",
                    "type": "component"
                },
                {
                    "name": "NewUserComponent",
                    "type": "component"
                },
                {
                    "name": "AddUserComponent",
                    "type": "component"
                },
                {
                    "name": "SortComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\nimport { CardComponent } from '../../../../shared/card/card.component';\r\nimport { TableComponent } from '../../../../shared/table/table.component';\r\nimport { BreadcrumbService } from '../../../../services/breadcrumb/breadcrumb.service';\r\nimport { FilterComponent } from '../../../../shared/filter/filter/filter.component';\r\nimport { NewUserComponent } from '../../../../shared/add-new-user/button.component';\r\nimport { AddUserComponent } from '../../add-user/add-user.component';\r\nimport { ToggleDeleteModalService } from '../../../../services/toggleModal/toggle-delete-modal.service';\r\nimport { SortComponent } from '../../../../shared/sort/sort/sort.component';\r\n\r\n@Component({\r\n  selector: 'app-manage-users',\r\n  standalone: true,\r\n  imports: [CardComponent, TableComponent, FilterComponent, NewUserComponent, AddUserComponent, SortComponent, CommonModule],\r\n  templateUrl: './manage-users.component.html',\r\n  styleUrl: './manage-users.component.css'\r\n})\r\nexport class ManageUsersComponent implements OnInit {\r\n  row1 = [12345];\r\n  row2 = 2;\r\n  headdata = this.row1;\r\n  bodydata = [12345];\r\n\r\n  addUserToggler!: Boolean;\r\n  filterValue!: Boolean;\r\n  constructor(private _BreadCurmb: BreadcrumbService, private _ToggleModal: ToggleDeleteModalService) { }\r\n\r\n  ngOnInit() {\r\n    this._BreadCurmb.changeCurrentPath();\r\n    this._ToggleModal.getToggleValue().subscribe({\r\n      next: (toggleValue) => {\r\n        this.addUserToggler = toggleValue;\r\n      }\r\n    })\r\n\r\n    this._ToggleModal.getFilterValue().subscribe({\r\n      next: (toggleValue) => {\r\n        this.filterValue = toggleValue;\r\n      }\r\n    })\r\n  }\r\n\r\n  toggleUserModal() {\r\n    this._ToggleModal.toggle();\r\n  }\r\n\r\n  openFilterModal() {\r\n    this._ToggleModal.toggleFilter();\r\n  }\r\n}\r\n",
            "styleUrl": "./manage-users.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_BreadCurmb",
                        "type": "BreadcrumbService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_ToggleModal",
                        "type": "ToggleDeleteModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "_BreadCurmb",
                        "type": "BreadcrumbService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ToggleModal",
                        "type": "ToggleDeleteModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\" [ngClass]=\"{ lowOpacity: addUserToggler }\">\r\n  <div>\r\n    <div class=\"col-12\">\r\n      <div class=\"section-title\">\r\n        <h3>User Management</h3>\r\n        <small>Mange your users and roles</small>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"card\">\r\n      <app-card\r\n        [icon_path]=\"'assets/images/user-management-count.svg'\"\r\n        [title]=\"'Active Users'\"\r\n        [description]=\"'Total user number'\"\r\n        [description_continue]=\"'in this system'\"\r\n        [total_number]=\"'3500'\"\r\n        (onCall)=\"('sss')\"\r\n      ></app-card>\r\n    </div>\r\n    <div class=\"card\">\r\n      <app-card\r\n        [icon_path]=\"'assets/images/user-management-count.svg'\"\r\n        [title]=\"'Active Users'\"\r\n        [description]=\"'Total user number'\"\r\n        [description_continue]=\"'in this system'\"\r\n        [total_number]=\"'3500'\"\r\n      ></app-card>\r\n    </div>\r\n\r\n    <div class=\"card\">\r\n      <app-card\r\n        [icon_path]=\"'assets/images/user-square.svg'\"\r\n        [title]=\"'Deactive Users'\"\r\n        [description]=\"'Total user number'\"\r\n        [description_continue]=\"'in this system'\"\r\n        [total_number]=\"'1500'\"\r\n      ></app-card>\r\n    </div>\r\n\r\n    <div class=\"card\">\r\n      <app-card\r\n        [icon_path]=\"'assets/images/user-management-count.svg'\"\r\n        [title]=\"'Active Users'\"\r\n        [description]=\"'Total user number'\"\r\n        [description_continue]=\"'in this system'\"\r\n        [total_number]=\"'3500'\"\r\n      ></app-card>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-12\">\r\n      <div class=\"features\">\r\n        <app-sort></app-sort>\r\n        <app-filter></app-filter>\r\n        <app-new-user\r\n          [btnIcon]=\"'assets/images/add-circle.svg'\"\r\n          [btnName]=\"'Add User'\"\r\n          (onAddUser)=\"toggleUserModal()\"\r\n        ></app-new-user>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <app-table></app-table>\r\n</div>\r\n\r\n<div class=\"user-profile-modal\">\r\n  <app-add-user></app-add-user>\r\n</div>\r\n"
        },
        {
            "name": "NewUserComponent",
            "id": "component-NewUserComponent-1246c83cc11ef11fe14d9ac6e4ee37d8bac99d2d1032c747f70cf8a2223b4c2f8630f788c03a526e06a104eb4f91331a7ad07d662a05cf79df5060e3f7e11b17",
            "file": "src/app/shared/add-new-user/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-new-user",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "btnIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "btnName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onAddUser",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addNewUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-new-user',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './button.component.html',\r\n  styleUrl: './button.component.css'\r\n})\r\nexport class NewUserComponent implements OnInit {\r\n\r\n  @Input('btnName') btnName!: string;\r\n  @Input('btnIcon') btnIcon!: string;\r\n  @Output() onAddUser = new EventEmitter<void>();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  addNewUser() {\r\n    this.onAddUser.emit();\r\n  }\r\n}\r\n",
            "styleUrl": "./button.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"btn\" (click)=\"addNewUser()\">\r\n  <img [src]=\"btnIcon\" alt=\"icon\" />\r\n  <div>{{ btnName }}</div>\r\n</div>\r\n"
        },
        {
            "name": "NotfoundComponent",
            "id": "component-NotfoundComponent-3ad6daa1a27bb3bbb468afab6e3f62468c973eaf273046454c5d2e6304ef613753bb4914c93139b8d7cabdc874b5b3af4b5b48e051b566e4057b401b01961433",
            "file": "src/app/components/notfound/notfound.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notfound",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./notfound.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-notfound',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './notfound.component.html',\r\n  styleUrl: './notfound.component.css'\r\n})\r\nexport class NotfoundComponent {\r\n\r\n}\r\n",
            "styleUrl": "./notfound.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col-12 header\">\r\n      <div class=\"projName\">\r\n        <img src=\"../../../assets/images/Icon.png\" alt=\"ProjectIcon\" />\r\n        <p>CMS Software</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"row\">\r\n    <div class=\"col-6 left-side\">\r\n      <h4>OOOps! Page Not Found</h4>\r\n      <p>\r\n        Sorry about that! Please visit our homepage to get where you need to go.\r\n      </p>\r\n      <button>\r\n        <img src=\"assets/images/arrow-left.svg\" alt=\"leftarrow\" />Back Home\r\n      </button>\r\n    </div>\r\n    <div class=\"col-6\">\r\n      <img src=\"assets/images/not-found.svg\" alt=\"not-found\" />\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-92f4cc9cc0054ccf9d578fc1ebe06b6d7ed1424277151dbedd6cfe73ba15609d9919dcba6e9acbd021b43117d9ce1f28adf6630c681037299b01a4c726c15a8e",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { HeaderComponent } from './header.component';\r\nimport type { User } from './user';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  standalone: true,\r\n  imports: [CommonModule, HeaderComponent],\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"doLogout()\"\r\n      (onLogin)=\"doLogin()\"\r\n      (onCreateAccount)=\"doCreateAccount()\"\r\n    ></storybook-header>\r\n    <section class=\"storybook-page\">\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Storybook tutorials\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport class PageComponent {\r\n  user: User | null = null;\r\n\r\n  doLogout() {\r\n    this.user = null;\r\n  }\r\n\r\n  doLogin() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n\r\n  doCreateAccount() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\n.storybook-page h2 {\r\n  font-weight: 700;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-page p {\r\n  margin: 1em 0;\r\n}\r\n\r\n.storybook-page a {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\n.storybook-page ul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\n.storybook-page li {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.storybook-page .tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-page .tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PaginatorComponent",
            "id": "component-PaginatorComponent-4b63c1410c045fdfc5adccfa062eb958392f7bea6253bdb9d2b04ffab70c49c8b7f135301de9b68601594f47a966d8eeda037ad8c9fd4323d3c1da5deb18fd9f",
            "file": "src/app/shared/paginator/paginator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-paginator",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./paginator.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "rowsCount",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "active",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "all",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'container'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "holder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "pages",
                    "defaultValue": "8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "firstSlide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "lastSlide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nextPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCahnge",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "prevPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { AfterViewChecked, Component, ElementRef, EventEmitter, Output, Renderer2, ViewChild } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-paginator',\r\n  templateUrl: './paginator.component.html',\r\n  styleUrl: './paginator.component.css',\r\n  standalone:true,\r\n  imports:[CommonModule],\r\n})\r\nexport class PaginatorComponent implements AfterViewChecked{\r\n  // component properties \r\n  @ViewChild('container') container!:ElementRef;\r\n  all:number = 20;\r\n  pages:number = 8 ;\r\n  active = 0;\r\n  holder!:ElementRef;\r\n  @Output() rowsCount = new EventEmitter<number>();\r\n\r\n  ngAfterViewChecked(): void {\r\n    let holder = this.container.\r\n    nativeElement.children;\r\n    switch(true){\r\n      // more than 4 pages \r\n      case this.active === 0 && this.pages > 4: \r\n      holder[0].className = 'active';\r\n      holder[1].className = 'semi';\r\n      holder[2].className = '';\r\n      break;\r\n      case this.active === 1 && this.pages > 4: \r\n      holder[0].className = '';\r\n      holder[1].className = 'active';\r\n      holder[2].className = 'semi';\r\n      break;\r\n      case  this.active > 1 && this.active < this.pages - 2 && this.pages > 4: \r\n      holder[2].textContent = this.active ;\r\n      holder[3].textContent = this.active + 1;\r\n      holder[4].textContent = this.active + 2;\r\n      break;\r\n      case this.active === this.pages - 2 && this.pages > 4: \r\n      holder[3].className = 'active';\r\n      holder[2].className = 'semi';\r\n      holder[4].className = '';\r\n      break;\r\n      case this.active === this.pages - 1 && this.pages > 4: \r\n      holder[2].className = '';\r\n      holder[4].className = 'active';\r\n      holder[3].className = 'semi';\r\n      break;\r\n      // less than 5 pages\r\n      case  this.pages <= 4: \r\n      Array.from(holder).forEach((e,i)=>{\r\n        i === this.active ? (e as HTMLElement).className = \"active\" : i === this.active + 1 && this.active < this.pages - 1 ? (e as HTMLElement).className = \"semi\" : this.active === this.pages - 1 ? holder[holder.length - 2 ].className = \"semi\": (e as HTMLElement).className = \"\";\r\n      })\r\n      break;\r\n    }\r\n  }\r\n\r\n  // get number of needed display user \r\n  onCahnge(e:Event){\r\n    this.active = 0;\r\n    this.pages = Math.ceil(this.all / +((e.target as HTMLInputElement).value));\r\n    this.rowsCount.emit(+((e.target as HTMLInputElement).value));\r\n  }\r\n\r\n  // next page \r\n  nextPage(){\r\n    this.active = this.active < this.pages - 1 ? ++this.active : this.active;\r\n  }\r\n  // previous page\r\n  prevPage(){\r\n    this.active = this.active > 0 ? --this.active : this.active;\r\n  }\r\n\r\n  // go to first slide \r\n  firstSlide(){\r\n    this.active = 0;\r\n  }\r\n  // go to last slide \r\n  lastSlide(){\r\n    this.active = this.pages - 1;\r\n  }\r\n}\r\n",
            "styleUrl": "./paginator.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterViewChecked"
            ],
            "templateData": "<div class=\"container\">\r\n  <div class=\"rows-count\">\r\n    <span><img src=\"../../../assets/images/paginator-prev.png\" alt=\"\"></span>\r\n    <div class=\"rows\">\r\n      <span>Rows </span>\r\n    <select name=\"count\" id=\"count\" (change)=\"onCahnge($event)\">\r\n      <option value=\"5\">5</option>\r\n      <option value=\"10\">10</option>\r\n      <option value=\"15\">15</option>\r\n      <option value=\"20\">20</option>\r\n      <option value=\"25\">25</option>\r\n    </select>\r\n     <span>of {{all}}</span>\r\n    </div>\r\n    <span><img src=\"../../../assets/images/paginator-next.png\" alt=\"\"></span>\r\n  </div>\r\n  <div class=\"controls\" >\r\n    <span [ngClass]=\"{'notAllowed':active === 0}\" (click)=\"firstSlide()\">\r\n      <img src=\"../../../assets/images/paginator-left.png\" alt=\"\">\r\n    </span>\r\n    <span [ngClass]=\"{'notAllowed':active === 0}\" (click)=\"prevPage()\">\r\n      <img src=\"../../../assets/images/paginator-prev.png\" alt=\"\">\r\n    </span>\r\n      <div class=\"pages\" #container>\r\n        @if(pages !== 0 && pages > 4){\r\n          <!-- not move yet -->\r\n          @if(active < 2 || active === 0){\r\n            <span>1</span>\r\n            <span>2</span>\r\n            <span>3</span>\r\n            <span>...</span>\r\n            <span>{{pages}}</span>\r\n            <!-- go to page three -->\r\n          }@else if(active >= 2 && active !== pages && active < pages - 2 ){\r\n            <span>1</span>\r\n            <span>...</span>\r\n            <span>2</span>\r\n            <span class=\"active\"  #senarioTwoS>3</span>\r\n            <span class=\"semi\"  #senarioTwoT>4</span>\r\n            <span>...</span>\r\n            <span>{{pages}}</span>\r\n          }@else if(active === pages || active >= pages - 2){\r\n            <span>1</span>\r\n            <span >...</span>\r\n            <span>{{pages - 2}}</span>\r\n            <span>{{pages - 1}}</span>\r\n            <span>{{pages}}</span>\r\n          }\r\n         }\r\n         @if(pages <= 4 && pages !== 0){\r\n            @for(page of [].constructor(pages);track $index){\r\n              <span>{{$index + 1}}</span>\r\n            }\r\n         }\r\n      </div>\r\n    <span [ngClass]=\"{'notAllowed':active >= pages - 1}\" (click)=\"nextPage()\">\r\n      <img src=\"../../../assets/images/paginator-next.png\" alt=\"\">\r\n    </span>\r\n    <span [ngClass]=\"{'notAllowed':active >= pages - 1}\" (click)=\"lastSlide()\">\r\n      <img src=\"../../../assets/images/paginatro-right.png\" alt=\"\"></span>\r\n  </div>\r\n</div>"
        },
        {
            "name": "PopupComponent",
            "id": "component-PopupComponent-e75360c4536546296de676ae6e9cf2ad73a3f800b29d4cc19cb5e14dbf430fed737cf96b66384fbf2267cca45671e573386161ce493f835bccabe38d0b8dc546",
            "file": "src/app/shared/popup/popup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-popup",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./popup.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "errorExit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onConfirm",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, DoCheck, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-popup',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './popup.component.html',\r\n  styleUrl: './popup.component.css'\r\n})\r\nexport class PopupComponent implements OnInit, OnChanges, DoCheck{\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    console.log(this.errorExit);\r\n  }\r\n  ngDoCheck(): void {\r\n    console.log(this.errorExit);\r\n    \r\n  }\r\n  @Input() message!:string;\r\n  @Input() errorExit!:boolean;\r\n  @Output() onConfirm = new EventEmitter<void>();\r\n\r\n  ngOnInit(){\r\n    console.log(this.errorExit);\r\n      this.errorExit = false;\r\n  }\r\n\r\n\r\n}\r\n",
            "styleUrl": "./popup.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges",
                "DoCheck"
            ],
            "templateData": "<div class=\"popup\" [hidden]=\"!errorExit\">\r\n  <div class=\"popup-header\">\r\n    <span>Unsaved Changes</span>\r\n    <button class=\"close-button\">×</button>\r\n  </div>\r\n  <hr />\r\n  <div class=\"popup-content\">\r\n    <p>\r\n      {{ message }}\r\n    </p>\r\n  </div>\r\n  <div class=\"popup-buttons\">\r\n    <button class=\"ok-button\" (click)=\"this.onConfirm.emit()\">Ok</button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SendmailComponent",
            "id": "component-SendmailComponent-b009520240f9a0e3588a67bb46ec8c0d8ce36e24c3127fc812fc33cd01bfcd48956c0b2ec2ea0ad6f04ef7a673f0c8e45dc3b58bd5761a988c7b102714655baa",
            "file": "src/app/components/Authentication/sendmail/sendmail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sendmail",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sendmail.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formSendMail",
                    "defaultValue": "new FormGroup({\r\n    forgetEmail: new FormControl(''),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\nimport { error } from 'console';\r\n\r\n@Component({\r\n  selector: 'app-sendmail',\r\n  standalone: true,\r\n  imports: [RouterModule, FormsModule, ReactiveFormsModule, CommonModule],\r\n  templateUrl: './sendmail.component.html',\r\n  styleUrl: './sendmail.component.css',\r\n  animations: [\r\n    trigger('flipInOut', [\r\n      transition(':enter', [\r\n        animate('0.5s', style({ transform: 'rotateY(90deg)' })),\r\n      ]),\r\n      transition(':leave', [\r\n        animate('0.5s', style({ transform: 'rotateY(180deg)' })),\r\n      ]),\r\n    ]),\r\n  ],\r\n})\r\nexport class SendmailComponent implements OnInit {\r\n\r\n  constructor(private formBuilder: FormBuilder, private _authService: AuthService, private _Router: Router) { }\r\n\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.formSendMail = this.formBuilder.group({\r\n      forgetEmail: ['', [Validators.required, Validators.email]],\r\n    });\r\n\r\n  }\r\n\r\n  formSendMail = new FormGroup({\r\n    forgetEmail: new FormControl(''),\r\n  });\r\n\r\n\r\n  resetSubmit() { // send mail\r\n    if (this.formSendMail.invalid) {\r\n      console.log(this.formSendMail);\r\n      return;\r\n    }\r\n    const email = this.formSendMail.controls.forgetEmail.value?.toString()??'';\r\n    this._authService.sendMail(email).subscribe({\r\n      next:(res)=>{\r\n        // sessionStorage.setItem('token' , res.token);\r\n        sessionStorage.setItem('email' , email);\r\n        sessionStorage.setItem('message',res.message);\r\n        console.log(res);\r\n        this._Router.navigateByUrl('/emailverification');\r\n      },error:(err)=>{\r\n        console.log(err);\r\n      }\r\n    })\r\n    // this._authService.sendMail(email).subscribe({\r\n    //   next: (res)=>{ \r\n    //     sessionStorage.setItem('token' , res.token);\r\n    //     sessionStorage.setItem('email' , res.email);\r\n    //     sessionStorage.setItem('message',res.message);\r\n    //     console.log(this.formSendMail.controls.forgetEmail.value);\r\n        \r\n    //     console.log(res.message);\r\n    //     console.log(res.token)\r\n    //     console.log(res);\r\n        \r\n    //     this._Router.navigateByUrl('/emailverification');\r\n    // },\r\n    //   error:(err)=>{alert(err.message)}\r\n    // });\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./sendmail.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n<div class=\"container\">\r\n\r\n  <div class=\"projName\">\r\n    <div class=\"nameContainer\">\r\n      <div><img src=\"../../../assets/images/Icon.png\" alt=\"Logo\" /></div>\r\n      <div class=\"projNDiv\"><p>CMS Software</p></div>\r\n    </div>\r\n\r\n    \r\n  </div>\r\n\r\n\r\n  <div class=\"resetContainer\" id=\"resetContainerId\" [@flipInOut]>\r\n    <div class=\"bg2\">\r\n      <div class=\"resetDiv\">\r\n        <form\r\n          action=\"\"\r\n          [formGroup]=\"formSendMail\"\r\n          (ngSubmit)=\"resetSubmit()\"\r\n          #resetform=\"ngForm\"\r\n        >\r\n          <div>\r\n            <h1>Forget Password</h1>\r\n            <p class=\"info1\">Enter your email, We will send you code to reset password</p>\r\n          </div>\r\n          <div>\r\n            <label class=\"form-label\" for=\"fromInput2\">Email:</label>\r\n            <input\r\n              type=\"email\"\r\n              class=\"form-input\"\r\n              id=\"fromInput2\"\r\n              placeholder=\"i.e. Haitham.mo@company.com\"\r\n              formControlName=\"forgetEmail\"\r\n              [ngClass]=\"{\r\n                'is-invalid':\r\n                  formSendMail.controls.forgetEmail.touched &&\r\n                  formSendMail.controls.forgetEmail.errors\r\n              }\"\r\n            />\r\n            @if (formSendMail.controls.forgetEmail.touched &&\r\n            formSendMail.controls.forgetEmail.errors) {\r\n            <div class=\"invalid-feedback\">\r\n              @if (formSendMail.controls.forgetEmail.errors['required']) {\r\n              <p>Email is required</p>\r\n              } @if (formSendMail.controls.forgetEmail.errors['email']) {\r\n              <p>invalid email. please verify agian</p>\r\n              }\r\n            </div>\r\n            }\r\n          </div>\r\n          <button type=\"submit\" [disabled]=\"formSendMail.invalid\">\r\n            Reset password\r\n          </button>\r\n          <p class=\"info2\">\r\n            Did you remember your password?\r\n            <a routerLink=\"/signin\">LOG IN</a>\r\n          </p>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SetnewpasswordComponent",
            "id": "component-SetnewpasswordComponent-d31eeab2f03ff3d91be6d1079a8d63a2aaf9e192ec31236dadb4796e7135956ab55b1c490624d0251b16af29192637a32021d1f3523b6a950a42e163d528e4c6",
            "file": "src/app/components/Authentication/setnewpassword/setnewpassword.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-setnewpassword",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./setnewpassword.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "eyeshow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "faEyaSlash",
                    "defaultValue": "faEyeSlash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "faEye",
                    "defaultValue": "faEye",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "forgetPassRequest",
                    "defaultValue": "{} as IForgetPassRequest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IForgetPassRequest",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "formSetNewPassword",
                    "defaultValue": "new FormGroup({\r\n    password: new FormControl(''),\r\n    confirmPassword: new FormControl(''),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "Number",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "numberLength",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "passwordHint",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "showConfirmPass",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 138
                },
                {
                    "name": "showPass",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 142
                },
                {
                    "name": "specialChar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "uppercase",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "checkPasswordLength",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "eyeShow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setNewPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showConfirmPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "test",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validateAreEqual",
                    "args": [
                        {
                            "name": "pass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "confimPass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(group: FormGroup) => void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "confimPass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, DoCheck, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\nimport { ResetPasswordService } from '../../../services/reset-password.service';\r\nimport { IForgetPassRequest } from '../../../interfaces/iforget-pass-request';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\n\r\n\r\n@Component({\r\n  selector: 'app-setnewpassword',\r\n  standalone: true,\r\n  imports: [RouterModule, FormsModule, ReactiveFormsModule, CommonModule, FontAwesomeModule],\r\n  templateUrl: './setnewpassword.component.html',\r\n  styleUrl: './setnewpassword.component.css',\r\n  animations: [\r\n    trigger('flipInOut', [\r\n      transition(':enter', [\r\n        animate('1s', style({ transform: 'rotateY(90deg)' })),\r\n      ]),\r\n      transition(':leave', [\r\n        animate('1s', style({ transform: 'rotateY(180deg)' })),\r\n      ]),\r\n    ]),\r\n  ],\r\n\r\n})\r\nexport class SetnewpasswordComponent implements OnInit, DoCheck {\r\n  eyeshow: boolean = false;\r\n  faEye = faEye;\r\n  faEyaSlash = faEyeSlash;\r\n  passwordHint: boolean = false;\r\n  uppercase: boolean = false;\r\n  specialChar: boolean = false;\r\n  Number: boolean = false;\r\n  numberLength: boolean = false;\r\n  forgetPassRequest: IForgetPassRequest = {} as IForgetPassRequest;\r\n  formSetNewPassword = new FormGroup({\r\n    password: new FormControl(''),\r\n    confirmPassword: new FormControl(''),\r\n  });\r\n\r\n  constructor(\r\n    private _authService: ResetPasswordService,\r\n\r\n    private _Router: Router,\r\n    private formBuilder: FormBuilder\r\n  ) { }\r\n\r\n  ngDoCheck(): void {\r\n    this.numberLength = /.{8,}/.test(\r\n      this.formSetNewPassword.controls.password.value!\r\n    );\r\n    this.uppercase = /[A-Z]/.test(\r\n      this.formSetNewPassword.controls.password.value!\r\n    );\r\n    this.specialChar = /[#?!@$%^&*-]/.test(\r\n      this.formSetNewPassword.controls.password.value!\r\n    );\r\n    this.Number = /[0-9]/.test(\r\n      this.formSetNewPassword.controls.password.value!\r\n    );\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.formSetNewPassword = this.formBuilder.group(\r\n      {\r\n        password: [\r\n          '',\r\n          [\r\n            Validators.required,\r\n            Validators.maxLength(40),\r\n            Validators.minLength(6),\r\n            Validators.pattern(\r\n              '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$'\r\n            ),\r\n          ],\r\n        ],\r\n        confirmPassword: ['', [Validators.required]],\r\n      },\r\n      { validator: this.validateAreEqual('password', 'confirmPassword') }\r\n    );\r\n  }\r\n\r\n  setNewPassword() {\r\n    if (this.formSetNewPassword.invalid) {\r\n      console.log(this.formSetNewPassword);\r\n      return;\r\n    }\r\n\r\n    const fv = this.formSetNewPassword.value!;\r\n    this.forgetPassRequest = {\r\n      password: fv.password?.toString() ?? '',\r\n      confirmNewPassword: fv.confirmPassword?.toString() ?? ''\r\n    }\r\n    console.log(fv);\r\n    this._authService.resetPassword(this.forgetPassRequest).subscribe({\r\n      next: (res: any) => {\r\n        sessionStorage.getItem('token');\r\n        console.log(res);\r\n        this._Router.navigateByUrl('/correctchange');\r\n      },\r\n      error: (err:any) => {\r\n        console.log(err.message);\r\n        alert(\"\");\r\n      },\r\n    });\r\n  }\r\n\r\n  validateAreEqual(pass: string, confimPass: string) {\r\n    return (group: FormGroup) => {\r\n      const password = group.controls[pass];\r\n      const confimPassword = group.controls[confimPass];\r\n      if (password.value !== confimPassword.value) {\r\n        confimPassword.setErrors({ passwordMismatch: true });\r\n      }\r\n    };\r\n  }\r\n\r\n  test() {\r\n    this.passwordHint = !this.passwordHint;\r\n    console.log(this.passwordHint);\r\n  }\r\n\r\n  eyeShow() {\r\n    this.eyeshow = !this.eyeshow;\r\n  }\r\n\r\n  showConfirmPass: boolean = false\r\n  showConfirmPassword() {\r\n    this.showConfirmPass = !this.showConfirmPass\r\n  }\r\n  showPass: boolean = false;\r\n  showPassword() {\r\n    this.showPass = !this.showPass;\r\n  }\r\n\r\n  checkPasswordLength(controlName: string) {\r\n    if (this.formSetNewPassword.get(controlName)?.value) {\r\n      if (+this.formSetNewPassword.get(controlName)?.value.length > 40)\r\n        this.formSetNewPassword.get(controlName)?.patchValue(this.formSetNewPassword.get(controlName)?.value.slice(0, 40));\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./setnewpassword.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_authService",
                        "type": "ResetPasswordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "_authService",
                        "type": "ResetPasswordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "DoCheck"
            ],
            "templateData": "<div class=\"container\">\r\n  <div class=\"projName\">\r\n    <div class=\"nameContainer\">\r\n      <div><img src=\"../../../assets/images/Icon.png\" alt=\"Logo\" /></div>\r\n      <div class=\"projNDiv\"><p class=\"Name\">CMS Software</p></div>\r\n    </div>\r\n\r\n    <div class=\"selDiv\">\r\n      <select name=\"language\">\r\n        <option value=\"en\">English</option>\r\n        <option value=\"en\">Arabic</option>\r\n      </select>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"loginContainer\" id=\"loginContainerId\" [@flipInOut]>\r\n    <div class=\"bg3\">\r\n      <div class=\"loginDiv\">\r\n        <h1>Set a new password</h1>\r\n        <p class=\"info1\">\r\n          New password must be different from your previous passwords\r\n        </p>\r\n        <div>\r\n          <form\r\n            action=\"\"\r\n            [formGroup]=\"formSetNewPassword\"\r\n            (ngSubmit)=\"setNewPassword()\"\r\n            #setnewpassform=\"ngForm\"\r\n          >\r\n            <div class=\"label-div\">\r\n              <label class=\"form-label\" for=\"fromInput3\">Password</label>\r\n              @if (showPass) {\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-input passwordCheck\"\r\n                id=\"fromInput3\"\r\n                placeholder=\"********************\"\r\n                formControlName=\"password\"\r\n                [ngClass]=\"{\r\n                  'is-invalid':\r\n                  formSetNewPassword.controls.password.touched &&\r\n                  formSetNewPassword.controls.password.errors,\r\n                  'is-valid':\r\n                  formSetNewPassword.controls.password.touched &&\r\n                  formSetNewPassword.controls.password.errors == null ,\r\n                  'is-touched':\r\n                  formSetNewPassword.controls.password.untouched &&\r\n                  formSetNewPassword.controls.password.errors == null,\r\n              }\"\r\n                (focusin)=\"test()\"\r\n                (input)=\"checkPasswordLength('password')\"\r\n                (focusout)=\"test()\"\r\n              />\r\n              }@else {\r\n              <input\r\n                type=\"password\"\r\n                class=\"form-input passwordCheck\"\r\n                id=\"fromInput3\"\r\n                placeholder=\"********************\"\r\n                formControlName=\"password\"\r\n                [ngClass]=\"{\r\n                  'is-invalid':\r\n                  formSetNewPassword.controls.password.touched &&\r\n                  formSetNewPassword.controls.password.errors,\r\n                  'is-valid':\r\n                  formSetNewPassword.controls.password.touched &&\r\n                  formSetNewPassword.controls.password.errors == null ,\r\n                  'is-touched':\r\n                  formSetNewPassword.controls.password.untouched &&\r\n                  formSetNewPassword.controls.password.errors == null,\r\n              }\"\r\n                (focusin)=\"test()\"\r\n                (input)=\"checkPasswordLength('password')\"\r\n                (focusout)=\"test()\"\r\n              />\r\n              } @if(showPass){\r\n              <fa-icon\r\n                [icon]=\"faEye\"\r\n                class=\"EyeIcon\"\r\n                (click)=\"showPassword()\"\r\n              ></fa-icon>\r\n              }@else {\r\n              <fa-icon\r\n                [icon]=\"faEyaSlash\"\r\n                class=\"EyeIcon\"\r\n                (click)=\"showPassword()\"\r\n              ></fa-icon>\r\n              }\r\n\r\n              <!-- <span\r\n              class=\"p-viewer\"\r\n              [ngClass]=\"{ show: !passwordHint }\"\r\n              [ngClass]=\"{ hide: !passwordHint }\"\r\n            >\r\n              <fa-icon [icon]=\"faEye\" class=\"faEye\" (click)=\"eyeShow()\"></fa-icon>\r\n              <hr\r\n                [ngClass]=\"{ show: eyeshow }\"\r\n                [ngClass]=\"{ hide: eyeshow }\"\r\n                class=\"eyeHr\"\r\n              />\r\n            </span> -->\r\n\r\n              <br />\r\n              <div class=\"passwordCheckContainer\">\r\n                <div class=\"invalid-feedback\" [hidden]=\"!passwordHint\">\r\n                  <div class=\"strongth-password\">\r\n                    @if(formSetNewPassword.controls.password.value!.length < 6\r\n                    || formSetNewPassword.controls.password.value!.length >= 6\r\n                    && formSetNewPassword.controls.password.errors){\r\n                    <div class=\"bar\" id=\"week\"></div>\r\n                    <div class=\"bar\" id=\"mediumH\"></div>\r\n                    <div class=\"bar\" id=\"strongH\"></div>\r\n\r\n                    } @if(formSetNewPassword.controls.password.value!.length >=\r\n                    6 && formSetNewPassword.controls.password.value!.length < 15\r\n                    && formSetNewPassword.controls.password.errors==null){\r\n                    <div class=\"bar\" id=\"mediumS\"></div>\r\n                    <div class=\"bar\" id=\"medium\" #medium></div>\r\n                    <div class=\"bar\" id=\"strongH\"></div>\r\n\r\n                    } @if(formSetNewPassword.controls.password.value!.length >=\r\n                    15 && formSetNewPassword.controls.password.errors==null){\r\n                    <div class=\"bar\" id=\"weekH\"></div>\r\n                    <div class=\"bar\" id=\"strongS\" #medium></div>\r\n                    <div class=\"bar\" id=\"strong\" #strong></div>\r\n\r\n                    }\r\n                  </div>\r\n                </div>\r\n                <p\r\n                  id=\"passHint\"\r\n                  [ngClass]=\"{ show: passwordHint }\"\r\n                  [ngClass]=\"{ hide: passwordHint }\"\r\n                >\r\n                  Password hint : 8 characters minimum\r\n                </p>\r\n                <div\r\n                  style=\"\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: space-around;\r\n                    transition: ease all 1.5s;\r\n                  \"\r\n                >\r\n                  <div style=\"margin-right: 5px\" [hidden]=\"!passwordHint\">\r\n                    @if(formSetNewPassword.controls.password.value!.length < 6\r\n                    || formSetNewPassword.controls.password.value!.length >= 6\r\n                    && formSetNewPassword.controls.password.errors){\r\n                    <p class=\"passCheckWord\">Password: Week</p>\r\n                    } @if(formSetNewPassword.controls.password.value!.length >=\r\n                    6 && formSetNewPassword.controls.password.value!.length < 15\r\n                    && formSetNewPassword.controls.password.errors==null){\r\n                    <p class=\"passCheckWord\">Password: Meduim</p>\r\n                    } @if(formSetNewPassword.controls.password.value!.length >=\r\n                    15 && formSetNewPassword.controls.password.errors==null){\r\n                    <p class=\"passCheckWord\">Password: Strong</p>\r\n                    }\r\n                  </div>\r\n                  <button class=\"tooltip\">\r\n                    !\r\n                    <ul class=\"tooltiptext\">\r\n                      Your Password Must Contain:\r\n                      <li>\r\n                        <span\r\n                          class=\"correctIcon\"\r\n                          [ngClass]=\"{\r\n                            changeBG: numberLength\r\n                          }\"\r\n                          >✔</span\r\n                        >At least 8 characters\r\n                      </li>\r\n                      <li>\r\n                        <span\r\n                          class=\"correctIcon\"\r\n                          [ngClass]=\"{\r\n                            changeBG: uppercase\r\n                          }\"\r\n                          >✔</span\r\n                        >At least One Capital Letter\r\n                      </li>\r\n                      <li>\r\n                        <span\r\n                          class=\"correctIcon\"\r\n                          [ngClass]=\"{\r\n                            changeBG: Number\r\n                          }\"\r\n                          >✔</span\r\n                        >At least One Numbers\r\n                      </li>\r\n                      <li>\r\n                        <span\r\n                          class=\"correctIcon\"\r\n                          [ngClass]=\"{\r\n                            changeBG: specialChar\r\n                          }\"\r\n                          >✔</span\r\n                        >At least One Special Character:!#$%^&*()_+.\r\n                      </li>\r\n                    </ul>\r\n                    <!-- <span id=\"length\"></span> -->\r\n                    <!-- <span id=\"upercase\">At least contain 1 upercase</span>\r\n                  <span id=\"number\">At least contain 3 numbers</span> -->\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div class=\"label-div\">\r\n                <label class=\"form-label\" for=\"fromInput4\"\r\n                  >Confirm Password</label\r\n                >\r\n                <!-- <span class=\"p-viewer1\">\r\n                <fa-icon [icon]=\"faEye\"></fa-icon>\r\n                </span> -->\r\n                @if (showConfirmPass) {\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-input\"\r\n                  id=\"fromInput4\"\r\n                  formControlName=\"confirmPassword\"\r\n                  (input)=\"checkPasswordLength('confirmPassword')\"\r\n                  placeholder=\"********************\"\r\n                  [ngClass]=\"{\r\n                'is-invalid':\r\n                formSetNewPassword.controls.confirmPassword.touched &&\r\n                formSetNewPassword.controls.confirmPassword.errors,\r\n                'is-valid':\r\n                formSetNewPassword.controls.confirmPassword.touched &&\r\n                formSetNewPassword.controls.confirmPassword.errors == null ,\r\n                'is-touched':\r\n                formSetNewPassword.controls.confirmPassword.untouched &&\r\n                formSetNewPassword.controls.confirmPassword.errors == null,\r\n                }\"\r\n                />\r\n                }@else {\r\n                <input\r\n                  type=\"password\"\r\n                  class=\"form-input\"\r\n                  id=\"fromInput4\"\r\n                  formControlName=\"confirmPassword\"\r\n                  placeholder=\"********************\"\r\n                  (input)=\"checkPasswordLength('confirmPassword')\"\r\n                  [ngClass]=\"{\r\n                'is-invalid':\r\n                formSetNewPassword.controls.confirmPassword.touched &&\r\n                formSetNewPassword.controls.confirmPassword.errors,\r\n                'is-valid':\r\n                formSetNewPassword.controls.confirmPassword.touched &&\r\n                formSetNewPassword.controls.confirmPassword.errors == null ,\r\n                'is-touched':\r\n                formSetNewPassword.controls.confirmPassword.untouched &&\r\n                formSetNewPassword.controls.confirmPassword.errors == null,\r\n                }\"\r\n                />\r\n                } @if(showConfirmPass){\r\n                <fa-icon\r\n                  [icon]=\"faEye\"\r\n                  class=\"EyeIcon\"\r\n                  (click)=\"showConfirmPassword()\"\r\n                ></fa-icon>\r\n                }@else {\r\n                <fa-icon\r\n                  [icon]=\"faEyaSlash\"\r\n                  class=\"EyeIcon\"\r\n                  (click)=\"showConfirmPassword()\"\r\n                ></fa-icon>\r\n                } @if (formSetNewPassword.controls.confirmPassword.touched &&\r\n                formSetNewPassword.controls.confirmPassword.errors) {\r\n                <div class=\"invalid-feedback\">\r\n                  @if(formSetNewPassword.controls.confirmPassword.errors['required'])\r\n                  {\r\n                  <p class=\"required\">Confirm Password is required</p>\r\n                  }\r\n                  @if(formSetNewPassword.controls.confirmPassword.errors['passwordMismatch'])\r\n                  {\r\n                  <p>Confirm Password does not match</p>\r\n                  }\r\n                </div>\r\n                }\r\n              </div>\r\n              <button type=\"submit\" [disabled]=\"formSetNewPassword.invalid\">\r\n                Reset password\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-067504ab17f33dc97fd7524bbd50cb9d7af34056d572031309b787fbcaee6b31fac33168dc1243febf6565fff41faf888b6be47aa35b3d847ff3bd200a8ad4ce",
            "file": "src/app/shared/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "darkMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "dropDownToggler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "openDropdown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "sidebarToggler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "Dropdowntoggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleAppearance",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "togglesidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { ToggleService } from '../../services/toggleBtn/toggle.service';\r\n\r\n@Component({\r\n  selector: 'app-sidebar',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterModule],\r\n  templateUrl: './sidebar.component.html',\r\n  styleUrl: './sidebar.component.css'\r\n})\r\nexport class SidebarComponent {\r\n\r\n  openDropdown!: Boolean;\r\n  dropDownToggler!: Boolean;\r\n  darkMode!: Boolean;\r\n  sidebarToggler!: Boolean;\r\n\r\n  constructor(private _Toggle: ToggleService) {\r\n    this.openDropdown = true;\r\n    this.darkMode = false;\r\n    this.sidebarToggler = false;\r\n  }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  togglesidebar() {\r\n    this._Toggle.toggle();\r\n    this.sidebarToggler = !this.sidebarToggler;\r\n  }\r\n\r\n\r\n  Dropdowntoggle() {\r\n    this.dropDownToggler = !this.dropDownToggler;\r\n  }\r\n\r\n  toggleAppearance() {\r\n    this.darkMode = !this.darkMode;\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./sidebar.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_Toggle",
                        "type": "ToggleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "_Toggle",
                        "type": "ToggleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\r\n  class=\"container sidebar\"\r\n  [ngClass]=\"{ darkTheme: darkMode, 'sidebar-toggle': sidebarToggler }\"\r\n>\r\n  <div\r\n    [ngClass]=\"\r\n      sidebarToggler ? 'toggle-sidebar-btn-rotated' : 'toggle-sidebar-btn'\r\n    \"\r\n    (click)=\"togglesidebar()\"\r\n  >\r\n    <div class=\"arrow\">\r\n      <img src=\"assets/images/toggle-sidebar.svg\" alt=\"toggle-sidebar\" />\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"sidebar-top-section\">\r\n    <div class=\"row\">\r\n      <div\r\n        class=\"col-12\"\r\n        [ngClass]=\"\r\n          !sidebarToggler ? 'sidebar-header' : 'sidebar-header-show-logo-only'\r\n        \"\r\n      >\r\n        <div [ngClass]=\"!sidebarToggler ? '' : ''\">\r\n          <div class=\"image\">\r\n            <img src=\"assets/images/Icon.png\" alt=\"Logo\" />\r\n          </div>\r\n        </div>\r\n        <div\r\n          class=\"sidebar-header-content\"\r\n          [ngClass]=\"{\r\n            hide: sidebarToggler,\r\n            show: !sidebarToggler,\r\n            '': !sidebarToggler\r\n          }\"\r\n        >\r\n          <div class=\"title\">\r\n            <h4>CMS Software</h4>\r\n            <small>Manage your blog</small>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div\r\n        class=\"col-12 sidebar-menu\"\r\n        [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n      >\r\n        <h5>Home</h5>\r\n      </div>\r\n      <div class=\"col-12 main\">\r\n        <ul class=\"main-list\">\r\n          <li>\r\n            <a href=\"dashboard\">\r\n              <div class=\"icon\">\r\n                <img src=\"assets/images/dashboard.svg\" alt=\"dashboard\" />\r\n              </div>\r\n              <div\r\n                class=\"link-title\"\r\n                [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n              >\r\n                Dashboard\r\n              </div>\r\n            </a>\r\n          </li>\r\n          <li\r\n            [routerLink]=\"['/cms/blogs']\"\r\n            [routerLinkActive]=\"darkMode ? 'darkTheme_active' : 'active'\"\r\n            [routerLinkActiveOptions]=\"{ exact: true }\"\r\n          >\r\n            <a>\r\n              <div class=\"icon\">\r\n                <img src=\"assets/images/blog-posts.svg\" alt=\"blog-posts\" />\r\n              </div>\r\n              <div\r\n                class=\"link-title\"\r\n                [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n              >\r\n                Blog Posts\r\n              </div>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"media\">\r\n              <div class=\"icon\">\r\n                <img\r\n                  src=\"assets/images/media-management.svg\"\r\n                  alt=\"media-management\"\r\n                />\r\n              </div>\r\n              <div\r\n                class=\"link-title\"\r\n                [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n              >\r\n                Media Management\r\n              </div>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"seo\">\r\n              <div class=\"icon\">\r\n                <img src=\"assets/images/seo.svg\" alt=\"seo\" />\r\n              </div>\r\n              <div\r\n                class=\"link-title\"\r\n                [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n              >\r\n                SEO\r\n              </div>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"reporting an\">\r\n              <div class=\"icon\">\r\n                <img src=\"assets/images/analytic.svg\" alt=\"report&analytic\" />\r\n              </div>\r\n              <div\r\n                class=\"link-title\"\r\n                [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n              >\r\n                Report & analytic\r\n              </div>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"comments\">\r\n              <div class=\"icon\">\r\n                <img src=\"assets/images/comments.svg\" alt=\"comments\" />\r\n              </div>\r\n              <div\r\n                class=\"link-title\"\r\n                [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n              >\r\n                Comments\r\n              </div>\r\n            </a>\r\n          </li>\r\n          <li\r\n            (click)=\"Dropdowntoggle()\"\r\n            [routerLinkActive]=\"darkMode ? 'darkTheme_active' : 'active'\"\r\n            [routerLinkActiveOptions]=\"{ exact: true }\"\r\n          >\r\n            <div class=\"drop-down\">\r\n              <div class=\"icon\">\r\n                @if (darkMode) {\r\n                <img src=\"assets/images/profile-circle.svg\" alt=\"profile\" />\r\n\r\n                } @else{\r\n                <img\r\n                  src=\"assets/images/profile-circle-dark.svg\"\r\n                  alt=\"profile\"\r\n                />\r\n                }\r\n              </div>\r\n              <div\r\n                class=\"link-title\"\r\n                [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n              >\r\n                <div\r\n                  [ngClass]=\"{\r\n                    hide: sidebarToggler,\r\n                  }\"\r\n                >\r\n                  User Management\r\n                </div>\r\n\r\n                @if(darkMode || sidebarToggler ){\r\n                <img\r\n                  [hidden]=\"sidebarToggler\"\r\n                  [ngClass]=\"{\r\n                    rotate: dropDownToggler,\r\n                    'reverse-rotate': !dropDownToggler\r\n                  }\"\r\n                  src=\"assets/images/angle-up-solid-dark.svg\"\r\n                  alt=\"up-arrow\"\r\n                />} @else{\r\n                <img\r\n                  [hidden]=\"sidebarToggler\"\r\n                  [ngClass]=\"{\r\n                    rotate: dropDownToggler,\r\n                    'reverse-rotate': !dropDownToggler\r\n                  }\"\r\n                  src=\"assets/images/up-arrow.svg\"\r\n                  alt=\"up-arrow\"\r\n                />\r\n                } @if(dropDownToggler && !sidebarToggler){\r\n                <div class=\"sub-links\">\r\n                  <ul>\r\n                    <li\r\n                      [routerLink]=\"['management', 'users']\"\r\n                      routerLinkActive=\"active-sublink\"\r\n                      (click)=\"Dropdowntoggle()\"\r\n                    >\r\n                      <a> Manage Users </a>\r\n                    </li>\r\n                    <li\r\n                      [routerLink]=\"['management', 'roles']\"\r\n                      routerLinkActive=\"active-sublink\"\r\n                      (click)=\"[Dropdowntoggle()]\"\r\n                    >\r\n                      <a>Manage Roles</a>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n                }\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"sidebar-bottom-section\">\r\n    <div class=\"row\">\r\n      <div\r\n        class=\"col-12 sidebar-menu\"\r\n        [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n      >\r\n        <h5>Pages</h5>\r\n      </div>\r\n      <div class=\"col-12 sidebar-menu-links\">\r\n        <ul>\r\n          <li>\r\n            <a href=\"dashboard\">\r\n              <div class=\"icon\">\r\n                <img src=\"assets/images/settings.svg\" alt=\"settings\" />\r\n              </div>\r\n              <div\r\n                class=\"link-title\"\r\n                [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n              >\r\n                Settings\r\n              </div>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"blogpost\">\r\n              <div class=\"icon\">\r\n                <img src=\"assets/images/help-center.svg\" alt=\"help-center\" />\r\n              </div>\r\n              <div\r\n                class=\"link-title\"\r\n                [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n              >\r\n                Help Center\r\n              </div>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n\r\n    <div\r\n      class=\"row\"\r\n      [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n    >\r\n      <div\r\n        class=\"col-12 dark-mode\"\r\n        [ngClass]=\"\r\n          !sidebarToggler ? 'dark-mode' : 'dark-mode-without-background'\r\n        \"\r\n      >\r\n        <div class=\"dark-mode-section\">\r\n          <div class=\"dark-mode-icon\">\r\n            <img src=\"assets/images/moon.svg\" alt=\"moon\" />\r\n          </div>\r\n          <div class=\"link-title\">Dark Mode</div>\r\n        </div>\r\n        <div class=\"toggle\">\r\n          <div class=\"toggle\">\r\n            <label class=\"switch\">\r\n              <input (click)=\"toggleAppearance()\" type=\"checkbox\" />\r\n              <span class=\"slider round\"></span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SigninComponent",
            "id": "component-SigninComponent-7fb9248c8e7623190fba92f373c12d81c3d6f90a6d7d1424f197b21b66cd87c65c2b4e63dee0c0c302dad0c8221dfa8f8c5f9a37dd715a70d5af943e596aa0f6",
            "file": "src/app/components/Authentication/signin/signin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signin",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./signin.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorExit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "eyeshow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "faEyaSlash",
                    "defaultValue": "faEyeSlash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "faEye",
                    "defaultValue": "faEye",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "formInfo",
                    "defaultValue": "new FormGroup({\r\n    email: new FormControl(''),\r\n    password: new FormControl(''),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "Index",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "Number",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "numberLength",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "passwordHint",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "showConfirmPass",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "showPass",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "signInRequest",
                    "defaultValue": "{} as ILogin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILogin",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "specialChar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "uppercase",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methodsClass": [
                {
                    "name": "checkbox",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkPasswordLength",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showConfirmPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "Submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, DoCheck, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { ILogin } from '../../../interfaces/logininterface';\r\nimport { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\n\r\n@Component({\r\n  selector: 'app-signin',\r\n  standalone: true,\r\n  imports: [RouterModule, FormsModule, ReactiveFormsModule, CommonModule, FontAwesomeModule],\r\n  templateUrl: './signin.component.html',\r\n  styleUrl: './signin.component.css',\r\n  animations: [\r\n    trigger('flipInOut', [\r\n      transition(':enter', [\r\n        animate('1s', style({ transform: 'rotateY(0deg)' })),\r\n      ]),\r\n      transition(':leave', [\r\n        animate('1s', style({ transform: 'rotateY(180deg)' })),\r\n      ]),\r\n    ]),\r\n  ],\r\n})\r\nexport class SigninComponent implements OnInit, DoCheck {\r\n\r\n  Index: number = 1;\r\n  submitted: boolean = false;\r\n  passwordHint: boolean = false;\r\n  eyeshow: boolean = false;\r\n  uppercase: boolean = false;\r\n  specialChar: boolean = false;\r\n  Number: boolean = false;\r\n  numberLength: boolean = false;\r\n  signInRequest: ILogin = {} as ILogin;\r\n  faEye = faEye;\r\n  faEyaSlash = faEyeSlash;\r\n  errorExit:boolean = false;\r\n\r\n\r\n  constructor(private formBuilder: FormBuilder, private _authService: AuthService, private _Router: Router) { }\r\n\r\n  formInfo = new FormGroup({\r\n    email: new FormControl(''),\r\n    password: new FormControl(''),\r\n  });\r\n\r\n\r\n  // validateAreEqual(pass:string , confimPass:string) {\r\n  //   return (group:FormGroup) => {\r\n  //     const password = group.controls[pass];\r\n  //     const confimPassword = group.controls[confimPass];\r\n  //     if(password.value !== confimPassword.value){\r\n  //       confimPassword.setErrors({passwordMismatch: true});\r\n  //     }\r\n  //   }\r\n  // }\r\n  // match(){\r\n  //   if(this.formInfo.controls.password.value == this.formSetNewPassword.controls.confirmPassword.value){\r\n  //     return true;\r\n  //   }else{\r\n  //     return false;\r\n  //   }\r\n  // }\r\n  ngDoCheck(): void { }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.formInfo = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: [\r\n        '',\r\n        [\r\n          Validators.required,\r\n        ],\r\n      ],\r\n\r\n    });\r\n  }\r\n\r\n\r\n  Submit() { //login\r\n    this.submitted = true;\r\n    if (this.formInfo.invalid) {\r\n      console.log(this.formInfo);\r\n      return;\r\n    }\r\n    const fv = this.formInfo.value!;\r\n    this.signInRequest = {\r\n      email: fv.email?.toString() ?? '',\r\n      password: fv.password?.toString() ?? '',\r\n    }\r\n\r\n    this._authService.Login(this.signInRequest).subscribe({\r\n      next: (res) => {\r\n        this._Router.navigateByUrl('/home');\r\n      },\r\n      error: (err) => {\r\n        console.log(err);\r\n        // alert(\"Email or Password is invalid\");\r\n        this.errorExit = true;\r\n      }\r\n\r\n    });\r\n  }\r\n  checkbox() {\r\n    localStorage.setItem('email', this.formInfo.controls.email?.toString() ?? '');\r\n    localStorage.setItem('password', this.formInfo.controls.password?.toString() ?? '');\r\n  }\r\n  showConfirmPass: boolean = false\r\n  showConfirmPassword() {\r\n    this.showConfirmPass = !this.showConfirmPass\r\n  }\r\n  showPass: boolean = false;\r\n  showPassword() {\r\n    this.showPass = !this.showPass;\r\n  }\r\n\r\n  checkPasswordLength(controlName: string) {\r\n    if (this.formInfo.get(controlName)?.value) {\r\n      if (+this.formInfo.get(controlName)?.value.length > 40)\r\n        this.formInfo.get(controlName)?.patchValue(this.formInfo.get(controlName)?.value.slice(0, 40));\r\n    }\r\n  }\r\n\r\n  // resetSubmit() { // send mail\r\n  //   if (this.formSendMail.invalid) {\r\n  //     console.log(this.formInfo);\r\n  //     return;\r\n  //   }\r\n  //   this.showVerification();\r\n  //   this._authService.signIn(this.formSendMail.value).subscribe((response) => {\r\n  //     if (response.message == 'success') {\r\n  //       localStorage.setItem('token',response.token);\r\n  //       this.showVerification();\r\n  //     }else{\r\n  //       alert(response.message);\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // verificationSubmit() { // send mail\r\n  //   if (this.formVerification.invalid) {\r\n  //     console.log(this.formVerification);\r\n  //     return;\r\n  //   }\r\n  //   this.showSetNewPass();\r\n  //   this._authService.signIn(this.formVerification.value).subscribe((response) => {\r\n  //     if (response.message == 'success') {\r\n  //       localStorage.setItem('token',response.token);\r\n  //       this.showSetNewPass();\r\n  //     }else{\r\n  //       alert(response.message);\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // setNewPassword(){\r\n  //   if (this.formSetNewPassword.invalid) {\r\n  //     console.log(this.formSetNewPassword);\r\n  //     return;\r\n  //   }\r\n  //   this.showChangePass()\r\n  //   this._authService.signIn(this.formSetNewPassword.value).subscribe((response) => {\r\n  //     if (response.message == 'success') {\r\n  //       localStorage.setItem('token',response.token);\r\n  //       this.showChangePass();\r\n  //     }else{\r\n  //       alert(response.message);\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // flipCotainer = document.getElementById('loginContainerId');\r\n  // loginCotainerId = document.getElementById('loginContainerId');\r\n  // resetCotainerId = document.getElementById('resetContainerId');\r\n  // showForgetPassForm() {\r\n  //   document.getElementById('resetContainerId')?.classList.add('flip-out');\r\n  // flipCotainer?.s\r\n  // this.flipCotainer?.classList.add('flip');\r\n  // this.loginCotainerId?.style.display != 'none';\r\n  // this.resetCotainerId?.style.display != 'block';\r\n  // console.log('flip');\r\n  // this.Index = 2 ;\r\n  // }\r\n\r\n  // showLoginin(){\r\n\r\n  //   this.Index = 1 ;\r\n  // }\r\n  // showVerification(){\r\n  //   this.Index = 3;\r\n  // }\r\n  // showSetNewPass(){\r\n  //   this.Index = 4;\r\n  // }\r\n  // showChangePass(){\r\n  //   this.Index = 5;\r\n  // }\r\n  // showLogout(){\r\n  //   this.Index = 6;\r\n  // }\r\n\r\n\r\n  // test() {\r\n  //   this.passwordHint = !this.passwordHint;\r\n  //   console.log(this.passwordHint);\r\n  // }\r\n\r\n  // eyeShow() {\r\n  //   this.eyeshow = !this.eyeshow;\r\n  // }\r\n}\r\n",
            "styleUrl": "./signin.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "DoCheck"
            ],
            "templateData": "<!DOCTYPE html>\r\n<div class=\"container\">\r\n  <div class=\"projName\">\r\n    <div class=\"nameContainer\">\r\n      <div><img src=\"../../../assets/images/Icon.png\" alt=\"Logo\" /></div>\r\n      <div class=\"projNDiv\"><p class=\"Name\">CMS Software</p></div>\r\n    </div>\r\n  </div>\r\n\r\n  <div\r\n    class=\"container1\"\r\n    [ngClass]=\"{ 'flip-out': Index == 2, 'flip-in': Index == 1 }\"\r\n    [ngClass]=\"{ 'flip-out': Index == 3, 'flip-in': Index == 4 }\"\r\n    [ngClass]=\"{ 'flip-out': Index == 5, 'flip-in': Index == 6 }\"\r\n  >\r\n    <div class=\"loginContainer\" id=\"loginContainerId\" [@flipInOut]>\r\n      <div class=\"bg\">\r\n        <div class=\"loginDiv\">\r\n          <h1>\r\n            Welcome! 👋\r\n            <!-- <i class=\"fa-solid fa-hand fa-flip-horizontal fa-lg\" style=\"color: #FFD43B;\"></i> -->\r\n          </h1>\r\n          <p class=\"info1\">Login in to your CMS System account</p>\r\n          <div>\r\n            <form\r\n              action=\"\"\r\n              [formGroup]=\"formInfo\"\r\n              (ngSubmit)=\"Submit()\"\r\n              #form=\"ngForm\"\r\n            >\r\n              <div>\r\n                <label class=\"form-label\" for=\"fromInput2\">Email</label>\r\n                <input\r\n                  type=\"email\"\r\n                  class=\"form-input\"\r\n                  id=\"fromInput2\"\r\n                  placeholder=\"i.e. Haitham.mo@company.com\"\r\n                  formControlName=\"email\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid':\r\n                      formInfo.controls.email.touched &&\r\n                      formInfo.controls.email.errors\r\n                  }\"\r\n                />\r\n                @if (formInfo.controls.email.touched &&\r\n                formInfo.controls.email.errors) {\r\n                <div class=\"invalid-feedback\">\r\n                  @if (formInfo.controls.email.errors['required']) {\r\n                  <p>Email is required</p>\r\n                  } @if (formInfo.controls.email.errors['email']) {\r\n                  <p>Email is invalid</p>\r\n                  }\r\n                </div>\r\n                }\r\n              </div>\r\n              <div class=\"label-div\">\r\n                <label class=\"form-label\" for=\"fromInput3\">Password</label>\r\n                @if (showPass) {\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-input\"\r\n                  id=\"fromInput3\"\r\n                  placeholder=\"********************\"\r\n                  formControlName=\"password\"\r\n                  (input)=\"checkPasswordLength('password')\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid':\r\n                      formInfo.controls.password.touched &&\r\n                      formInfo.controls.password.errors\r\n                  }\"\r\n                />\r\n                } @else {\r\n                <input\r\n                  type=\"password\"\r\n                  class=\"form-input\"\r\n                  id=\"fromInput3\"\r\n                  placeholder=\"********************\"\r\n                  formControlName=\"password\"\r\n                  (input)=\"checkPasswordLength('password')\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid':\r\n                      formInfo.controls.password.touched &&\r\n                      formInfo.controls.password.errors\r\n                  }\"\r\n                />\r\n                } @if(showPass){\r\n                <fa-icon\r\n                  [icon]=\"faEye\"\r\n                  class=\"EyeIcon\"\r\n                  (click)=\"showPassword()\"\r\n                ></fa-icon>\r\n                }@else {\r\n                <fa-icon\r\n                  [icon]=\"faEyaSlash\"\r\n                  class=\"EyeIcon\"\r\n                  (click)=\"showPassword()\"\r\n                ></fa-icon>\r\n                } @if (formInfo.controls.password.touched &&\r\n                formInfo.controls.password.errors) {\r\n                <div class=\"invalid-feedback\">\r\n                  @if (formInfo.controls.password.errors['required']) {\r\n                  <p>Password is required</p>\r\n                  }\r\n                </div>\r\n                }\r\n              </div>\r\n              @if(errorExit){\r\n                <p class=\"required1\">Email or Pasword is invalid</p>\r\n              }\r\n              <div class=\"checkbox\">\r\n                <div class=\"checkDiv\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    id=\"checkbox\"\r\n                    (change)=\"checkbox()\"\r\n                    name=\"checkbox\"\r\n                  />\r\n                  <label for=\"checkbox\" id=\"checkLabel\">Remember me</label>\r\n                </div>\r\n                <!-- <label style=\"display: inline; border: 1px solid #BFD4E466; width: 18px; height: 18px;\"></label> -->\r\n\r\n                <a routerLink=\"/sendmail\"\r\n                  ><p id=\"forget\">Forget password?</p></a\r\n                >\r\n              </div>\r\n              <button\r\n                [ngClass]=\"{ disabled: formInfo.invalid }\"\r\n                type=\"submit\"\r\n                [disabled]=\"!form.valid\"\r\n              >\r\n                LOG IN\r\n              </button>\r\n              <p class=\"info22\">\r\n                Didn't have an Account? <a routerLink=\"/signup\">Register</a>\r\n              </p>\r\n              <!-- <input type=\"submit\"> -->\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SignupComponent",
            "id": "component-SignupComponent-fc9f459f0d00881810d650d79f2c16a9c028046a527bc66b259fc2772647ed10580a628c27a85615849b39be5cdcb9131e860d8d69869f03d2331006c8bb2522",
            "file": "src/app/components/Authentication/signup/signup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signup",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./signup.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorExit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 145
                },
                {
                    "name": "eyeshow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "faEyaSlash",
                    "defaultValue": "faEyeSlash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "faEye",
                    "defaultValue": "faEye",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "faFacebook",
                    "defaultValue": "faFacebook",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "faGoogle",
                    "defaultValue": "faGoogle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "filmIcon",
                    "defaultValue": "faFilm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "formInfo",
                    "defaultValue": "new FormGroup({\r\n    fullName: new FormControl(''),\r\n    email: new FormControl(''),\r\n    password: new FormControl(''),\r\n    confirmPassword: new FormControl(''),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "Number",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "numberLength",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "passwordHint",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "pwd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 215
                },
                {
                    "name": "showConfirmPass",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 178
                },
                {
                    "name": "showPass",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 182
                },
                {
                    "name": "signUpRequest",
                    "defaultValue": "{} as ISignupRequest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISignupRequest",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "slides",
                    "defaultValue": "[\r\n    '../../../assets/images/illustration.png',\r\n    '../../../assets/images/Frame 1000016152.svg',\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 140,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "slidIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 138
                },
                {
                    "name": "specialChar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "testStr",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 214
                },
                {
                    "name": "uppercase",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "checkPasswordLength",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "currentSlide",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "eyeShow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeAlreadyExistError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 235,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showConfirmPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showSlides",
                    "args": [
                        {
                            "name": "i",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.slidIndex"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.slidIndex",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUpTest",
                    "args": [
                        {
                            "name": "str",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "Submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "test",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unshowPassAfter2S",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateAreEqual",
                    "args": [
                        {
                            "name": "pass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "confimPass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(group: FormGroup) => void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "confimPass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressBar"
                },
                {
                    "name": "PasswordDirective",
                    "type": "directive"
                },
                {
                    "name": "PopupComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  AfterViewInit,\r\n  Component,\r\n  DoCheck,\r\n  ElementRef,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { faFacebook, faGoogle } from '@fortawesome/free-brands-svg-icons';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { MatProgressBar } from '@angular/material/progress-bar';\r\nimport { faFilm, faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\nimport { ISignupRequest } from '../../../interfaces/signupinterface';\r\nimport { PasswordDirective } from '../password.directive';\r\nimport { PopupComponent } from '../../../shared/popup/popup.component';\r\n\r\n@Component({\r\n  selector: 'app-signup',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    FontAwesomeModule,\r\n    RouterModule,\r\n    MatProgressBar,\r\n    PasswordDirective,\r\n    PopupComponent\r\n  ],\r\n  templateUrl: './signup.component.html',\r\n  styleUrl: './signup.component.css',\r\n  animations: [\r\n    trigger('flipInOut', [\r\n      transition(':enter', [\r\n        animate('1s', style({ transform: 'rotateY(90deg)' })),\r\n      ]),\r\n      transition(':leave', [\r\n        animate('1s', style({ transform: 'rotateY(180deg)' })),\r\n      ]),\r\n    ]),\r\n  ],\r\n})\r\nexport class SignupComponent implements OnInit, DoCheck, AfterViewInit {\r\n  [x: string]: any;\r\n  filmIcon = faFilm;\r\n  faFacebook = faFacebook;\r\n  faGoogle = faGoogle;\r\n  faEye = faEye;\r\n  faEyaSlash = faEyeSlash;\r\n  submitted = false;\r\n  passwordHint: boolean = false;\r\n  eyeshow: boolean = false;\r\n  uppercase: boolean = false;\r\n  specialChar: boolean = false;\r\n  Number: boolean = false;\r\n  numberLength: boolean = false;\r\n  signUpRequest: ISignupRequest = {} as ISignupRequest;\r\n\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private _authService: AuthService,\r\n    private _Router: Router,\r\n    private element: ElementRef\r\n  ) { }\r\n\r\n  ngAfterViewInit(): void { }\r\n\r\n  ngDoCheck(): void {\r\n    this.numberLength = /.{8,}/.test(this.formInfo.controls.password.value!);\r\n    this.uppercase = /[A-Z]/.test(this.formInfo.controls.password.value!);\r\n    this.specialChar = /[#?!@$%^&*-]/.test(\r\n      this.formInfo.controls.password.value!\r\n    );\r\n    this.Number = /[0-9]/.test(this.formInfo.controls.password.value!);\r\n  }\r\n\r\n  formInfo = new FormGroup({\r\n    fullName: new FormControl(''),\r\n    email: new FormControl(''),\r\n    password: new FormControl(''),\r\n    confirmPassword: new FormControl(''),\r\n  });\r\n  validateAreEqual(pass: string, confimPass: string) {\r\n    return (group: FormGroup) => {\r\n      const password = group.controls[pass];\r\n      const confimPassword = group.controls[confimPass];\r\n      if (password.value !== confimPassword.value) {\r\n        confimPassword.setErrors({ passwordMismatch: true });\r\n      } else {\r\n        confimPassword.setErrors(null);\r\n      }\r\n    };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.formInfo = this.formBuilder.group(\r\n      {\r\n        fullName: [\r\n          '',\r\n          [\r\n            Validators.required,\r\n            Validators.minLength(2),\r\n            Validators.maxLength(60),\r\n            Validators.pattern('^[a-zA-Z]{2,}(?: [a-zA-Z]+){0,2}$')\r\n\r\n          ],\r\n        ],\r\n        email: ['', [Validators.required, Validators.email]],\r\n        password: [\r\n          '',\r\n          [\r\n            Validators.required,\r\n            Validators.maxLength(40),\r\n            Validators.minLength(8),\r\n            Validators.pattern(\r\n              '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$'\r\n            ),\r\n          ],\r\n        ],\r\n        confirmPassword: ['', [Validators.required]],\r\n      },\r\n      { validator: this.validateAreEqual('password', 'confirmPassword') }\r\n    );\r\n  }\r\n\r\n  slidIndex: number = 0;\r\n\r\n  public slides: string[] = [\r\n    '../../../assets/images/illustration.png',\r\n    '../../../assets/images/Frame 1000016152.svg',\r\n  ];\r\n\r\n  errorExit: boolean = false;\r\n\r\n  Submit() {\r\n    //this.submitted = true;\r\n    if (this.formInfo.invalid) {\r\n      return;\r\n    }\r\n    const fv = this.formInfo.value!;\r\n    this.signUpRequest = {\r\n      fullName: fv.fullName?.toString() ?? '',\r\n      email: fv.email?.toString() ?? '',\r\n      password: fv.password?.toString() ?? '',\r\n      confirmPassword: fv.confirmPassword?.toString() ?? ''\r\n    }\r\n    console.log(this.signUpRequest);\r\n    this._authService.signUp(this.signUpRequest).subscribe({\r\n      next: (res) => {\r\n        console.log(res);\r\n        sessionStorage.setItem('token', res.token);\r\n        sessionStorage.setItem('email', res.email);\r\n        this._Router.navigateByUrl('/signupverification');\r\n        // this._authService.setTokenInSessionStorage(res['token']);\r\n      },\r\n      error: (err) => {\r\n        this.errorExit = true;\r\n        console.log(this.errorExit);\r\n\r\n        console.log(err);\r\n        // alert(\"Email already exit\");\r\n      }\r\n    });\r\n\r\n  }\r\n  showConfirmPass: boolean = false\r\n  showConfirmPassword() {\r\n    this.showConfirmPass = !this.showConfirmPass\r\n  }\r\n  showPass: boolean = false;\r\n  showPassword() {\r\n    this.showPass = !this.showPass;\r\n  }\r\n\r\n  unshowPassAfter2S(event: any) {\r\n    console.log(event);\r\n\r\n    const ele = this.element.nativeElement as HTMLInputElement;\r\n    setTimeout(() => {\r\n      ele.type = 'text'\r\n    }, 2000)\r\n  }\r\n\r\n  showSlides(i = this.slidIndex) {\r\n    let silde = this.slides[i];\r\n    return silde;\r\n  }\r\n\r\n  currentSlide(i: number) {\r\n    this.slidIndex = i;\r\n    return this.showSlides();\r\n  }\r\n\r\n  test() {\r\n    this.passwordHint = !this.passwordHint;\r\n  }\r\n\r\n  eyeShow() {\r\n    this.eyeshow = !this.eyeshow;\r\n  }\r\n\r\n  testStr: string = '';\r\n  pwd!: string;\r\n  signUpTest(str: any) {\r\n    console.log(str);\r\n    const input = this.element.nativeElement as HTMLInputElement;\r\n    input.type = 'text';\r\n    setTimeout(() => {\r\n      this.testStr += `-`\r\n      input.type = 'password'\r\n      this.pwd += str.key;\r\n      console.log(this.pwd);\r\n    }, 2000);\r\n  }\r\n\r\n  checkPasswordLength(controlName: string) {\r\n    if (this.formInfo.get(controlName)?.value) {\r\n      if (+this.formInfo.get(controlName)?.value.length > 40)\r\n        this.formInfo.get(controlName)?.patchValue(this.formInfo.get(controlName)?.value.slice(0, 40));\r\n    }\r\n  }\r\n\r\n  removeAlreadyExistError() {\r\n    this.errorExit = false;\r\n  }\r\n\r\n  // changeErrorExit(){\r\n  //   this.errorExit = false;\r\n  // }\r\n}\r\n\r\n",
            "styleUrl": "./signup.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 68,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "DoCheck",
                "AfterViewInit"
            ],
            "templateData": "<!DOCTYPE html>\r\n<div class=\"container\">\r\n  <div class=\"formDiv\">\r\n    <div class=\"projName\">\r\n      <img src=\"../../../assets/images/Icon.png\" alt=\"ProjectIcon\" />\r\n      <p>CMS Software</p>\r\n    </div>\r\n\r\n    <h1 id=\"welcomeId\">\r\n      Welcome! 👋\r\n      <!-- <i class=\"fa-solid fa-hand fa-flip-horizontal fa-lg\" style=\"color: #FFD43B;\"></i> -->\r\n    </h1>\r\n    <p id=\"info\" style=\"text-align: center\">\r\n      Sign Up to Manage Blog post account\r\n    </p>\r\n\r\n    <form\r\n      class=\"form-group\"\r\n      [formGroup]=\"formInfo\"\r\n      (ngSubmit)=\"Submit()\"\r\n      #form=\"ngForm\"\r\n    >\r\n      <div class=\"FLinksContainer\">\r\n        <div class=\"formLinks\">\r\n          <a href=\"https://www.google.com/\">\r\n            <p>\r\n              <img src=\"../../../../assets/images/google.svg\" alt=\"\" />\r\n              <span class=\"whenComputer\"\r\n                >Sign up with Google &nbsp; &nbsp;</span\r\n              >\r\n              <span class=\"whenPhone\">&nbsp;With Google</span>\r\n            </p>\r\n          </a>\r\n        </div>\r\n        <div class=\"formLinks\">\r\n          <a href=\"https://www.facebook.com/\">\r\n            <p>\r\n              <img src=\"../../../../assets/images/facebook.svg\" alt=\"\" />\r\n\r\n              <span class=\"whenComputer\">Sign up with Facebook</span>\r\n              <span class=\"whenPhone\">With Facebook</span>\r\n            </p>\r\n          </a>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"line\">\r\n        <hr />\r\n        <span>OR</span>\r\n        <hr />\r\n      </div>\r\n      <div>\r\n        <label class=\"form-label\" for=\"fromInput1\">Full Name</label>\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-input\"\r\n          formControlName=\"fullName\"\r\n          [ngClass]=\"{\r\n            'is-invalid':\r\n            formInfo.controls.fullName.touched &&\r\n            formInfo.controls.fullName.errors,\r\n            'is-valid':\r\n            formInfo.controls.fullName.touched && \r\n            formInfo.controls.fullName.errors == null ,\r\n            'is-touched':\r\n            formInfo.controls.fullName.untouched && \r\n            formInfo.controls.fullName.errors == null,\r\n        }\"\r\n          id=\"fromInput1\"\r\n          placeholder=\"i.e. Haitham mohamed\"\r\n        />\r\n        @if (formInfo.controls.fullName.errors &&\r\n        formInfo.controls.fullName.touched) {\r\n        <div class=\"invalid-feedback\">\r\n          @if (formInfo.controls.fullName.errors['required']) {\r\n          <p class=\"required\">Full Name is required</p>\r\n          } @if (formInfo.controls.fullName.errors['minLength']) {\r\n          <p class=\"required\">Invalid Name</p>\r\n          } @if (formInfo.controls.fullName.errors['pattern']) {\r\n          <p class=\"required\">Full Name must be more than one character</p>\r\n          }\r\n        </div>\r\n        }\r\n      </div>\r\n      <div>\r\n        <label class=\"form-label\" for=\"fromInput2\">Email</label>\r\n        <input\r\n          type=\"email\"\r\n          class=\"form-input\"\r\n          id=\"fromInput2\"\r\n          placeholder=\"i.e. Haitham.mo@company.com\"\r\n          formControlName=\"email\"\r\n          (input)=\"removeAlreadyExistError()\"\r\n          [ngClass]=\"{\r\n            'is-invalid':\r\n            formInfo.controls.email.touched &&\r\n            formInfo.controls.email.errors,\r\n            'is-valid':\r\n            formInfo.controls.email.touched && \r\n            formInfo.controls.email.errors == null ,\r\n            'is-touched':\r\n            formInfo.controls.email.untouched && \r\n            formInfo.controls.email.errors == null,\r\n        }\"\r\n        />\r\n        @if (formInfo.controls.email.touched && formInfo.controls.email.errors)\r\n        {\r\n        <div class=\"invalid-feedback\">\r\n          @if (formInfo.controls.email.errors['required']) {\r\n          <p class=\"required\">Email is required</p>\r\n          } @if (formInfo.controls.email.errors['email']) {\r\n          <p>Email is invalid</p>\r\n          }\r\n        </div>\r\n        } @if(errorExit){\r\n        <p class=\"required1\">Email Already Exit</p>\r\n        }\r\n      </div>\r\n      <div class=\"label-div\">\r\n        <label class=\"form-label\" for=\"fromInput3\">Password</label>\r\n        @if (showPass) {\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-input passwordCheck\"\r\n          id=\"fromInput3\"\r\n          placeholder=\"********************\"\r\n          formControlName=\"password\"\r\n          (input)=\"checkPasswordLength('password')\"\r\n          [ngClass]=\"{\r\n              'is-invalid':\r\n              formInfo.controls.password.touched &&\r\n              formInfo.controls.password.errors,\r\n              'is-valid':\r\n              formInfo.controls.password.touched && \r\n              formInfo.controls.password.errors == null ,\r\n              'is-touched':\r\n              formInfo.controls.password.untouched && \r\n              formInfo.controls.password.errors == null,\r\n          }\"\r\n          (focusin)=\"test()\"\r\n          (focusout)=\"test()\"\r\n          [appPassword]=\"showPass\"\r\n        />\r\n        }@else {\r\n        <input\r\n          type=\"password\"\r\n          class=\"form-input passwordCheck\"\r\n          id=\"fromInput3\"\r\n          placeholder=\"********************\"\r\n          formControlName=\"password\"\r\n          (change)=\"unshowPassAfter2S($event)\"\r\n          (input)=\"checkPasswordLength('password')\"\r\n          [ngClass]=\"{\r\n              'is-invalid':\r\n              formInfo.controls.password.touched &&\r\n              formInfo.controls.password.errors,\r\n              'is-valid':\r\n              formInfo.controls.password.touched && \r\n              formInfo.controls.password.errors == null ,\r\n              'is-touched':\r\n              formInfo.controls.password.untouched && \r\n              formInfo.controls.password.errors == null,\r\n          }\"\r\n          (focusin)=\"test()\"\r\n          (focusout)=\"test()\"\r\n          [appPassword]=\"showPass\"\r\n        />\r\n        } @if(showPass){\r\n        <fa-icon\r\n          [icon]=\"faEye\"\r\n          class=\"EyeIcon\"\r\n          (click)=\"showPassword()\"\r\n        ></fa-icon>\r\n        }@else {\r\n        <fa-icon\r\n          [icon]=\"faEyaSlash\"\r\n          class=\"EyeIcon\"\r\n          (click)=\"showPassword()\"\r\n        ></fa-icon>\r\n        }\r\n\r\n        <!-- <span\r\n          class=\"p-viewer\"\r\n          [ngClass]=\"{ show: !passwordHint }\"\r\n          [ngClass]=\"{ hide: !passwordHint }\"\r\n        >\r\n          <fa-icon [icon]=\"faEye\" class=\"faEye\" (click)=\"eyeShow()\"></fa-icon>\r\n          <hr\r\n            [ngClass]=\"{ show: eyeshow }\"\r\n            [ngClass]=\"{ hide: eyeshow }\"\r\n            class=\"eyeHr\"\r\n          />\r\n        </span> -->\r\n\r\n        <br />\r\n        <div\r\n          [ngClass]=\"{ passContainerSmallSize: passwordHint == true }\"\r\n          class=\"passwordCheckContainer\"\r\n        >\r\n          <div class=\"invalid-feedback\" [hidden]=\"!passwordHint\">\r\n            <div class=\"strongth-password\">\r\n              @if(formInfo.controls.password.value!.length < 6 ||\r\n              formInfo.controls.password.value!.length >= 6 &&\r\n              formInfo.controls.password.errors){\r\n              <div class=\"bar\" id=\"week\"></div>\r\n              <div class=\"bar\" id=\"mediumH\"></div>\r\n              <div class=\"bar\" id=\"strongH\"></div>\r\n\r\n              } @if(formInfo.controls.password.value!.length >= 6 &&\r\n              formInfo.controls.password.value!.length < 15 &&\r\n              formInfo.controls.password.errors==null){\r\n              <div class=\"bar\" id=\"mediumS\"></div>\r\n              <div class=\"bar\" id=\"medium\" #medium></div>\r\n              <div class=\"bar\" id=\"strongH\"></div>\r\n\r\n              } @if(formInfo.controls.password.value!.length >= 15 &&\r\n              formInfo.controls.password.errors==null){\r\n              <div class=\"bar\" id=\"weekH\"></div>\r\n              <div class=\"bar\" id=\"strongS\" #medium></div>\r\n              <div class=\"bar\" id=\"strong\" #strong></div>\r\n              }\r\n            </div>\r\n          </div>\r\n          <p\r\n            id=\"passHint\"\r\n            [ngClass]=\"{ show: passwordHint }\"\r\n            [ngClass]=\"{ hide: passwordHint }\"\r\n          >\r\n            Password hint : 8 characters minimum\r\n          </p>\r\n          <div\r\n            class=\"passwordValidation\"\r\n            style=\"\r\n              display: flex;\r\n              align-items: center;\r\n              justify-content: space-between;\r\n            \"\r\n          >\r\n            <div [hidden]=\"!passwordHint\" class=\"passwordHint\">\r\n              @if(formInfo.controls.password.value!.length < 6 ||\r\n              formInfo.controls.password.value!.length >= 6 &&\r\n              formInfo.controls.password.errors){\r\n              <p class=\"passCheckWord\">Password: Week</p>\r\n              } @if(formInfo.controls.password.value!.length >= 6 &&\r\n              formInfo.controls.password.value!.length < 15 &&\r\n              formInfo.controls.password.errors==null){\r\n              <p class=\"passCheckWord\">Password: Meduim</p>\r\n              } @if(formInfo.controls.password.value!.length >= 15 &&\r\n              formInfo.controls.password.errors==null){\r\n              <p class=\"passCheckWord\">Password: Strong</p>\r\n              }\r\n            </div>\r\n            <button class=\"tooltip\">\r\n              !\r\n              <ul class=\"tooltiptext\">\r\n                Your Password Must Contain:\r\n                <li>\r\n                  <span\r\n                    class=\"correctIcon\"\r\n                    [ngClass]=\"{\r\n                      changeBG: numberLength\r\n                    }\"\r\n                    >✔</span\r\n                  >At least 8 characters\r\n                </li>\r\n                <li>\r\n                  <span\r\n                    class=\"correctIcon\"\r\n                    [ngClass]=\"{\r\n                      changeBG: uppercase\r\n                    }\"\r\n                    >✔</span\r\n                  >At least One Capital Letter\r\n                </li>\r\n                <li>\r\n                  <span\r\n                    class=\"correctIcon\"\r\n                    [ngClass]=\"{\r\n                      changeBG: Number\r\n                    }\"\r\n                    >✔</span\r\n                  >At least One Number\r\n                </li>\r\n                <li>\r\n                  <span\r\n                    class=\"correctIcon\"\r\n                    [ngClass]=\"{\r\n                      changeBG: specialChar\r\n                    }\"\r\n                    >✔</span\r\n                  >At least One Special\r\n                  <span style=\"margin-left: 12%\">Character:!#$%^&*()_+.</span>\r\n                </li>\r\n              </ul>\r\n              <!-- <span id=\"length\"></span> -->\r\n              <!-- <span id=\"upercase\">At least contain 1 upercase</span>\r\n            <span id=\"number\">At least contain 3 numbers</span> -->\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"label-div\">\r\n        <label class=\"form-label\" for=\"fromInput4\">Confirm Password</label>\r\n        <!-- <span class=\"p-viewer1\">\r\n\t\t\t\t\t<fa-icon [icon]=\"faEye\"></fa-icon>\r\n\t\t\t\t</span> -->\r\n        @if (showConfirmPass) {\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-input\"\r\n          id=\"fromInput4\"\r\n          formControlName=\"confirmPassword\"\r\n          placeholder=\"********************\"\r\n          (input)=\"checkPasswordLength('confirmPassword')\"\r\n          [ngClass]=\"{\r\n            'is-invalid':\r\n            formInfo.controls.confirmPassword.touched &&\r\n            formInfo.controls.confirmPassword.errors,\r\n            'is-valid':\r\n            formInfo.controls.confirmPassword.touched && \r\n            formInfo.controls.confirmPassword.errors == null ,\r\n            'is-touched':\r\n            formInfo.controls.confirmPassword.untouched && \r\n            formInfo.controls.confirmPassword.errors == null,\r\n        }\"\r\n          [appPassword]=\"showConfirmPass\"\r\n        />\r\n        }@else {\r\n        <input\r\n          type=\"password\"\r\n          class=\"form-input\"\r\n          id=\"fromInput4\"\r\n          formControlName=\"confirmPassword\"\r\n          placeholder=\"********************\"\r\n          (input)=\"checkPasswordLength('confirmPassword')\"\r\n          [ngClass]=\"{\r\n            'is-invalid':\r\n            formInfo.controls.confirmPassword.touched &&\r\n            formInfo.controls.confirmPassword.errors,\r\n            'is-valid':\r\n            formInfo.controls.confirmPassword.touched && \r\n            formInfo.controls.confirmPassword.errors == null ,\r\n            'is-touched':\r\n            formInfo.controls.confirmPassword.untouched && \r\n            formInfo.controls.confirmPassword.errors == null,\r\n        }\"\r\n          [appPassword]=\"showConfirmPass\"\r\n        />\r\n        } @if(showConfirmPass){\r\n        <fa-icon\r\n          [icon]=\"faEye\"\r\n          class=\"EyeIcon\"\r\n          (click)=\"showConfirmPassword()\"\r\n        ></fa-icon>\r\n        }@else {\r\n        <fa-icon\r\n          [icon]=\"faEyaSlash\"\r\n          class=\"EyeIcon\"\r\n          (click)=\"showConfirmPassword()\"\r\n        ></fa-icon>\r\n        } @if (formInfo.controls.confirmPassword.touched &&\r\n        formInfo.controls.confirmPassword.errors) {\r\n        <div class=\"invalid-feedback\">\r\n          @if (formInfo.controls.confirmPassword.errors['required']) {\r\n          <p class=\"required\">Confirm Password is required</p>\r\n          } @if (formInfo.controls.confirmPassword.errors['passwordMismatch']) {\r\n          <p class=\"required\">Confirm Password does not match</p>\r\n          }\r\n        </div>\r\n        }\r\n      </div>\r\n\r\n      <button\r\n        type=\"submit\"\r\n        class=\"submitButton\"\r\n        [disabled]=\"formInfo.invalid\"\r\n        [ngClass]=\"{ disabled: formInfo.invalid }\"\r\n      >\r\n        Sign Up\r\n      </button>\r\n    </form>\r\n    <!-- <div class=\"popup\" [hidden]=\"errorExit==false\">\r\n      <div class=\"popup-header\">\r\n        <span>Unsaved Changes</span>\r\n        <button class=\"close-button\">×</button>\r\n      </div>\r\n      <hr />\r\n      <div class=\"popup-content\">\r\n        <p>\r\n          You have unsaved changes. If you leave without saving, your changes\r\n          will be lost.\r\n        </p>\r\n      </div>\r\n      <div class=\"popup-buttons\">\r\n        <button class=\"cancel-button\" (click)=\"errorExit=false\">Cancel</button>\r\n        <button class=\"ok-button\" (click)=\"errorExit=false\">Ok</button>\r\n      </div>\r\n    </div> -->\r\n    <!-- <app-popup message=\"ُEmail already Exit\" [errorExit]=\"errorExit\" (onConfirm)=\"errorExit = false\"></app-popup> -->\r\n    <div class=\"paragraphs\">\r\n      <p class=\"info\">Have an Account? <a routerLink=\"/signin\">Login</a></p>\r\n      <p class=\"para\">\r\n        By signing up you agree to our\r\n        <a style=\"font-weight: 400\" href=\"\">Terms</a> and\r\n        <a href=\"\" style=\"font-weight: 400\">privacy policy</a>\r\n      </p>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"SlidesContainer\">\r\n    <!-- Slideshow container -->\r\n    <div class=\"slideshow-container\">\r\n      <!-- Full-width images with number and caption text -->\r\n      <div id=\"mySlide\" class=\"mySlides fade\">\r\n        <div class=\"cardDiv\">\r\n          <div class=\"avatar\" [ngClass]=\"{ hide: slidIndex == 1 }\">\r\n            <img\r\n              src=\"../../../assets/images/data.svg\"\r\n              alt=\"Data\"\r\n              class=\"insideImg\"\r\n              id=\"inside\"\r\n            />\r\n          </div>\r\n\r\n          <img src=\"{{ showSlides() }}\" alt=\"Slides\" class=\"img1\" />\r\n        </div>\r\n        <div class=\"text\">\r\n          <p style=\"font-size: 22px; font-weight: 500\">\r\n            Manage Any Content Anywhere\r\n          </p>\r\n          <p>\r\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Omnis\r\n            repellat modi dicta suscipit vero\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <!-- Next and previous buttons -->\r\n      <!-- <div style=\"display: flex; justify-content: space-between; position: relative; top: -50%;\">\r\n        <a class=\"prev\" (click)=\"prevSlides()\">&#10094;</a>\r\n        <a class=\"next\" (click)=\"nextSlides()\">&#10095;</a>\r\n      </div> -->\r\n    </div>\r\n\r\n    <div class=\"dots\" style=\"text-align: center\">\r\n      <a class=\"arrows\" (click)=\"currentSlide(0)\">&#x2190;</a>\r\n      <span\r\n        id=\"dot1\"\r\n        class=\"active-dot\"\r\n        (click)=\"currentSlide(0)\"\r\n        [ngClass]=\"{ dot: slidIndex == 1, 'active-dot': slidIndex == 0 }\"\r\n      ></span>\r\n      <span\r\n        id=\"dot2\"\r\n        class=\"dot\"\r\n        (click)=\"currentSlide(1)\"\r\n        [ngClass]=\"{ 'active-dot': slidIndex == 1 }\"\r\n      ></span>\r\n      <a class=\"arrows\" (click)=\"currentSlide(1)\">&#x2192;</a>\r\n    </div>\r\n\r\n    <!-- The dots/circles -->\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SignupverificationComponent",
            "id": "component-SignupverificationComponent-60875ed79f7c2b9e7a9d4f44d614dc93126319865966adc103fdc4b7979c72dbd594da92bf45b821ddf8760b77137a76013027208dbc2d6b826fbc71ec01be5b",
            "file": "src/app/components/Authentication/signupverification/signupverification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signupverification",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./signupverification.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "errorExist",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "formVerification",
                    "defaultValue": "new FormGroup({\r\n    verificationCode1: new FormControl(''),\r\n    verificationCode2: new FormControl(''),\r\n    verificationCode3: new FormControl(''),\r\n    verificationCode4: new FormControl(''),\r\n    verificationCode5: new FormControl(''),\r\n    verificationCode6: new FormControl(''),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "str",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "str1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "str2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "str3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "str4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "str5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "str6",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "changeErrorBoolean",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resendOTP",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "verificationSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TitleCasePipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { AsyncPipe, CommonModule, TitleCasePipe } from '@angular/common';\r\n// import { SignupComponent } from '../signup/signup.component'; \r\n\r\n@Component({\r\n  selector: 'app-signupverification',\r\n  standalone: true,\r\n  imports: [\r\n    RouterModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n    TitleCasePipe\r\n  ],\r\n  templateUrl: './signupverification.component.html',\r\n  styleUrl: './signupverification.component.css',\r\n})\r\nexport class SignupverificationComponent implements OnInit {\r\n  str1!: string;\r\n  str2!: string;\r\n  str3!: string;\r\n  str4!: string;\r\n  str5!: string;\r\n  str6!: string;\r\n  errorExist: boolean = false;\r\n  str: string = '';\r\n  email!: string | undefined;\r\n  formVerification = new FormGroup({\r\n    verificationCode1: new FormControl(''),\r\n    verificationCode2: new FormControl(''),\r\n    verificationCode3: new FormControl(''),\r\n    verificationCode4: new FormControl(''),\r\n    verificationCode5: new FormControl(''),\r\n    verificationCode6: new FormControl(''),\r\n  });\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private _authService: AuthService,\r\n    private _Router: Router,\r\n\r\n  ) { }\r\n  ngOnInit(): void {\r\n    // this.email = sessionStorage.getItem('email')?.slice(0, 4).concat(\"************\");\r\n    this.formVerification = this.formBuilder.group({\r\n      verificationCode1: ['', [Validators.required, Validators.maxLength(1)]],\r\n      verificationCode2: ['', [Validators.required, Validators.maxLength(1)]],\r\n      verificationCode3: ['', [Validators.required, Validators.maxLength(1)]],\r\n      verificationCode4: ['', [Validators.required, Validators.maxLength(1)]],\r\n      verificationCode5: ['', [Validators.required, Validators.maxLength(1)]],\r\n      verificationCode6: ['', [Validators.required, Validators.maxLength(1)]],\r\n    });\r\n  }\r\n\r\n  // signupEmail: string =\r\n  //   this._signupComponent.formInfo.controls.email.value ?? '';\r\n\r\n  verificationSubmit() {\r\n    // send mail\r\n    if (this.formVerification.invalid) {\r\n      console.log(this.formVerification);\r\n      return;\r\n    }\r\n    // this.showSetNewPass();\r\n    this.str = `${this.str1}${this.str2}${this.str3}${this.str4}${this.str5}${this.str6}`;\r\n    console.log(this.str);\r\n    this._authService.verificationCode(this.str).subscribe({\r\n      next: (res) => {\r\n        //Clear the session\r\n        sessionStorage.clear();\r\n        this._Router.navigateByUrl('/signin');\r\n        // this._authService.setToken(res.token);\r\n        // this.showSetNewPass();\r\n        console.log(res);\r\n      },\r\n      error: (err) => {\r\n        console.log(err);\r\n        // alert('Incorrect Code');\r\n        // console.log(this.signupEmail);\r\n        this.errorExist = true;\r\n      },\r\n    });\r\n  }\r\n\r\n  resendOTP() {\r\n    this._authService.resendOTP().subscribe({\r\n      next: (res) => {\r\n        console.log(res);\r\n        // this._authService.setToken(res.token);\r\n        // this.showSetNewPass();\r\n      },\r\n      error: (err) => {\r\n        console.log(err);\r\n      },\r\n    });\r\n  }\r\n\r\n  changeErrorBoolean() {\r\n    if (this.errorExist)\r\n      this.errorExist = false;\r\n  }\r\n}\r\n",
            "styleUrl": "./signupverification.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<!DOCTYPE html>\r\n<div class=\"container\">\r\n  <div class=\"formDiv\">\r\n    <div class=\"projName\">\r\n      <img src=\"../../../assets/images/Icon.png\" alt=\"ProjectIcon\" />\r\n      <p>CMS Software</p>\r\n    </div>\r\n\r\n    <div style=\"text-align: center\" class=\"loginDiv\">\r\n      <h1>Email Verification</h1>\r\n      <p class=\"info1\">\r\n        We sent OTP code to\r\n        <span style=\"color: #0660fc\">{{ email | titlecase }}</span>\r\n      </p>\r\n      <img\r\n        style=\"margin-left: auto; margin-right: auto\"\r\n        src=\"../../../assets/images/smartphone.svg\"\r\n        alt=\"OTP photo\"\r\n      />\r\n\r\n      <form\r\n        action=\"\"\r\n        [formGroup]=\"formVerification\"\r\n        (ngSubmit)=\"verificationSubmit()\"\r\n        #form=\"ngForm\"\r\n      >\r\n        <div>\r\n          <label for=\"verificationCode\" class=\"labelInput\"\r\n            >Type your 6 digit security code </label\r\n          ><br />\r\n          <div class=\"verificationInpts\">\r\n            <input\r\n              type=\"text\"\r\n              maxlength=\"1\"\r\n              min=\"0\"\r\n              max=\"9\"\r\n              oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n              class=\"inputVerificationStyle\"\r\n              id=\"verificationCode\"\r\n              [(ngModel)]=\"str1\"\r\n              formControlName=\"verificationCode1\"\r\n              [ngClass]=\"{\r\n                'is-invalid1':\r\n                  (formVerification.controls.verificationCode1.touched ||\r\n                    formVerification.controls.verificationCode1.dirty) &&\r\n                  formVerification.controls.verificationCode1.errors\r\n              }\"\r\n              [ngClass]=\"{\r\n                'is-valid':\r\n                  formVerification.controls.verificationCode1.touched &&\r\n                  formVerification.controls.verificationCode1.errors == null &&\r\n                  formVerification.controls.verificationCode1.dirty\r\n              }\"\r\n              (input)=\"changeErrorBoolean()\"\r\n              [ngClass]=\"{ 'is-invalid1': errorExist, '': !errorExist }\"\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              maxlength=\"1\"\r\n              min=\"0\"\r\n              max=\"9\"\r\n              oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n              class=\"inputVerificationStyle\"\r\n              id=\"verificationNum\"\r\n              [(ngModel)]=\"str2\"\r\n              formControlName=\"verificationCode2\"\r\n              [ngClass]=\"{\r\n                'is-invalid1':\r\n                  (formVerification.controls.verificationCode2.touched ||\r\n                    formVerification.controls.verificationCode2.dirty) &&\r\n                  formVerification.controls.verificationCode2.errors\r\n              }\"\r\n              [ngClass]=\"{\r\n                'is-valid':\r\n                  formVerification.controls.verificationCode2.touched &&\r\n                  formVerification.controls.verificationCode2.errors == null &&\r\n                  formVerification.controls.verificationCode2.dirty\r\n              }\"\r\n              [ngClass]=\"{ 'is-invalid1': errorExist }\"\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              maxlength=\"1\"\r\n              min=\"0\"\r\n              max=\"9\"\r\n              oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n              [(ngModel)]=\"str3\"\r\n              class=\"inputVerificationStyle\"\r\n              id=\"verificationNum\"\r\n              formControlName=\"verificationCode3\"\r\n              [ngClass]=\"{\r\n                'is-invalid1':\r\n                  (formVerification.controls.verificationCode3.touched ||\r\n                    formVerification.controls.verificationCode3.dirty) &&\r\n                  formVerification.controls.verificationCode3.errors\r\n              }\"\r\n              [ngClass]=\"{\r\n                'is-valid':\r\n                  formVerification.controls.verificationCode3.touched &&\r\n                  formVerification.controls.verificationCode3.errors == null &&\r\n                  formVerification.controls.verificationCode3.dirty\r\n              }\"\r\n              [ngClass]=\"{ 'is-invalid1': errorExist }\"\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              maxlength=\"1\"\r\n              min=\"0\"\r\n              max=\"9\"\r\n              oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n              class=\"inputVerificationStyle\"\r\n              id=\"verificationNum\"\r\n              [(ngModel)]=\"str4\"\r\n              formControlName=\"verificationCode4\"\r\n              [ngClass]=\"{\r\n                'is-invalid1':\r\n                  (formVerification.controls.verificationCode4.touched ||\r\n                    formVerification.controls.verificationCode4.dirty) &&\r\n                  formVerification.controls.verificationCode4.errors\r\n              }\"\r\n              [ngClass]=\"{\r\n                'is-valid':\r\n                  formVerification.controls.verificationCode4.touched &&\r\n                  formVerification.controls.verificationCode4.errors == null &&\r\n                  formVerification.controls.verificationCode4.dirty\r\n              }\"\r\n              [ngClass]=\"{ 'is-invalid1': errorExist }\"\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              maxlength=\"1\"\r\n              min=\"0\"\r\n              max=\"9\"\r\n              oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n              class=\"inputVerificationStyle\"\r\n              id=\"verificationNum\"\r\n              [(ngModel)]=\"str5\"\r\n              formControlName=\"verificationCode5\"\r\n              [ngClass]=\"{\r\n                'is-invalid1':\r\n                  (formVerification.controls.verificationCode5.touched ||\r\n                    formVerification.controls.verificationCode5.dirty) &&\r\n                  formVerification.controls.verificationCode5.errors\r\n              }\"\r\n              [ngClass]=\"{\r\n                'is-valid':\r\n                  formVerification.controls.verificationCode5.touched &&\r\n                  formVerification.controls.verificationCode5.errors == null &&\r\n                  formVerification.controls.verificationCode5.dirty\r\n              }\"\r\n              [ngClass]=\"{ 'is-invalid1': errorExist }\"\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              maxlength=\"1\"\r\n              class=\"inputVerificationStyle\"\r\n              id=\"verificationNum\"\r\n              [(ngModel)]=\"str6\"\r\n              formControlName=\"verificationCode6\"\r\n              [ngClass]=\"{\r\n                'is-invalid1':\r\n                  (formVerification.controls.verificationCode6.touched ||\r\n                    formVerification.controls.verificationCode6.dirty) &&\r\n                  formVerification.controls.verificationCode6.errors\r\n              }\"\r\n              [ngClass]=\"{\r\n                'is-valid':\r\n                  formVerification.controls.verificationCode6.touched &&\r\n                  formVerification.controls.verificationCode6.errors == null &&\r\n                  formVerification.controls.verificationCode6.dirty\r\n              }\"\r\n              [ngClass]=\"{\r\n                'is-invalid1': errorExist,\r\n                '': !errorExist\r\n              }\"\r\n            />\r\n          </div>\r\n          @if (errorExist) {\r\n          <p class=\"required1\">Invalid Code</p>\r\n          }\r\n        </div>\r\n        <button type=\"submit\" [disabled]=\"formVerification.invalid\">\r\n          Submit Code\r\n        </button>\r\n        <p class=\"info2\">\r\n          Didn't get the code ? <a (click)=\"resendOTP()\">Resend</a> or\r\n          <a>call us</a>\r\n        </p>\r\n        <!-- <input type=\"submit\"> -->\r\n      </form>\r\n    </div>\r\n    <div class=\"paragraphs\">\r\n      <p class=\"info\">\r\n        By signing up you agree to our\r\n        <a style=\"font-weight: 400\" href=\"\">Terms</a> and\r\n        <a href=\"\" style=\"font-weight: 400\">privacy policy</a>\r\n      </p>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"SlidesContainer\">\r\n    <!-- Slideshow container -->\r\n    <div class=\"slideshow-container\">\r\n      <!-- Full-width images with number and caption text -->\r\n      <div id=\"mySlide\" class=\"mySlides\">\r\n        <div class=\"cardDiv\">\r\n          <!-- <img src=\"../../../assets/images/Right side (4).svg\" alt=\"Slides\" class=\"img1\" /> -->\r\n        </div>\r\n        <!-- <div class=\"text\">\r\n          <p>Manage Any Content Anywhere</p>\r\n          <p>\r\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Omnis\r\n            repellat modi dicta suscipit vero\r\n          </p>\r\n        </div> -->\r\n      </div>\r\n      <!-- Next and previous buttons -->\r\n      <!-- <div style=\"display: flex; justify-content: space-between; position: relative; top: -50%;\">\r\n        <a class=\"prev\" (click)=\"prevSlides()\">&#10094;</a>\r\n        <a class=\"next\" (click)=\"nextSlides()\">&#10095;</a>\r\n      </div> -->\r\n    </div>\r\n    <!-- The dots/circles -->\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SortComponent",
            "id": "component-SortComponent-0bb1f04dd5bf4bc9b5b745b86ce52482fd60c89d8a93d297e1fff6fe2e5c2c15fa6b2a01523be3a327a6392d086d157543dd3d315b4457c324d27dfb250703f6",
            "file": "src/app/shared/sort/sort/sort.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sort",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sort.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onSort",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "openSort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSortMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\r\nimport { ToggleDeleteModalService } from '../../../services/toggleModal/toggle-delete-modal.service';\r\n\r\n@Component({\r\n  selector: 'app-sort',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './sort.component.html',\r\n  styleUrl: './sort.component.css'\r\n})\r\nexport class SortComponent {\r\n\r\n  openSort!: Boolean;\r\n  @Output() onSort = new EventEmitter<void>();\r\n\r\n  constructor(private _ToggleSortService: ToggleDeleteModalService) { }\r\n\r\n  ngOnInit(): void {\r\n    this._ToggleSortService.getSortValue().subscribe({\r\n      next: (toggler) => { this.openSort = toggler }\r\n    })\r\n  }\r\n\r\n\r\n  toggleSortMenu() {\r\n    this._ToggleSortService.toggleSort()\r\n    this.openSort = !this.openSort\r\n  }\r\n}\r\n",
            "styleUrl": "./sort.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_ToggleSortService",
                        "type": "ToggleDeleteModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "_ToggleSortService",
                        "type": "ToggleDeleteModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container\" (click)=\"toggleSortMenu()\">\r\n  <div class=\"row\">\r\n    <div class=\"col-12\">\r\n      <div class=\"sort-container\">\r\n        <div>\r\n          <div class=\"sort-btn\">\r\n            <img src=\"assets/images/arrow-swap-inactive.svg\" alt=\"sort\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      @if(openSort){\r\n      <div class=\"sortMenu\">\r\n        <div class=\"sortSearch\">\r\n          <input\r\n            class=\"form-control\"\r\n            type=\"text\"\r\n            name=\"search\"\r\n            id=\"search\"\r\n            placeholder=\"Search columns\"\r\n          />\r\n          <img src=\"assets/images/search-normal.svg\" alt=\"Search\" />\r\n        </div>\r\n      </div>\r\n      }\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-e4ed6e0a2d0f203b3de18ce4584c1287d5f40080c6a06e5027d71bba55e0f0afed36632d40695ecc22ec766e7bd82643c8f1a68b05b92b7f9c7555704fceeb3a",
            "file": "src/app/shared/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bodydata",
                    "defaultValue": "[\r\n    {id:'#U-101',info:{path:'../../../assets/images/table-demo-image.jpg',name:'Will Smith'},status:'Active',role:'Super admin',email:'mahmoudsmohammed24@gmail.com',date:'11:43 am-18jun,2024'},\r\n  {id:'#U-101',info:{path:'../../../assets/images/table-demo-image.jpg',name:'Will Smith'},status:'Deactive',role:'Super admin',email:'mahmoudsmohammed24@gmail.com',date:'11:43 am-18jun,2024'},\r\n  {id:'#U-101',info:{path:'../../../assets/images/table-demo-image.jpg',name:'Will Smith'},status:'Pending',role:'Super admin',email:'mahmoudsmohammed24@gmail.com',date:'11:43 am-18jun,2024'},{id:'#U-101',info:{path:'../../../assets/images/table-demo-image.jpg',name:'Will Smith'},status:'Active',role:'Super admin',email:'mahmoudsmohammed24@gmail.com',date:'11:43 am-18jun,2024'},\r\n  {id:'#U-101',info:{path:'../../../assets/images/table-demo-image.jpg',name:'Will Smith'},status:'Deactive',role:'Super admin',email:'mahmoudsmohammed24@gmail.com',date:'11:43 am-18jun,2024'},\r\n  {id:'#U-101',info:{path:'../../../assets/images/table-demo-image.jpg',name:'Will Smith'},status:'Pending',role:'Super admin',email:'mahmoudsmohammed24@gmail.com',date:'11:43 am-18jun,2024'}]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "headdata",
                    "defaultValue": "['User ID',\"USer info\",\"Status\",\"Role name\",\"Email\",\"Joind at\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "getCount",
                    "args": [
                        {
                            "name": "e",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PaginatorComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { PaginatorComponent } from '../paginator/paginator.component';\r\n\r\n@Component({\r\n  selector: 'app-table',\r\n  standalone: true,\r\n  imports: [PaginatorComponent],\r\n  templateUrl: './table.component.html',\r\n  styleUrl: './table.component.css'\r\n})\r\nexport class TableComponent {\r\n  headdata:string[] = ['User ID',\"USer info\",\"Status\",\"Role name\",\"Email\",\"Joind at\"];\r\n  bodydata:any = [\r\n    {id:'#U-101',info:{path:'../../../assets/images/table-demo-image.jpg',name:'Will Smith'},status:'Active',role:'Super admin',email:'mahmoudsmohammed24@gmail.com',date:'11:43 am-18jun,2024'},\r\n  {id:'#U-101',info:{path:'../../../assets/images/table-demo-image.jpg',name:'Will Smith'},status:'Deactive',role:'Super admin',email:'mahmoudsmohammed24@gmail.com',date:'11:43 am-18jun,2024'},\r\n  {id:'#U-101',info:{path:'../../../assets/images/table-demo-image.jpg',name:'Will Smith'},status:'Pending',role:'Super admin',email:'mahmoudsmohammed24@gmail.com',date:'11:43 am-18jun,2024'},{id:'#U-101',info:{path:'../../../assets/images/table-demo-image.jpg',name:'Will Smith'},status:'Active',role:'Super admin',email:'mahmoudsmohammed24@gmail.com',date:'11:43 am-18jun,2024'},\r\n  {id:'#U-101',info:{path:'../../../assets/images/table-demo-image.jpg',name:'Will Smith'},status:'Deactive',role:'Super admin',email:'mahmoudsmohammed24@gmail.com',date:'11:43 am-18jun,2024'},\r\n  {id:'#U-101',info:{path:'../../../assets/images/table-demo-image.jpg',name:'Will Smith'},status:'Pending',role:'Super admin',email:'mahmoudsmohammed24@gmail.com',date:'11:43 am-18jun,2024'}];\r\n  \r\n  constructor(){\r\n    \r\n  }\r\n\r\n  getCount(e:number){\r\n    console.log(e);\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./table.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <table>\r\n    <thead>\r\n      <tr>\r\n        <th><input type=\"checkbox\" /></th>\r\n        @for (data of headdata; track $index) {\r\n        <th>{{ data }}</th>\r\n        }\r\n        <th>\r\n          <span><img src=\"../../../assets/images/table-setting.png\" alt=\"\"></span>\r\n        </th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      @for (data of bodydata; track data) {\r\n      <tr>\r\n        <td style=\"width: 30px\"><input type=\"checkbox\" /></td>\r\n        <td>{{ data.id }}</td>\r\n        <td><img [src]=\"data.info.path\" alt=\"\">{{ data.info.name }}</td>\r\n        <td ><span class=\"status\"><span class=\"{{data.status.toLowerCase()}}\"></span>{{ data.status }}</span></td>\r\n        <td>{{ data.role }}</td>\r\n        <td>{{ data.email }}</td>\r\n        <td>{{ data.date }}</td>\r\n        <td>\r\n          <span><img src=\"../../../assets/images/table-communication.png\" alt=\"\"></span>\r\n          <div class=\"dots\">\r\n            <div class=\"dot\"></div>\r\n            <div class=\"dot\"></div>\r\n            <div class=\"dot\"></div>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n      }\r\n    </tbody>\r\n    <tfoot></tfoot>\r\n  </table>\r\n</div>\r\n<app-paginator (rowsCount)=\"getCount($event)\"/>\r\n"
        },
        {
            "name": "UserManagementComponent",
            "id": "component-UserManagementComponent-6dd9fde667b71e3881bd74d160d354cd6971e40edee8400dfbdf4a5da6d4611eb3365e43c5d4fcb7eb85c927db2e5dd0837d373b162f1beae36ff5cb4277c5a9",
            "file": "src/app/components/core/management/user-role-combine/user-management.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-management",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-management.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "SidebarComponent",
                    "type": "component"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Router, RouterLink, RouterModule, Routes } from '@angular/router';\r\n\r\nimport { SidebarComponent } from '../../../../shared/sidebar/sidebar.component';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-user-management',\r\n  standalone: true,\r\n  imports: [SidebarComponent, RouterOutlet, RouterLink, RouterModule],\r\n  templateUrl: './user-management.component.html',\r\n  styleUrl: './user-management.component.css'\r\n})\r\nexport class UserManagementComponent {\r\n\r\n  constructor() { }\r\n\r\n}\r\n",
            "styleUrl": "./user-management.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "extends": [],
            "templateData": "<!DOCTYPE html>\r\n<router-outlet></router-outlet>"
        },
        {
            "name": "UserProfileComponent",
            "id": "component-UserProfileComponent-2d153c85679c8087d503ca876f2d298a7d277d6300cea706642b751152053df51b5cfc6c53a6072abe5f60e90d6cbd3d09c79477f89407285296a5324d5ce1b1",
            "file": "src/app/components/core/user-profile/user-profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-profile",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-profile.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "defaultValue": "'edit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "deleteAccountModal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isavailable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "searchText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "display",
                    "args": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "CardModalComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterLink, RouterModule, RouterOutlet } from '@angular/router';\r\nimport { CardModalComponent } from '../../../shared/pop-up-card/card-modal/card-modal.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ToggleDeleteModalService } from '../../../services/toggleModal/toggle-delete-modal.service';\r\n\r\n@Component({\r\n  selector: 'app-user-profile',\r\n  standalone: true,\r\n  imports: [RouterOutlet, RouterModule, RouterLink, FormsModule, CardModalComponent, CommonModule],\r\n  templateUrl: './user-profile.component.html',\r\n  styleUrl: './user-profile.component.css'\r\n})\r\nexport class UserProfileComponent {\r\n\r\n  searchText: string = '';\r\n  activeTab: string = 'edit';\r\n  isavailable: boolean = true;\r\n\r\n  deleteAccountModal!: Boolean;\r\n\r\n  constructor(private _ToggleDeleteModalService: ToggleDeleteModalService) {\r\n    this.deleteAccountModal = false;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._ToggleDeleteModalService.getToggleValue().subscribe({\r\n      next: (toggler) => {\r\n        this.deleteAccountModal = toggler;\r\n      }\r\n    })\r\n  }\r\n\r\n  display(tab: string) {\r\n    this.activeTab = tab;\r\n  }\r\n  close() {\r\n    this.isavailable = false;\r\n  }\r\n\r\n  openModal() {\r\n    this._ToggleDeleteModalService.toggle()\r\n  }\r\n\r\n  deleteAccount() {\r\n    console.log(\"Account Deleted\");\r\n  }\r\n  closeModal() {\r\n    this._ToggleDeleteModalService.toggle();\r\n  }\r\n}\r\n",
            "styleUrl": "./user-profile.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_ToggleDeleteModalService",
                        "type": "ToggleDeleteModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "_ToggleDeleteModalService",
                        "type": "ToggleDeleteModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\r\n  class=\"\"\r\n  [ngClass]=\"{ lowOpacity: deleteAccountModal, container: !deleteAccountModal }\"\r\n>\r\n  @if( isavailable){\r\n\r\n  <div class=\"user-profile-container\">\r\n    <div class=\"user-header\">\r\n      <div class=\"header-icons\">\r\n        <div class=\"refresh\">\r\n          <img src=\"assets/images/refresh-2.svg\" alt=\"\" />\r\n\r\n          <p>Last update : Today,15:05pm</p>\r\n        </div>\r\n\r\n        <img src=\"assets/images/cross-square.svg\" alt=\"\" (click)=\"close()\" />\r\n      </div>\r\n\r\n      <div class=\"user-info\">\r\n        <img\r\n          src=\"assets/images/Screenshot 2024-02-14 092120.png\"\r\n          alt=\"user-img\"\r\n        />\r\n        <div class=\"edit\"><img src=\"assets/images/edit.svg\" alt=\"\" /></div>\r\n        <h3>Haitham Mohamed</h3>\r\n        <p>Supper Admin</p>\r\n      </div>\r\n\r\n      <div class=\"user-actions\">\r\n        <div\r\n          class=\"a-box\"\r\n          (click)=\"display('edit')\"\r\n          [class.active]=\"activeTab == 'edit'\"\r\n        >\r\n          <a> Information</a>\r\n        </div>\r\n\r\n        <div class=\"hr\"></div>\r\n        <div class=\"a-box\">\r\n          <a\r\n            (click)=\"display('change-password')\"\r\n            [class.active]=\"activeTab == 'change-password'\"\r\n            >Password</a\r\n          >\r\n        </div>\r\n\r\n        <div class=\"hr\"></div>\r\n        <div\r\n          class=\"a-box\"\r\n          (click)=\"display('activity')\"\r\n          [class.active]=\"activeTab == 'activity'\"\r\n        >\r\n          <a>Activity log</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    @if(activeTab=='edit'){\r\n    <div class=\"user-form\">\r\n      <div class=\"user-form-header\">\r\n        <div class=\"inner-text\">\r\n          <h3>Edit account information</h3>\r\n          <p>Lorem ipsum is placeholder text commonly</p>\r\n        </div>\r\n        <button>Edit</button>\r\n      </div>\r\n      <div class=\"hr2\"></div>\r\n\r\n      <form>\r\n        <div class=\"inputs-container\">\r\n          <div class=\"input\">\r\n            <label for=\"name\">Name</label>\r\n            <input type=\"text\" id=\"name\" value=\"Haitham Mohamed\" disabled />\r\n          </div>\r\n          <div class=\"input\">\r\n            <label for=\"role\">Role& permissions</label>\r\n            <input type=\"text\" id=\"role\" value=\"Super Admin\" disabled />\r\n          </div>\r\n        </div>\r\n        <div class=\"inputs-container\">\r\n          <div class=\"input\">\r\n            <label for=\"email\">Email</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"email\"\r\n              value=\"HaithamMohamed@saptiumsoftware.com\"\r\n              disabled\r\n            />\r\n          </div>\r\n          <div class=\"select\">\r\n            <label for=\"number\">Phone</label>\r\n            <div class=\"phone\">\r\n              <select name=\"\" id=\"\">\r\n                <!-- <option value=\"\"><img src=\"Group.svg\" alt=\"\"></option> -->\r\n              </select>\r\n              <input type=\"text\" value=\"+1258525645-555\" disabled />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n\r\n      <div class=\"hr3\"></div>\r\n      <div class=\"user-form-footer\">\r\n        <div class=\"inner-text\">\r\n          <h3>Delete Account</h3>\r\n          <p>Lorem ipsum is placeholder text commonly</p>\r\n        </div>\r\n        <button (click)=\"openModal()\">Delete Account</button>\r\n      </div>\r\n    </div>\r\n    } @if(activeTab=='change-password'){\r\n\r\n    <div class=\"user-form\">\r\n      <div class=\"user-form-header\">\r\n        <div class=\"inner-text\">\r\n          <h3>Change Password</h3>\r\n          <p>Lorem ipsum is placeholder text commonly</p>\r\n        </div>\r\n        <button>Edit</button>\r\n      </div>\r\n      <div class=\"hr2\"></div>\r\n\r\n      <div class=\"form-container\">\r\n        <form action=\"\">\r\n          <div class=\"input\">\r\n            <label for=\"password\">Current Password</label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"password\"\r\n              placeholder=\"Enter the Current Password\"\r\n              disabled\r\n            />\r\n          </div>\r\n\r\n          <div class=\"input\">\r\n            <label for=\"password\">Password</label>\r\n            <input type=\"password\" id=\"password\" value=\"12345678910\" disabled />\r\n          </div>\r\n\r\n          <div class=\"input\">\r\n            <label for=\"confirm-password\">Confirm Password</label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"confirm-password\"\r\n              value=\"12345678910\"\r\n              disabled\r\n            />\r\n          </div>\r\n        </form>\r\n        <img src=\"assets/images/Group 1000016543.svg\" alt=\"\" />\r\n      </div>\r\n    </div>\r\n    } @if(activeTab=='activity'){\r\n    <div class=\"user-form\">\r\n      <div class=\"user-form-header\">\r\n        <div class=\"inner-text\">\r\n          <h3>Activity Log</h3>\r\n          <p>Lorem ipsum is placeholder text commonly</p>\r\n        </div>\r\n        <div class=\"search\">\r\n          <img src=\"assets/images/magnifier.svg\" alt=\"search\" />\r\n          <input type=\"text\" placeholder=\"search...\" />\r\n        </div>\r\n      </div>\r\n      <div class=\"hr2\"></div>\r\n      <div class=\"activity\">\r\n        <ul>\r\n          <li>\r\n            <div class=\"txt-left\">\r\n              <div class=\"img-container\">\r\n                <img src=\"assets/images/message-text.svg\" alt=\"\" />\r\n              </div>\r\n              There are 2 new comment for you in “AirPlus Mobile App” .\r\n            </div>\r\n            <div class=\"time\">\r\n              <img src=\"assets/images/time.svg\" alt=\"time-icon\" />4:23 PM\r\n            </div>\r\n          </li>\r\n\r\n          <li>\r\n            <div class=\"txt-left\">\r\n              <div class=\"img-container\">\r\n                <img src=\"assets/images/pin.svg\" alt=\"\" />\r\n              </div>\r\n              New Blog post is assigned to you.\r\n            </div>\r\n            <div class=\"time\">\r\n              <img src=\"assets/images/time.svg\" alt=\"time-icon\" />4:23 PM\r\n            </div>\r\n          </li>\r\n          <li>\r\n            <div class=\"txt-left\">\r\n              <div class=\"img-container\">\r\n                <img src=\"assets/images/files-folders.svg\" alt=\"\" />\r\n              </div>\r\n              12 new Files uploaded now.\r\n            </div>\r\n            <div class=\"time\">\r\n              <img src=\"assets/images/time.svg\" alt=\"time-icon\" />4:23 PM\r\n            </div>\r\n          </li>\r\n          <li>\r\n            <div class=\"txt-left\">\r\n              <div class=\"img-container\">\r\n                <img src=\"assets/images/message-text.svg\" alt=\"\" />\r\n              </div>\r\n              There are 2 new comment for you in “AirPlus Mobile App” .\r\n            </div>\r\n            <div class=\"time\">\r\n              <img src=\"assets/images/time.svg\" alt=\"time-icon\" />4:23 PM\r\n            </div>\r\n          </li>\r\n          <li>\r\n            <div class=\"txt-left\">\r\n              <div class=\"img-container\">\r\n                <img src=\"assets/images/files-folders.svg\" alt=\"\" />\r\n              </div>\r\n              12 new Files uploaded now .\r\n            </div>\r\n            <div class=\"time\">\r\n              <img src=\"assets/images/time.svg\" alt=\"time-icon\" />4:23 PM\r\n            </div>\r\n          </li>\r\n          <li>\r\n            <div class=\"txt-left\">\r\n              <div class=\"img-container\">\r\n                <img src=\"assets/images/message-text.svg\" alt=\"\" />\r\n              </div>\r\n              New Blog post is assigned to you .\r\n            </div>\r\n            <div class=\"time\">\r\n              <img src=\"assets/images/time.svg\" alt=\"time-icon\" />4:23 PM\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    }\r\n  </div>\r\n  }\r\n</div>\r\n\r\n<div\r\n  class=\"card-modal\"\r\n  [ngClass]=\"{ hide: !deleteAccountModal, show: deleteAccountModal }\"\r\n>\r\n  <app-card-modal\r\n    [title]=\"'Are you sure to delete the account?'\"\r\n    [description]=\"\r\n      'Lorem ipsum is placeholder text commonly ipsum is placeholde commonly'\r\n    \"\r\n    [backgroundImg]=\"'http://localhost:4200/assets/images/ellipse.svg'\"\r\n    [icon_path]=\"'assets/images/delete_icon.svg'\"\r\n    [cancel]=\"'Cancel'\"\r\n    [action]=\"'Delete Account'\"\r\n    [actionBackground]=\"'rgba(241, 65, 108, 1);'\"\r\n    (actionBtn)=\"deleteAccount()\"\r\n    (cancelBtn)=\"closeModal()\"\r\n  ></app-card-modal>\r\n</div>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "addNewUserCardModal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/CardModal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        title: 'Card',\r\n        description: 'Card desc',\r\n        icon_path: 'http://localhost:6006/assets/user-management-count.svg',\r\n        cancel: 'Cancel',\r\n        action: 'Delete Account'\r\n    },\r\n}"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideRouter(routes, withPreloading(PreloadAllModules), withViewTransitions()), // preloding the lazy loading components\r\n    provideHttpClient(withFetch()),\r\n    provideClientHydration(),\r\n    provideAnimationsAsync(),\r\n  ],\r\n}"
            },
            {
                "name": "authGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/guards/auth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(\r\n  route: ActivatedRouteSnapshot,\r\n  state: RouterStateSnapshot\r\n) => {\r\n  return inject(AuthService).isLoggedIn\r\n    ? true\r\n    : inject(Router).createUrlTree(['']);\r\n}"
            },
            {
                "name": "bootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => bootstrapApplication(AppComponent, config)"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
            },
            {
                "name": "deleteAccountCardModal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/CardModal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        title: 'Card',\r\n        description: 'Card desc',\r\n        icon_path: 'http://localhost:6006/assets/user-management-count.svg',\r\n        cancel: 'Cancel',\r\n        action: 'Delete Account'\r\n    },\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    BASEURL: 'https://192.168.1.74:7109/',\r\n    production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    BASEURL: 'https://192.168.1.74:7109/',\r\n    production: false\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    user: {\r\n      name: 'Jane Doe',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\r\n    await expect(loginButton).toBeInTheDocument();\r\n    await userEvent.click(loginButton);\r\n    await expect(loginButton).not.toBeInTheDocument();\r\n\r\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\r\n    await expect(logoutButton).toBeInTheDocument();\r\n  },\r\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "MANAGEMENT_ROUTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/core/management/management.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route[]",
                "defaultValue": "[\r\n\r\n    { path: '', redirectTo: 'users', pathMatch: 'full' },\r\n    {\r\n        path: 'users',\r\n        loadComponent: () => import('./manage-users/manage-users.component').then(c => c.ManageUsersComponent)\r\n    },\r\n    {\r\n        path: 'roles',\r\n        loadComponent: () => import('./manage-roles/manageroles.component').then(c => c.ManageRolesComponent)\r\n\r\n    },\r\n]"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CardComponent>",
                "defaultValue": "{\r\n    title: 'Components/Card',\r\n    component: CardComponent,\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/CardModal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CardModalComponent>",
                "defaultValue": "{\r\n    title: 'Components/Card',\r\n    component: CardModalComponent,\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HeaderComponent>",
                "defaultValue": "{\r\n  title: 'Example/Header',\r\n  component: HeaderComponent,\r\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PageComponent>",
                "defaultValue": "{\r\n  title: 'Example/Page',\r\n  component: PageComponent,\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
            },
            {
                "name": "serverConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideServerRendering()\r\n  ]\r\n}"
            },
            {
                "name": "userManagementCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        title: 'Card',\r\n        description: 'Card desc',\r\n        description_continue: 'Card desc',\r\n        icon_path: 'http://localhost:6006/assets/user-management-count.svg',\r\n        total_number: '2500'\r\n    },\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CardComponent>",
                "file": "src/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CardModalComponent>",
                "file": "src/stories/CardModal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HeaderComponent>",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PageComponent>",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/stories/CardModal.stories.ts": [
                {
                    "name": "addNewUserCardModal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/CardModal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        title: 'Card',\r\n        description: 'Card desc',\r\n        icon_path: 'http://localhost:6006/assets/user-management-count.svg',\r\n        cancel: 'Cancel',\r\n        action: 'Delete Account'\r\n    },\r\n}"
                },
                {
                    "name": "deleteAccountCardModal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/CardModal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        title: 'Card',\r\n        description: 'Card desc',\r\n        icon_path: 'http://localhost:6006/assets/user-management-count.svg',\r\n        cancel: 'Cancel',\r\n        action: 'Delete Account'\r\n    },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/CardModal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CardModalComponent>",
                    "defaultValue": "{\r\n    title: 'Components/Card',\r\n    component: CardModalComponent,\r\n}"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideRouter(routes, withPreloading(PreloadAllModules), withViewTransitions()), // preloding the lazy loading components\r\n    provideHttpClient(withFetch()),\r\n    provideClientHydration(),\r\n    provideAnimationsAsync(),\r\n  ],\r\n}"
                }
            ],
            "src/app/guards/auth.guard.ts": [
                {
                    "name": "authGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/guards/auth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(\r\n  route: ActivatedRouteSnapshot,\r\n  state: RouterStateSnapshot\r\n) => {\r\n  return inject(AuthService).isLoggedIn\r\n    ? true\r\n    : inject(Router).createUrlTree(['']);\r\n}"
                }
            ],
            "src/main.server.ts": [
                {
                    "name": "bootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => bootstrapApplication(AppComponent, config)"
                }
            ],
            "src/app/app.config.server.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
                },
                {
                    "name": "serverConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideServerRendering()\r\n  ]\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    BASEURL: 'https://192.168.1.74:7109/',\r\n    production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    BASEURL: 'https://192.168.1.74:7109/',\r\n    production: false\r\n}"
                }
            ],
            "src/stories/header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    user: {\r\n      name: 'Jane Doe',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HeaderComponent>",
                    "defaultValue": "{\r\n  title: 'Example/Header',\r\n  component: HeaderComponent,\r\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
                }
            ],
            "src/stories/page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\r\n    await expect(loginButton).toBeInTheDocument();\r\n    await userEvent.click(loginButton);\r\n    await expect(loginButton).not.toBeInTheDocument();\r\n\r\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\r\n    await expect(logoutButton).toBeInTheDocument();\r\n  },\r\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PageComponent>",
                    "defaultValue": "{\r\n  title: 'Example/Page',\r\n  component: PageComponent,\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
                }
            ],
            "src/app/components/core/management/management.routes.ts": [
                {
                    "name": "MANAGEMENT_ROUTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/core/management/management.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route[]",
                    "defaultValue": "[\r\n\r\n    { path: '', redirectTo: 'users', pathMatch: 'full' },\r\n    {\r\n        path: 'users',\r\n        loadComponent: () => import('./manage-users/manage-users.component').then(c => c.ManageUsersComponent)\r\n    },\r\n    {\r\n        path: 'roles',\r\n        loadComponent: () => import('./manage-roles/manageroles.component').then(c => c.ManageRolesComponent)\r\n\r\n    },\r\n]"
                }
            ],
            "src/stories/card.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CardComponent>",
                    "defaultValue": "{\r\n    title: 'Components/Card',\r\n    component: CardComponent,\r\n}"
                },
                {
                    "name": "userManagementCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        title: 'Card',\r\n        description: 'Card desc',\r\n        description_continue: 'Card desc',\r\n        icon_path: 'http://localhost:6006/assets/user-management-count.svg',\r\n        total_number: '2500'\r\n    },\r\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/stories/card.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CardComponent>",
                    "file": "src/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/CardModal.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CardModalComponent>",
                    "file": "src/stories/CardModal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HeaderComponent>",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PageComponent>",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Authentication/correctchages/correctchages.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CorrectchagesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Authentication/email-verification/email-verification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmailVerificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Authentication/password.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PasswordDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Authentication/sendmail/sendmail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SendmailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Authentication/setnewpassword/setnewpassword.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SetnewpasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Authentication/signin/signin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SigninComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Authentication/signup/signup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/38",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Authentication/signupverification/signupverification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignupverificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/core/add-user/add-user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddUserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/core/blog/blog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BlogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/core/cms-main/cms-main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CmsMainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/core/management/manage-roles/manageroles.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ManageRolesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/core/management/manage-users/manage-users.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ManageUsersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/core/management/management.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MANAGEMENT_ROUTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/core/management/user-role-combine/user-management.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserManagementComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/core/user-profile/user-profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notfound/notfound.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotfoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/guards/auth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/iforget-pass-request.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IForgetPassRequest",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/isign-in-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISignInResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/isign-up-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISignUpResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/iuser.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IUser",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/logininterface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILogin",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/signupinterface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ISignupRequest",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/services/breadcrumb/breadcrumb.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BreadcrumbService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/reset-password.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ResetPasswordService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/toggleBtn/toggle.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToggleService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/toggleModal/toggle-delete-modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToggleDeleteModalService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/services/user-managements/user-managements.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserManagementsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/add-new-user/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NewUserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/toggle-filter.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ToggleFilterDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/filter/filter/filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/paginator/paginator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pop-up-card/card-modal/card-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/popup/popup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/sort/sort/sort.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SortComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/token.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "TokenInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/CardModal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addNewUserCardModal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/CardModal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteAccountCardModal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/CardModal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userManagementCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}