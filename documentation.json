{
    "pipes": [],
    "interfaces": [
        {
            "name": "IForgetPassRequest",
            "id": "interface-IForgetPassRequest-21be6f330a57614e6d6b80f9528284cde45a6741f2c17f0e067f504c023be3e42da3609bc16030dc0e8248a2bca58f4e917b1627952806cd9c9a8b5b87a38a09",
            "file": "src/app/interfaces/iforget-pass-request.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IForgetPassRequest {\r\n    password:string;\r\n    confirmNewPassword:string;\r\n}\r\n",
            "properties": [
                {
                    "name": "confirmNewPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ILogin",
            "id": "interface-ILogin-fb3704532450198dc64db48984d0218b0ffac3c546a90a7f4ae5560f6b63bad961ad9f04e3ba998dc9cbd2d191029016c2b27a660221c8a6fab07c7c2747e779",
            "file": "src/app/interfaces/logininterface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ILogin {\r\n    email:string;\r\n    password:string;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ISignInResponse",
            "id": "interface-ISignInResponse-cae07239c6160633cad1b48d191ce63a6f55c964ac3dd04bda95d4bf8b4f47f3a5048cc916e21b6107b006c0f084dd44672bb5609e1291ca9ee8854449a4f28e",
            "file": "src/app/interfaces/isign-in-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ISignInResponse {\r\n    message:string;\r\n}\r\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ISignUpResponse",
            "id": "interface-ISignUpResponse-59031b4270ec924523c7043ddf891f27406d6955f84d4c98d4097f28f5e670e07c7302a9ba6c23ced55c8bd33d628bd7ed92992315b4a3902a39b2a2d963007f",
            "file": "src/app/interfaces/isign-up-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ISignUpResponse {\r\n    message:string;\r\n    email:string;\r\n    token:string;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-23c11020a2831beb3fa02ee911a75b64009c31bb46f73a01145c2560cb13b7f7e641105b678bd8fb01a5a199117001f3da4a78351d29d85d213ed7b82982091f",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-2e18d0d23fa4a5c3945a6f7cbc372b9529ece0271903e8c5fcbcf900218ffad474ad75f18591c704cc3b70dc8434e7f7f35add34e6592402224917a7d781823d",
            "file": "src/app/services/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "forgetPassword",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "Login",
                    "args": [
                        {
                            "name": "request",
                            "type": "ILogin",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "ILogin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resendOTP",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetVerificationCode",
                    "args": [
                        {
                            "name": "res",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveUserSession",
                    "args": [
                        {
                            "name": "applicationUser",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "applicationUser",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendMail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTokenInSessionStorage",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "registerData",
                            "type": "ISignupRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ISignUpResponse>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "registerData",
                            "type": "ISignupRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verificationCode",
                    "args": [
                        {
                            "name": "otp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "otp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { ISignupRequest } from '../interfaces/signupinterface';\r\nimport { ILogin } from '../interfaces/logininterface';\r\nimport { ISignUpResponse } from '../interfaces/isign-up-response';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  signUp(registerData: ISignupRequest): Observable<ISignUpResponse> {\r\n    console.log(registerData);\r\n    return this.http.post<ISignUpResponse>(\r\n      environment.BASEURL + 'api/Authentication/Register',\r\n      registerData\r\n    );\r\n  }\r\n\r\n  verificationCode(otp: string):Observable<any> {\r\n    var obj = {\r\n      email: sessionStorage.getItem('email')?.toString(),\r\n      otp: otp.toString(),\r\n      token: sessionStorage.getItem('token')?.toString(),\r\n    };\r\n     console.log(obj);\r\n    return this.http.post(\r\n      `${environment.BASEURL}api/Authentication/ConfirmEmail`,\r\n      obj\r\n    );\r\n  }\r\n\r\n  resendOTP() {\r\n    var obj = {\r\n      email: sessionStorage.getItem('email')?.toString(),\r\n    };\r\n    console.log(obj);\r\n    return this.http.post(\r\n      environment.BASEURL + `api/Authentication/ResendOTP?email=${obj.email}`,\r\n      {}\r\n    );\r\n  }\r\n\r\n  setToken(token: string) {\r\n    localStorage.setItem('token', token);\r\n  }\r\n\r\n  setTokenInSessionStorage(token: string) {\r\n    sessionStorage.setItem('token', token);\r\n  }\r\n\r\n  get isLoggedIn(): boolean {\r\n    // return true;\r\n    const userData = localStorage.getItem(localStorage['token'].userSession);\r\n    if (userData) {\r\n      const jsonUserData = JSON.parse(userData);\r\n      const token = jsonUserData[localStorage['token']];\r\n      const tokenExpireDate =\r\n        jsonUserData[localStorage['token'].tokenExpireDate];\r\n      return token && new Date(tokenExpireDate) >= new Date();\r\n    }\r\n    return false;\r\n  }\r\n\r\n  saveUserSession(applicationUser: any) {\r\n    localStorage.setItem(\r\n      localStorage['userSession'],\r\n      JSON.stringify(applicationUser)\r\n    );\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem(localStorage['userSession']);\r\n  }\r\n\r\n  get Name() {\r\n    if (this.isLoggedIn) {\r\n      let userData = localStorage.getItem(localStorage['userSession']);\r\n      if (userData) return JSON.parse(userData)[localStorage['fullName']];\r\n      return null;\r\n    }\r\n  }\r\n\r\n  get Token() {\r\n    if (this.isLoggedIn) {\r\n      let userData = localStorage.getItem(localStorage['userSession']);\r\n      if (userData) return JSON.parse(userData)[localStorage['token']];\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  \r\n  sendMail(email: string): Observable<any> {\r\n    console.log(email);\r\n    return this.http.post(\r\n      environment.BASEURL + `api/Authentication/ForgetPassword?email=${email}`,\r\n      {}\r\n    );\r\n  }\r\n\r\n\r\n  resetVerificationCode(res: string):Observable<any> {\r\n    var obj = {\r\n      email: sessionStorage.getItem('email')?.toString(),\r\n      otp: res.toString(),\r\n      //token: sessionStorage.getItem('token')?.toString(),\r\n    };\r\n     console.log(obj);\r\n    return this.http.post(\r\n      `${environment.BASEURL}api/Authentication/ConfirmForgetPasswordOTP`,\r\n      obj\r\n    );\r\n  }\r\n\r\n\r\n  Login(request: ILogin): Observable<any> {\r\n    console.log(request);\r\n    return this.http.post<any>(\r\n      environment.BASEURL + 'api/Authentication/Login',\r\n      request\r\n    );\r\n  }\r\n\r\n\r\n  \r\n\r\n  // setNewPass(res:IForgetPassRequest){\r\n  //   var obj={\r\n  //     email: sessionStorage.getItem('email')?.toString(),\r\n  //     token: sessionStorage.getItem('token')?.toString(),\r\n  //     message: sessionStorage.getItem('message')?.toString(),\r\n  //     password: res.password.toString(),\r\n  //     confirmNewPassword: res.confirmNewPassword.toString()\r\n  //   }\r\n  //   console.log(obj);\r\n  //   return this.http.post(\r\n  //     environment.BASEURL + `api/Authentication/ConfirmForgetPassword`, obj);\r\n  // }\r\n\r\n  forgetPassword(email: string) {\r\n    console.log(email);\r\n    return this.http.post<any>(\r\n      `${environment.BASEURL}api/Authentication/ForgetPassword?email=${email}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isLoggedIn": {
                    "name": "isLoggedIn",
                    "getSignature": {
                        "name": "isLoggedIn",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 55
                    }
                },
                "Name": {
                    "name": "Name",
                    "getSignature": {
                        "name": "Name",
                        "type": "",
                        "returnType": "",
                        "line": 79
                    }
                },
                "Token": {
                    "name": "Token",
                    "getSignature": {
                        "name": "Token",
                        "type": "",
                        "returnType": "",
                        "line": 87
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ResetPasswordService",
            "id": "injectable-ResetPasswordService-dc365dbd623fcbaee45065401ed75b0d380bfbdeeba13b92b157639a0f7063c70d0fe8977db12abbd71d259afdac4e24b880631498efd651f013ffa372a8c35f",
            "file": "src/app/services/reset-password.service.ts",
            "properties": [
                {
                    "name": "authenticationURL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "baseURL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "res",
                            "type": "IForgetPassRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "IForgetPassRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { IForgetPassRequest } from '../interfaces/iforget-pass-request';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ResetPasswordService {\r\n  authenticationURL!: string;\r\n  baseURL!: string;\r\n\r\n  constructor(private _HttpClient: HttpClient) {\r\n    this.baseURL = environment.BASEURL;\r\n    this.authenticationURL = '/api/Authentication'\r\n  }\r\n\r\n  resetPassword(res:IForgetPassRequest): Observable<any> {\r\n    const obj = {\r\n      email: sessionStorage.getItem('email')?.toString(),\r\n      token: sessionStorage.getItem('token')?.toString(),\r\n      // message: sessionStorage.getItem('message')?.toString(),\r\n      newPassword: res.password.toString(),\r\n      confirmNewPassword: res.confirmNewPassword.toString()\r\n    }\r\n    return this._HttpClient.post<any>(`${this.baseURL}api/Authentication/ConfirmForgetPassword`, obj);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_HttpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_HttpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ToggleService",
            "id": "injectable-ToggleService-0f60c2b813083d099e79eaae4b830feeb5438378b9e278f642f97a9a11ed3d0070ea6d28b308a74bbddca45dab6b8988a607fb11c851a509cc9ee3cb1b0eded7",
            "file": "src/app/services/toggleBtn/toggle.service.ts",
            "properties": [
                {
                    "name": "toggler",
                    "defaultValue": "new BehaviorSubject<Boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getToggleValue",
                    "args": [],
                    "optional": false,
                    "returnType": "BehaviorSubject<Boolean>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToggleService {\r\n  constructor() { }\r\n\r\n  private toggler: BehaviorSubject<Boolean> = new BehaviorSubject<Boolean>(false);\r\n\r\n  toggle() {\r\n\r\n    this.toggler.next(!this.toggler.value);\r\n    console.log(this.toggler.value);\r\n  }\r\n\r\n  getToggleValue(): BehaviorSubject<Boolean> {\r\n    return this.toggler;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [
        {
            "name": "TokenInterceptor",
            "id": "injectable-TokenInterceptor-fcfa7f77ed6206186c7f3c952cfd3ee8438033b3aab0486a7cce9410644f81e3e2c558bc03ece25b55247ef003b91b0585dca3bca83e4964ca17ef39b5bc57bd",
            "file": "src/app/token.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpEvent, HttpHandler, HttpInterceptor, HttpInterceptorFn, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { AuthService } from './services/auth.service';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n  constructor(private authService: AuthService) {}\r\n\r\n  intercept(request: HttpRequest<any>,next: HttpHandler):Observable<HttpEvent<any>>{\r\n    const token = this.authService.Token;\r\n    \r\n    const authReq = request.clone({\r\n    headers: request.headers.set('Authorization', token)\r\n    });\r\n    return next.handle(authReq);\r\n    \r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "ISignupRequest",
            "id": "class-ISignupRequest-70d5c2e22df4029003367edc7337b2f34440bd041a77a6a0ac96e83611066806e7f39867a99f4e1e5f06624fdad46e009fd78d7444ea76c6083bbe5f3bec9dbf",
            "file": "src/app/interfaces/signupinterface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ISignupRequest {\r\n    fullName!:string;\r\n    email!:string;\r\n    password!:string;\r\n    confirmPassword!:string;\r\n}\r\n",
            "properties": [
                {
                    "name": "confirmPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "fullName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-39d23f81fa00d1f5ab8df0c38a60c9a95d61ae8854728649bbb13d587796390595f2d5001e21a3ebf8b3f512196579dbccd4012f29b7470665b2dcb5c8b74827",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'crmproject'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "SignupComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { SignupComponent } from './components/Authentication/signup/signup.component';\r\n\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [RouterOutlet, SignupComponent, ReactiveFormsModule],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.css'\r\n})\r\nexport class AppComponent {\r\n  title = 'crmproject';\r\n}\r\n",
            "styleUrl": "./app.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<!DOCTYPE html>\r\n<router-outlet></router-outlet>"
        },
        {
            "name": "BlogComponent",
            "id": "component-BlogComponent-2c53824301082dea7f971ae38b8777a4c5ce8e6a081ffad10debe8147ef9b7c75432679a0fddf47284b370384e57a0d12d59cfe896b01c5775fc44f71eac36d6",
            "file": "src/app/components/core/blog/blog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-blog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./blog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-blog',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './blog.component.html',\r\n  styleUrl: './blog.component.css'\r\n})\r\nexport class BlogComponent {\r\n\r\n}\r\n",
            "styleUrl": "./blog.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>blog works!</p>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-c3bd323da00016e22e16a3a7d43440094eeceddea5e6076a399bcaba62f8e742efe65e543735e36f9ea1bed026ab8e3c8fb60482667ae55ec324f8adfe79b9f7",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 837,
                            "end": 851,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 838,
                                "end": 846,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 35,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 51
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-e4b57e684056b30d09139436d1f66a8c0bca1f577d2705f0d87a4710b2ad882131be337c8107980c7c433ce30cbb74b6b90c13137263ed4efecb515c48907ef4-1",
            "file": "src/app/shared/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonText",
                    "defaultValue": "\"Add\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './button.component.html',\r\n  styleUrl: './button.component.css'\r\n})\r\nexport class ButtonComponent {\r\n\r\n\r\n  buttonText:string=\"Add\"\r\n}\r\n",
            "styleUrl": "./button.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<button></button>\r\n"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-48c3284f84c034811cd789b706560a1b4f0c6c06910a4de933a1ff253cb9436815a8060cb8c3ebcd30580849f8f5d64d24a4ff60aebd52c833b8a13d71b56ab1",
            "file": "src/app/shared/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "description_continue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "total_number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-card',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './card.component.html',\r\n  styleUrl: './card.component.css'\r\n})\r\nexport class CardComponent implements OnInit {\r\n\r\n  @Input('icon_path') icon_path!: string;\r\n  @Input('title') title!: string;\r\n  @Input('description') description!: string;\r\n  @Input('description_continue') description_continue!: string;\r\n  @Input('total_number') total_number!: string;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  ngOnChanges(): void {\r\n\r\n  }\r\n}\r\n",
            "styleUrl": "./card.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\">\r\n  <div class=\"info\">\r\n    <div class=\"main-info\">\r\n      <div class=\"icon\">\r\n        <img [src]=\"icon_path\" alt=\"icon\" />\r\n      </div>\r\n      <div class=\"title\">{{ title }}</div>\r\n    </div>\r\n    <small class=\"description\"\r\n      >{{ description }} <br />\r\n      {{ description_continue }}</small\r\n    >\r\n  </div>\r\n  <div class=\"total-number\">{{ total_number }}</div>\r\n</div>\r\n"
        },
        {
            "name": "CmsMainComponent",
            "id": "component-CmsMainComponent-0b86ad2de3c6d93ddd49cc4baa36dd37d95810796fac8a9a9cebb87d7f03307212fb69cd8d0c60ed21dad4868bbb983d8ee07aecf6e4e338df5f29a69b212e7a",
            "file": "src/app/components/core/cms-main/cms-main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cms-main",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./cms-main.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "toggler_val",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "SidebarComponent",
                    "type": "component"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { ActivatedRoute, RouterOutlet } from '@angular/router';\r\nimport { SidebarComponent } from '../../../shared/sidebar/sidebar.component';\r\nimport { HeaderComponent } from '../../../shared/header/header.component';\r\nimport { ToggleService } from '../../../services/toggleBtn/toggle.service';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-cms-main',\r\n  standalone: true,\r\n  imports: [RouterOutlet, CommonModule, SidebarComponent, HeaderComponent],\r\n  templateUrl: './cms-main.component.html',\r\n  styleUrl: './cms-main.component.css'\r\n})\r\nexport class CmsMainComponent {\r\n\r\n  toggler_val!: Boolean;\r\n\r\n  constructor(private _Toggle: ToggleService) { }\r\n\r\n  ngOnInit() {\r\n    this._Toggle.getToggleValue().subscribe({\r\n      next: (res) => {\r\n        this.toggler_val = res;\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./cms-main.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_Toggle",
                        "type": "ToggleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "_Toggle",
                        "type": "ToggleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"sidebar\" [ngClass]=\"toggler_val ? 'toggle' : 'beforeToggle'\">\r\n      <app-sidebar></app-sidebar>\r\n    </div>\r\n    <div class=\"col-12\">\r\n      <div class=\"row header\">\r\n        <div class=\"col-12 head-side\">\r\n          <app-header></app-header>\r\n        </div>\r\n        <div class=\"col-12 content\">\r\n          <main>\r\n            <router-outlet></router-outlet>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "CorrectchagesComponent",
            "id": "component-CorrectchagesComponent-720817baba43ed694aa8f1e335d34325ff1d251d9f05492068efa4a520c90076e4a9f8112b2f45e74f017134110ef982c2d1048526a47aa1c5719535fe27c030",
            "file": "src/app/components/Authentication/correctchages/correctchages.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-correctchages",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./correctchages.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\nimport { Router, RouterModule } from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-correctchages',\r\n  standalone: true,\r\n  imports: [RouterModule],\r\n  templateUrl: './correctchages.component.html',\r\n  styleUrl: './correctchages.component.css',\r\n  animations: [\r\n    trigger('flipInOut', [\r\n      transition(':enter', [\r\n        animate('1s', style({ transform: 'rotateY(90deg)' })),\r\n      ]),\r\n      transition(':leave', [\r\n        animate('1s', style({ transform: 'rotateY(180deg)' })),\r\n      ]),\r\n    ]),\r\n  ],\r\n})\r\nexport class CorrectchagesComponent {\r\n\r\n}\r\n",
            "styleUrl": "./correctchages.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<!DOCTYPE html>\r\n<div class=\"container\">\r\n  <div class=\"projName\">\r\n    <div class=\"nameContainer\">\r\n      <div><img src=\"../../../assets/images/Icon.png\" alt=\"Logo\" /></div>\r\n      <div class=\"projNDiv\"><p class=\"Name\">CMS Software</p></div>\r\n    </div>\r\n\r\n    <div class=\"selDiv\">\r\n      <select name=\"language\">\r\n        <option value=\"en\">English</option>\r\n        <option value=\"en\">Arabic</option>\r\n      </select>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"loginContainer\" id=\"loginContainerId\">\r\n    <div class=\"bg3\">\r\n      <div class=\"loginDiv\">\r\n        <div style=\"text-align: center;\">\r\n          <img src=\"../../../../assets/images/Animation - 1702803941821.gif\" alt=\"\" width=\"250px\" height=\"250px\" >\r\n          <h1>Password Changed</h1>\r\n          <p class=\"info1\">Your password has been changed</p>\r\n          <button><a class=\"Link\" routerLink=\"/signin\">LOG IN</a></button> \r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "EmailVerificationComponent",
            "id": "component-EmailVerificationComponent-ed9c12da746ab1de2d1b31a8560c3f33a3d3a3ed29a6691ee79eb3ed89914af125a5078c833e0788286853d1b5e142cf61f99cbf0cad19290df97407e735ecc4",
            "file": "src/app/components/Authentication/email-verification/email-verification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-email-verification",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./email-verification.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formVerification",
                    "defaultValue": "new FormGroup({\r\n    verificationCode1: new FormControl(''),\r\n    verificationCode2: new FormControl(''),\r\n    verificationCode3: new FormControl(''),\r\n    verificationCode4: new FormControl(''),\r\n    verificationCode5: new FormControl(''),\r\n    verificationCode6: new FormControl(''),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "otp",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "str1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "str2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "str3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "str4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "str5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "str6",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resendOTP",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "verificationSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, DoCheck, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { ILogin } from '../../../interfaces/logininterface';\r\n\r\n@Component({\r\n  selector: 'app-email-verification',\r\n  standalone: true,\r\n  imports: [RouterModule, FormsModule, ReactiveFormsModule, CommonModule],\r\n  templateUrl: './email-verification.component.html',\r\n  styleUrl: './email-verification.component.css',\r\n  animations: [\r\n    trigger('flipInOut', [\r\n      transition(':enter', [\r\n        animate('1s', style({ transform: 'rotateY(90deg)' })),\r\n      ]),\r\n      transition(':leave', [\r\n        animate('1s', style({ transform: 'rotateY(180deg)' })),\r\n      ]),\r\n    ]),\r\n  ],\r\n})\r\nexport class EmailVerificationComponent implements OnInit, DoCheck {\r\n  str1!: string;\r\n  str2!: string;\r\n  str3!: string;\r\n  str4!: string;\r\n  str5!: string;\r\n  str6!: string;\r\n\r\n  otp: string = '';\r\n\r\n  formVerification = new FormGroup({\r\n    verificationCode1: new FormControl(''),\r\n    verificationCode2: new FormControl(''),\r\n    verificationCode3: new FormControl(''),\r\n    verificationCode4: new FormControl(''),\r\n    verificationCode5: new FormControl(''),\r\n    verificationCode6: new FormControl(''),\r\n  });\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private _authService: AuthService,\r\n    private _Router: Router\r\n  ) {}\r\n  ngDoCheck(): void {}\r\n  ngOnInit(): void {\r\n    this.formVerification = this.formBuilder.group({\r\n      verificationCode1: ['', [Validators.required, Validators.maxLength(1)]],\r\n      verificationCode2: ['', [Validators.required, Validators.maxLength(1)]],\r\n      verificationCode3: ['', [Validators.required, Validators.maxLength(1)]],\r\n      verificationCode4: ['', [Validators.required, Validators.maxLength(1)]],\r\n      verificationCode5: ['', [Validators.required, Validators.maxLength(1)]],\r\n      verificationCode6: ['', [Validators.required, Validators.maxLength(1)]],\r\n    });\r\n  }\r\n\r\n  // send otp\r\n  verificationSubmit() {\r\n    if (this.formVerification.invalid) {\r\n      console.log(this.formVerification);\r\n      return;\r\n    }\r\n\r\n    this.otp = `${this.str1}${this.str2}${this.str3}${this.str4}${this.str5}${this.str6}`;\r\n    console.log(this.otp);\r\n    \r\n\r\n    this._authService.resetVerificationCode(this.otp).subscribe({\r\n      next: (res) => {\r\n        console.log(res);\r\n        sessionStorage.setItem('token',res.token);\r\n        this._Router.navigateByUrl('setnewpassword');\r\n      },\r\n      error: (err) => {\r\n        alert(err.message);\r\n      },\r\n    });\r\n    \r\n  }\r\n\r\n\r\n\r\n  resendOTP(){\r\n    this._authService.resendOTP()\r\n  }\r\n}\r\n",
            "styleUrl": "./email-verification.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "DoCheck"
            ],
            "templateData": "<!DOCTYPE html>\r\n<div class=\"container\">\r\n  <div class=\"projName\">\r\n    <div class=\"nameContainer\">\r\n      <div><img src=\"../../../assets/images/Icon.png\" alt=\"Logo\" /></div>\r\n      <div class=\"projNDiv\"><p>CMS Software</p></div>\r\n    </div>\r\n\r\n    <div class=\"selDiv\">\r\n      <select name=\"language\">\r\n        <option value=\"en\">English</option>\r\n        <option value=\"en\">Arabic</option>\r\n      </select>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"loginContainer\" id=\"loginContainerId\" [@flipInOut]>\r\n    <div class=\"bg3\">\r\n      <div style=\"text-align: center\" class=\"loginDiv\">\r\n        <h1>Email Verification</h1>\r\n        <p class=\"info1\">We sent OTP code to</p>\r\n        <img\r\n          style=\"margin-left: auto; margin-right: auto\"\r\n          src=\"../../../assets/images/smartphone.svg\"\r\n          alt=\"OTP photo\"\r\n        />\r\n        <div>\r\n          <form\r\n            action=\"\"\r\n            [formGroup]=\"formVerification\"\r\n            (ngSubmit)=\"verificationSubmit()\"\r\n            #form=\"ngForm\"\r\n          >\r\n            <div>\r\n              <label for=\"verificationCode\" class=\"labelInput\"\r\n                >Type your 6 digit security code</label\r\n              ><br />\r\n              <div class=\"verificationInpts\">\r\n                <input\r\n                  type=\"text\"\r\n                  maxlength=\"1\"\r\n                  class=\"inputVerificationStyle\"\r\n                  id=\"verificationCode\"\r\n                  formControlName=\"verificationCode1\"\r\n                  [(ngModel)]=\"str1\"\r\n                  min=\"0\"\r\n                  max=\"9\"\r\n                  oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode1.touched &&\r\n                      formVerification.controls.verificationCode1.errors\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-valid':\r\n                      formVerification.controls.verificationCode1.touched &&\r\n                      formVerification.controls.verificationCode1.errors ==\r\n                        null &&\r\n                      formVerification.controls.verificationCode1.dirty\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode1.errors &&\r\n                      formVerification.controls.verificationCode1.dirty, \r\n                  }\"\r\n                />&#32;\r\n                <input\r\n                  type=\"text\"\r\n                  maxlength=\"1\"\r\n                  class=\"inputVerificationStyle\"\r\n                  id=\"verificationNum\"\r\n                  [(ngModel)]=\"str2\"\r\n                  min=\"0\"\r\n                  max=\"9\"\r\n                  oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n                  formControlName=\"verificationCode2\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode2.touched &&\r\n                      formVerification.controls.verificationCode2.errors,\r\n                    'is-valid':\r\n                      formVerification.controls.verificationCode2.touched &&\r\n                      formVerification.controls.verificationCode2.errors ==\r\n                        null &&\r\n                      formVerification.controls.verificationCode2.dirty\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode2.errors &&\r\n                      formVerification.controls.verificationCode2.dirty, \r\n                  }\"\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  maxlength=\"1\"\r\n                  minlength=\"1\"\r\n                  class=\"inputVerificationStyle\"\r\n                  id=\"verificationNum\"\r\n                  [(ngModel)]=\"str3\"\r\n                  min=\"0\"\r\n                  max=\"9\"\r\n                  oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n                  formControlName=\"verificationCode3\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode3.touched &&\r\n                      formVerification.controls.verificationCode3.errors\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-valid':\r\n                      formVerification.controls.verificationCode3.touched &&\r\n                      formVerification.controls.verificationCode3.errors ==\r\n                        null &&\r\n                      formVerification.controls.verificationCode3.dirty\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode3.errors &&\r\n                      formVerification.controls.verificationCode3.dirty, \r\n                  }\"\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  maxlength=\"1\"\r\n                  minlength=\"1\"\r\n                  class=\"inputVerificationStyle\"\r\n                  id=\"verificationNum\"\r\n                  formControlName=\"verificationCode4\"\r\n                  [(ngModel)]=\"str4\"\r\n                  min=\"0\"\r\n                  max=\"9\"\r\n                  oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode4.touched &&\r\n                      formVerification.controls.verificationCode4.errors\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-valid':\r\n                      formVerification.controls.verificationCode4.touched &&\r\n                      formVerification.controls.verificationCode4.errors ==\r\n                        null &&\r\n                      formVerification.controls.verificationCode4.dirty\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode4.errors &&\r\n                      formVerification.controls.verificationCode4.dirty, \r\n                  }\"\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  maxlength=\"1\"\r\n                  minlength=\"1\"\r\n                  class=\"inputVerificationStyle\"\r\n                  id=\"verificationNum\"\r\n                  formControlName=\"verificationCode5\"\r\n                  [(ngModel)]=\"str5\"\r\n                  min=\"0\"\r\n                  max=\"9\"\r\n                  oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode5.touched &&\r\n                      formVerification.controls.verificationCode5.errors\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-valid':\r\n                      formVerification.controls.verificationCode5.touched &&\r\n                      formVerification.controls.verificationCode5.errors ==\r\n                        null &&\r\n                      formVerification.controls.verificationCode5.dirty\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode5.errors &&\r\n                      formVerification.controls.verificationCode5.dirty, \r\n                  }\"\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  maxlength=\"1\"\r\n                  minlength=\"1\"\r\n                  class=\"inputVerificationStyle\"\r\n                  id=\"verificationNum\"\r\n                  formControlName=\"verificationCode6\"\r\n                  [(ngModel)]=\"str6\"\r\n                  min=\"0\"\r\n                  max=\"9\"\r\n                  oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode6.touched &&\r\n                      formVerification.controls.verificationCode6.errors\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-valid':\r\n                      formVerification.controls.verificationCode6.touched &&\r\n                      formVerification.controls.verificationCode6.errors ==\r\n                        null &&\r\n                      formVerification.controls.verificationCode6.dirty\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode6.errors &&\r\n                      formVerification.controls.verificationCode6.dirty, \r\n                  }\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <button type=\"submit\" [disabled]=\"formVerification.invalid\">\r\n              Reset password\r\n            </button>\r\n            <p class=\"info2\">\r\n              Dont't get the code ? <a (click)=\"resendOTP()\">Resend</a> or\r\n              <a>call us</a>\r\n            </p>\r\n            <!-- <input type=\"submit\"> -->\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-07f894be6f38e12f30e1e7e5d9e999c27c78ce2f0be03c15c8c5f39207229e147892a2fd1fdb54e935c4f04f03c2162e39a22c28cdc64e027ea15824ddf0f3c9",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ButtonComponent } from './button.component';\r\nimport type { User } from './user';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  standalone: true,\r\n  imports: [CommonModule, ButtonComponent],\r\n  template: `<header>\r\n    <div class=\"storybook-header\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <div *ngIf=\"user\">\r\n          <span class=\"welcome\">\r\n            Welcome, <b>{{ user.name }}</b\r\n            >!\r\n          </span>\r\n          <storybook-button\r\n            *ngIf=\"user\"\r\n            size=\"small\"\r\n            (onClick)=\"onLogout.emit($event)\"\r\n            label=\"Log out\"\r\n          ></storybook-button>\r\n        </div>\r\n        <div *ngIf=\"!user\">\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            size=\"small\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onLogin.emit($event)\"\r\n            label=\"Log in\"\r\n          ></storybook-button>\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            size=\"small\"\r\n            [primary]=\"true\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onCreateAccount.emit($event)\"\r\n            label=\"Sign up\"\r\n          ></storybook-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport class HeaderComponent {\r\n  @Input()\r\n  user: User | null = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.storybook-header svg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-header h1 {\r\n  font-weight: 700;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-header button + button {\r\n  margin-left: 10px;\r\n}\r\n\r\n.storybook-header .welcome {\r\n  color: #333;\r\n  font-size: 14px;\r\n  margin-right: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-e94c267ca190aceff9700805d1af48a237904a194464a23f6bf5c40a440d88091e7e8063dac4b00ef6286a56045c33dae7f6660b572a5dda4fcda3bcdf92e404-1",
            "file": "src/app/shared/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './header.component.html',\r\n  styleUrl: './header.component.css'\r\n})\r\nexport class HeaderComponent {\r\n\r\n}\r\n",
            "styleUrl": "./header.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col-5\">\r\n      <div class=\"breadcrumb\">\r\n        <div class=\"stage\">\r\n          <img src=\"assets/images/dashboard.svg\" alt=\"dashboard\" />\r\n          Dashboard\r\n        </div>\r\n\r\n        <span>></span>\r\n\r\n        <div class=\"stage\">\r\n          <img\r\n            src=\"assets/images/profile-circle-dark.svg\"\r\n            alt=\"profile-circle-dark\"\r\n          />\r\n          User Management\r\n        </div>\r\n        <span>></span>\r\n\r\n        <div class=\"stage\">Manage Users</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"col-7\"></div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ManageRolesComponent",
            "id": "component-ManageRolesComponent-59bb2116e53caf68e62a7af6ddcd1971c4eb4addc37c5b911b94e045eb28cb165f7628087fb2c9e6551671e21400de3644f8e15963b0b466fe83c4c01843b9f8",
            "file": "src/app/components/core/management/manage-roles/manageroles.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-manageroles",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./manageroles.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-manageroles',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './manageroles.component.html',\r\n  styleUrl: './manageroles.component.css'\r\n})\r\nexport class ManageRolesComponent {\r\n\r\n}\r\n",
            "styleUrl": "./manageroles.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>manageroles works!</p>"
        },
        {
            "name": "ManageUsersComponent",
            "id": "component-ManageUsersComponent-5bb93f493ea187c86082201d8e483d37f8c0fa6adb3a02d538218835da0755dd91adafa678b8787d86e86f62938d125c8394449e1a40d4cbdcf01fa70b5d5611",
            "file": "src/app/components/core/management/manage-users/manage-users.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-manage-users",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./manage-users.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CardComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CardComponent } from '../../../../shared/card/card.component';\r\n\r\n@Component({\r\n  selector: 'app-manage-users',\r\n  standalone: true,\r\n  imports: [CardComponent],\r\n  templateUrl: './manage-users.component.html',\r\n  styleUrl: './manage-users.component.css'\r\n})\r\nexport class ManageUsersComponent {\r\n\r\n}\r\n",
            "styleUrl": "./manage-users.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <div>\r\n    <div class=\"col-12\">\r\n      <div class=\"section-title\">\r\n        <h3>User Management</h3>\r\n        <small>Mange your users and roles</small>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-3\">\r\n      <app-card\r\n        [icon_path]=\"'assets/images/user-management-count.svg'\"\r\n        [title]=\"'Active Users'\"\r\n        [description]=\"'Total user number'\"\r\n        [description_continue]=\"'in this system'\"\r\n        [total_number]=\"'3500'\"\r\n      ></app-card>\r\n    </div>\r\n    <div class=\"col-3\">\r\n      <app-card\r\n        [icon_path]=\"'assets/images/user-management-count.svg'\"\r\n        [title]=\"'Active Users'\"\r\n        [description]=\"'Total user number'\"\r\n        [description_continue]=\"'in this system'\"\r\n        [total_number]=\"'3500'\"\r\n      ></app-card>\r\n    </div>\r\n\r\n    <div class=\"col-3\">\r\n      <app-card\r\n        [icon_path]=\"'assets/images/user-square.svg'\"\r\n        [title]=\"'Deactive Users'\"\r\n        [description]=\"'Total user number'\"\r\n        [description_continue]=\"'in this system'\"\r\n        [total_number]=\"'1500'\"\r\n      ></app-card>\r\n    </div>\r\n\r\n    <div class=\"col-3\">\r\n      <app-card\r\n      [icon_path]=\"'assets/images/user-management-count.svg'\"\r\n      [title]=\"'Active Users'\"\r\n      [description]=\"'Total user number'\"\r\n      [description_continue]=\"'in this system'\"\r\n      [total_number]=\"'3500'\"\r\n    ></app-card>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "NotfoundComponent",
            "id": "component-NotfoundComponent-3ad6daa1a27bb3bbb468afab6e3f62468c973eaf273046454c5d2e6304ef613753bb4914c93139b8d7cabdc874b5b3af4b5b48e051b566e4057b401b01961433",
            "file": "src/app/components/notfound/notfound.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notfound",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./notfound.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-notfound',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './notfound.component.html',\r\n  styleUrl: './notfound.component.css'\r\n})\r\nexport class NotfoundComponent {\r\n\r\n}\r\n",
            "styleUrl": "./notfound.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<!DOCTYPE html>\r\n<h2>Page Not Found!</h2>\r\n<p>We couldn't find that page! Not even with x-ray vision.</p>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-92f4cc9cc0054ccf9d578fc1ebe06b6d7ed1424277151dbedd6cfe73ba15609d9919dcba6e9acbd021b43117d9ce1f28adf6630c681037299b01a4c726c15a8e",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { HeaderComponent } from './header.component';\r\nimport type { User } from './user';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  standalone: true,\r\n  imports: [CommonModule, HeaderComponent],\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"doLogout()\"\r\n      (onLogin)=\"doLogin()\"\r\n      (onCreateAccount)=\"doCreateAccount()\"\r\n    ></storybook-header>\r\n    <section class=\"storybook-page\">\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Storybook tutorials\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport class PageComponent {\r\n  user: User | null = null;\r\n\r\n  doLogout() {\r\n    this.user = null;\r\n  }\r\n\r\n  doLogin() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n\r\n  doCreateAccount() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\n.storybook-page h2 {\r\n  font-weight: 700;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-page p {\r\n  margin: 1em 0;\r\n}\r\n\r\n.storybook-page a {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\n.storybook-page ul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\n.storybook-page li {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.storybook-page .tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-page .tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "SendmailComponent",
            "id": "component-SendmailComponent-b009520240f9a0e3588a67bb46ec8c0d8ce36e24c3127fc812fc33cd01bfcd48956c0b2ec2ea0ad6f04ef7a673f0c8e45dc3b58bd5761a988c7b102714655baa",
            "file": "src/app/components/Authentication/sendmail/sendmail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sendmail",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sendmail.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formSendMail",
                    "defaultValue": "new FormGroup({\r\n    forgetEmail: new FormControl(''),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\nimport { error } from 'console';\r\n\r\n@Component({\r\n  selector: 'app-sendmail',\r\n  standalone: true,\r\n  imports: [RouterModule, FormsModule, ReactiveFormsModule, CommonModule],\r\n  templateUrl: './sendmail.component.html',\r\n  styleUrl: './sendmail.component.css',\r\n  animations: [\r\n    trigger('flipInOut', [\r\n      transition(':enter', [\r\n        animate('0.5s', style({ transform: 'rotateY(90deg)' })),\r\n      ]),\r\n      transition(':leave', [\r\n        animate('0.5s', style({ transform: 'rotateY(180deg)' })),\r\n      ]),\r\n    ]),\r\n  ],\r\n})\r\nexport class SendmailComponent implements OnInit {\r\n\r\n  constructor(private formBuilder: FormBuilder, private _authService: AuthService, private _Router: Router) { }\r\n\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.formSendMail = this.formBuilder.group({\r\n      forgetEmail: ['', [Validators.required, Validators.email]],\r\n    });\r\n\r\n  }\r\n\r\n  formSendMail = new FormGroup({\r\n    forgetEmail: new FormControl(''),\r\n  });\r\n\r\n\r\n  resetSubmit() { // send mail\r\n    if (this.formSendMail.invalid) {\r\n      console.log(this.formSendMail);\r\n      return;\r\n    }\r\n    const email = this.formSendMail.controls.forgetEmail.value?.toString()??'';\r\n    this._authService.sendMail(email).subscribe({\r\n      next:(res)=>{\r\n        // sessionStorage.setItem('token' , res.token);\r\n        sessionStorage.setItem('email' , email);\r\n        sessionStorage.setItem('message',res.message);\r\n        console.log(res);\r\n        this._Router.navigateByUrl('/emailverification');\r\n      },error:(err)=>{\r\n        console.log(err);\r\n      }\r\n    })\r\n    // this._authService.sendMail(email).subscribe({\r\n    //   next: (res)=>{ \r\n    //     sessionStorage.setItem('token' , res.token);\r\n    //     sessionStorage.setItem('email' , res.email);\r\n    //     sessionStorage.setItem('message',res.message);\r\n    //     console.log(this.formSendMail.controls.forgetEmail.value);\r\n        \r\n    //     console.log(res.message);\r\n    //     console.log(res.token)\r\n    //     console.log(res);\r\n        \r\n    //     this._Router.navigateByUrl('/emailverification');\r\n    // },\r\n    //   error:(err)=>{alert(err.message)}\r\n    // });\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./sendmail.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n<div class=\"container\">\r\n\r\n  <div class=\"projName\">\r\n    <div class=\"nameContainer\">\r\n      <div><img src=\"../../../assets/images/Icon.png\" alt=\"Logo\" /></div>\r\n      <div class=\"projNDiv\"><p>CMS Software</p></div>\r\n    </div>\r\n\r\n    <div class=\"selDiv\">\r\n      <select name=\"language\">\r\n        <option value=\"en\">English</option>\r\n        <option value=\"en\">Arabic</option>\r\n      </select>\r\n    </div>\r\n  </div>\r\n\r\n\r\n  <div class=\"resetContainer\" id=\"resetContainerId\" [@flipInOut]>\r\n    <div class=\"bg2\">\r\n      <div class=\"resetDiv\">\r\n        <form\r\n          action=\"\"\r\n          [formGroup]=\"formSendMail\"\r\n          (ngSubmit)=\"resetSubmit()\"\r\n          #resetform=\"ngForm\"\r\n        >\r\n          <div>\r\n            <h1>Forget Password</h1>\r\n            <p class=\"info1\">Enter your email , send link to reset password</p>\r\n          </div>\r\n          <div>\r\n            <label class=\"form-label\" for=\"fromInput2\">Email:</label>\r\n            <input\r\n              type=\"email\"\r\n              class=\"form-input\"\r\n              id=\"fromInput2\"\r\n              placeholder=\"i.e. Haitham.mo@company.com\"\r\n              formControlName=\"forgetEmail\"\r\n              [ngClass]=\"{\r\n                'is-invalid':\r\n                  formSendMail.controls.forgetEmail.touched &&\r\n                  formSendMail.controls.forgetEmail.errors\r\n              }\"\r\n            />\r\n            @if (formSendMail.controls.forgetEmail.touched &&\r\n            formSendMail.controls.forgetEmail.errors) {\r\n            <div class=\"invalid-feedback\">\r\n              @if (formSendMail.controls.forgetEmail.errors['required']) {\r\n              <p>Email is required</p>\r\n              } @if (formSendMail.controls.forgetEmail.errors['email']) {\r\n              <p>invalid email. please verify agian</p>\r\n              }\r\n            </div>\r\n            }\r\n          </div>\r\n          <button type=\"submit\" [disabled]=\"formSendMail.invalid\">\r\n            Reset password\r\n          </button>\r\n          <p class=\"info2\">\r\n            Did you remember your password?\r\n            <a routerLink=\"/signin\">LOG IN</a>\r\n          </p>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SetnewpasswordComponent",
            "id": "component-SetnewpasswordComponent-0121e3d04a3c463b25e18b8262f39df14c1fa7469675b52af1979b5969c33c979af8df893f7fa4e6d8b9fb92375bbb19bf03eee8733ef10a064e399c35e581dc",
            "file": "src/app/components/Authentication/setnewpassword/setnewpassword.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-setnewpassword",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./setnewpassword.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "eyeshow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "forgetPassRequest",
                    "defaultValue": "{} as IForgetPassRequest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IForgetPassRequest",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "formSetNewPassword",
                    "defaultValue": "new FormGroup({\r\n    password: new FormControl(''),\r\n    confirmPassword: new FormControl(''),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "Number",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "numberLength",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "passwordHint",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "specialChar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "uppercase",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "eyeShow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setNewPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "test",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validateAreEqual",
                    "args": [
                        {
                            "name": "pass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "confimPass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(group: FormGroup) => void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "confimPass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, DoCheck, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\nimport { ResetPasswordService } from '../../../services/reset-password.service';\r\nimport { IForgetPassRequest } from '../../../interfaces/iforget-pass-request';\r\n\r\n\r\n@Component({\r\n  selector: 'app-setnewpassword',\r\n  standalone: true,\r\n  imports: [RouterModule, FormsModule, ReactiveFormsModule, CommonModule],\r\n  templateUrl: './setnewpassword.component.html',\r\n  styleUrl: './setnewpassword.component.css',\r\n  animations: [\r\n    trigger('flipInOut', [\r\n      transition(':enter', [\r\n        animate('1s', style({ transform: 'rotateY(90deg)' })),\r\n      ]),\r\n      transition(':leave', [\r\n        animate('1s', style({ transform: 'rotateY(180deg)' })),\r\n      ]),\r\n    ]),\r\n  ],\r\n\r\n})\r\nexport class SetnewpasswordComponent implements OnInit, DoCheck {\r\n  eyeshow: boolean = false;\r\n  passwordHint: boolean = false;\r\n  uppercase: boolean = false;\r\n  specialChar: boolean = false;\r\n  Number: boolean = false;\r\n  numberLength: boolean = false;\r\n  forgetPassRequest : IForgetPassRequest ={} as IForgetPassRequest; \r\n  formSetNewPassword = new FormGroup({\r\n    password: new FormControl(''),\r\n    confirmPassword: new FormControl(''),\r\n  });\r\n\r\n  constructor(\r\n    private _authService: ResetPasswordService,\r\n\r\n    private _Router: Router,\r\n    private formBuilder: FormBuilder\r\n  ) { }\r\n\r\n  ngDoCheck(): void {\r\n    this.numberLength = /.{8,}/.test(\r\n      this.formSetNewPassword.controls.password.value!\r\n    );\r\n    this.uppercase = /[A-Z]/.test(\r\n      this.formSetNewPassword.controls.password.value!\r\n    );\r\n    this.specialChar = /[#?!@$%^&*-]/.test(\r\n      this.formSetNewPassword.controls.password.value!\r\n    );\r\n    this.Number = /[0-9]/.test(\r\n      this.formSetNewPassword.controls.password.value!\r\n    );\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.formSetNewPassword = this.formBuilder.group(\r\n      {\r\n        password: [\r\n          '',\r\n          [\r\n            Validators.required,\r\n            Validators.maxLength(40),\r\n            Validators.minLength(6),\r\n            Validators.pattern(\r\n              '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$'\r\n            ),\r\n          ],\r\n        ],\r\n        confirmPassword: ['', [Validators.required]],\r\n      },\r\n      { validator: this.validateAreEqual('password', 'confirmPassword') }\r\n    );\r\n  }\r\n\r\n  setNewPassword() {\r\n    if (this.formSetNewPassword.invalid) {\r\n      console.log(this.formSetNewPassword);\r\n      return;\r\n    }\r\n\r\n    const fv = this.formSetNewPassword.value!;\r\n    this.forgetPassRequest = {\r\n      password :fv.password?.toString()??'',\r\n      confirmNewPassword :fv.confirmPassword?.toString()??''\r\n    }\r\n    console.log(fv);\r\n    this._authService.resetPassword(this.forgetPassRequest).subscribe({\r\n      next: (res:any) => {\r\n        sessionStorage.getItem('token');\r\n        console.log(res);\r\n        this._Router.navigateByUrl('/correctchange');\r\n      },\r\n      error: (err:any) => {\r\n        alert(err.message);\r\n      },\r\n    });\r\n  }\r\n\r\n  validateAreEqual(pass: string, confimPass: string) {\r\n    return (group: FormGroup) => {\r\n      const password = group.controls[pass];\r\n      const confimPassword = group.controls[confimPass];\r\n      if (password.value !== confimPassword.value) {\r\n        confimPassword.setErrors({ passwordMismatch: true });\r\n      }\r\n    };\r\n  }\r\n\r\n  test() {\r\n    this.passwordHint = !this.passwordHint;\r\n    console.log(this.passwordHint);\r\n  }\r\n\r\n  eyeShow() {\r\n    this.eyeshow = !this.eyeshow;\r\n  }\r\n}\r\n",
            "styleUrl": "./setnewpassword.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_authService",
                        "type": "ResetPasswordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "_authService",
                        "type": "ResetPasswordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "DoCheck"
            ],
            "templateData": "<div class=\"container\">\r\n  <div class=\"projName\">\r\n    <div class=\"nameContainer\">\r\n      <div><img src=\"../../../assets/images/Icon.png\" alt=\"Logo\" /></div>\r\n      <div class=\"projNDiv\"><p class=\"Name\">CMS Software</p></div>\r\n    </div>\r\n\r\n    <div class=\"selDiv\">\r\n      <select name=\"language\">\r\n        <option value=\"en\">English</option>\r\n        <option value=\"en\">Arabic</option>\r\n      </select>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"loginContainer\" id=\"loginContainerId\" [@flipInOut]>\r\n\r\n    <div class=\"bg3\">\r\n      <div class=\"loginDiv\">\r\n        <h1>Set a new password</h1>\r\n        <p class=\"info1\">\r\n          New password must be different from your previous passwords\r\n        </p>\r\n        <div>\r\n          <form\r\n            action=\"\"\r\n            [formGroup]=\"formSetNewPassword\"\r\n            (ngSubmit)=\"setNewPassword()\"\r\n            #setnewpassform=\"ngForm\"\r\n          >\r\n            <div class=\"label-div\">\r\n              <label class=\"form-label\" for=\"fromInput3\">Password</label>\r\n              <input\r\n                type=\"password\"\r\n                class=\"form-input passwordCheck\"\r\n                id=\"fromInput3\"\r\n                placeholder=\"********************\"\r\n                formControlName=\"password\"\r\n                [ngClass]=\"{\r\n                  'is-invalid':\r\n                  formSetNewPassword.controls.password.touched &&\r\n                  formSetNewPassword.controls.password.errors,\r\n                  'is-valid':\r\n                  formSetNewPassword.controls.password.touched &&\r\n                  formSetNewPassword.controls.password.errors == null ,\r\n                  'is-touched':\r\n                  formSetNewPassword.controls.password.untouched &&\r\n                  formSetNewPassword.controls.password.errors == null,\r\n              }\"\r\n                (focusin)=\"test()\"\r\n                (focusout)=\"test()\"\r\n              />\r\n\r\n              <!-- <span\r\n              class=\"p-viewer\"\r\n              [ngClass]=\"{ show: !passwordHint }\"\r\n              [ngClass]=\"{ hide: !passwordHint }\"\r\n            >\r\n              <fa-icon [icon]=\"faEye\" class=\"faEye\" (click)=\"eyeShow()\"></fa-icon>\r\n              <hr\r\n                [ngClass]=\"{ show: eyeshow }\"\r\n                [ngClass]=\"{ hide: eyeshow }\"\r\n                class=\"eyeHr\"\r\n              />\r\n            </span> -->\r\n\r\n              <br />\r\n              <div class=\"passwordCheckContainer\">\r\n                <div class=\"invalid-feedback\" [hidden]=\"!passwordHint\">\r\n                  <div class=\"strongth-password\">\r\n                    @if(formSetNewPassword.controls.password.value!.length < 6\r\n                    || formSetNewPassword.controls.password.value!.length >= 6\r\n                    && formSetNewPassword.controls.password.errors){\r\n                    <div class=\"bar\" id=\"week\"></div>\r\n                    <div class=\"bar\" id=\"mediumH\"></div>\r\n                    <div class=\"bar\" id=\"strongH\"></div>\r\n\r\n                    } @if(formSetNewPassword.controls.password.value!.length >=\r\n                    6 && formSetNewPassword.controls.password.value!.length < 15\r\n                    && formSetNewPassword.controls.password.errors==null){\r\n                    <div class=\"bar\" id=\"mediumS\"></div>\r\n                    <div class=\"bar\" id=\"medium\" #medium></div>\r\n                    <div class=\"bar\" id=\"strongH\"></div>\r\n\r\n                    } @if(formSetNewPassword.controls.password.value!.length >=\r\n                    15 && formSetNewPassword.controls.password.errors==null){\r\n                    <div class=\"bar\" id=\"weekH\"></div>\r\n                    <div class=\"bar\" id=\"strongS\" #medium></div>\r\n                    <div class=\"bar\" id=\"strong\" #strong></div>\r\n\r\n                    }\r\n                  </div>\r\n                </div>\r\n                <p\r\n                  id=\"passHint\"\r\n                  [ngClass]=\"{ show: passwordHint }\"\r\n                  [ngClass]=\"{ hide: passwordHint }\"\r\n                >\r\n                  Password hint : 8 characters minimum\r\n                </p>\r\n                <div\r\n                  style=\"\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: space-around;\r\n                  \"\r\n                >\r\n                  <div style=\"margin-right: 5px\" [hidden]=\"!passwordHint\">\r\n                    @if(formSetNewPassword.controls.password.value!.length < 6\r\n                    || formSetNewPassword.controls.password.value!.length >= 6\r\n                    && formSetNewPassword.controls.password.errors){\r\n                    <p class=\"passCheckWord\">Password: Week</p>\r\n                    } @if(formSetNewPassword.controls.password.value!.length >=\r\n                    6 && formSetNewPassword.controls.password.value!.length < 15\r\n                    && formSetNewPassword.controls.password.errors==null){\r\n                    <p class=\"passCheckWord\">Password: Meduim</p>\r\n                    } @if(formSetNewPassword.controls.password.value!.length >=\r\n                    15 && formSetNewPassword.controls.password.errors==null){\r\n                    <p class=\"passCheckWord\">Password: Strong</p>\r\n                    }\r\n                  </div>\r\n                  <button class=\"tooltip\">\r\n                    !\r\n                    <ul class=\"tooltiptext\">\r\n                      Your Password Must Contain:\r\n                      <li>\r\n                        <span\r\n                          class=\"correctIcon\"\r\n                          [ngClass]=\"{\r\n                            changeBG: numberLength\r\n                          }\"\r\n                          >✔</span\r\n                        >At least 8 characters\r\n                      </li>\r\n                      <li>\r\n                        <span\r\n                          class=\"correctIcon\"\r\n                          [ngClass]=\"{\r\n                            changeBG: uppercase\r\n                          }\"\r\n                          >✔</span\r\n                        >At least One Capital Letter\r\n                      </li>\r\n                      <li>\r\n                        <span\r\n                          class=\"correctIcon\"\r\n                          [ngClass]=\"{\r\n                            changeBG: Number\r\n                          }\"\r\n                          >✔</span\r\n                        >At least One Numbers\r\n                      </li>\r\n                      <li>\r\n                        <span\r\n                          class=\"correctIcon\"\r\n                          [ngClass]=\"{\r\n                            changeBG: specialChar\r\n                          }\"\r\n                          >✔</span\r\n                        >At least One Special Character:!#$%^&*()_+.\r\n                      </li>\r\n                    </ul>\r\n                    <!-- <span id=\"length\"></span> -->\r\n                    <!-- <span id=\"upercase\">At least contain 1 upercase</span>\r\n                <span id=\"number\">At least contain 3 numbers</span> -->\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div class=\"label-div\">\r\n                <label class=\"form-label\" for=\"fromInput4\"\r\n                  >Confirm Password</label\r\n                >\r\n                <!-- <span class=\"p-viewer1\">\r\n              <fa-icon [icon]=\"faEye\"></fa-icon>\r\n            </span> -->\r\n                <input\r\n                  type=\"password\"\r\n                  class=\"form-input\"\r\n                  id=\"fromInput4\"\r\n                  formControlName=\"confirmPassword\"\r\n                  placeholder=\"********************\"\r\n                  [ngClass]=\"{\r\n                'is-invalid':\r\n                formSetNewPassword.controls.confirmPassword.touched &&\r\n                formSetNewPassword.controls.confirmPassword.errors,\r\n                'is-valid':\r\n                formSetNewPassword.controls.confirmPassword.touched &&\r\n                formSetNewPassword.controls.confirmPassword.errors == null ,\r\n                'is-touched':\r\n                formSetNewPassword.controls.confirmPassword.untouched &&\r\n                formSetNewPassword.controls.confirmPassword.errors == null,\r\n            }\"\r\n                />\r\n                @if (formSetNewPassword.controls.confirmPassword.touched &&\r\n                formSetNewPassword.controls.confirmPassword.errors) {\r\n                <div class=\"invalid-feedback\">\r\n                  @if\r\n                  (formSetNewPassword.controls.confirmPassword.errors['required'])\r\n                  {\r\n                  <p class=\"required\">Confirm Password is required</p>\r\n                  } @if\r\n                  (formSetNewPassword.controls.confirmPassword.errors['passwordMismatch'])\r\n                  {\r\n                  <p>Confirm Password does not match</p>\r\n                  }\r\n                </div>\r\n                }\r\n              </div>\r\n              <button type=\"submit\" [disabled]=\"formSetNewPassword.invalid\">\r\n                Reset password\r\n              </button>\r\n              <p class=\"info2\">\r\n                Dont't get the code ? <a>Resend</a> or\r\n                <a>call us</a>\r\n              </p>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-fcbe663f1f1679edc252bb4ccf3994c29004b82ddac1dab1e4f9d155d961afaaed80be3b8bf3d9a48ba46e35171b8741ceba13d94ec5cd8606f22bafa9ecb832",
            "file": "src/app/shared/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "darkMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "openDropdown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "sidebarToggler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "Dropdowntoggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showSublinks",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleAppearance",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "togglesidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { ActivatedRoute, RouterModule } from '@angular/router';\r\nimport { ToggleService } from '../../services/toggleBtn/toggle.service';\r\n\r\n@Component({\r\n  selector: 'app-sidebar',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterModule],\r\n  templateUrl: './sidebar.component.html',\r\n  styleUrl: './sidebar.component.css'\r\n})\r\nexport class SidebarComponent {\r\n\r\n  openDropdown!: Boolean;\r\n  active!: Boolean;\r\n  darkMode!: Boolean;\r\n  sidebarToggler!: Boolean;\r\n\r\n  constructor(private route: ActivatedRoute, private _Toggle: ToggleService) {\r\n    this.openDropdown = true;\r\n    this.darkMode = false;\r\n    this.sidebarToggler = false;\r\n  }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  togglesidebar() {\r\n    this._Toggle.toggle();\r\n    this.sidebarToggler = !this.sidebarToggler;\r\n  }\r\n\r\n\r\n  Dropdowntoggle() {\r\n    this.active = !this.active;\r\n  }\r\n\r\n  toggleAppearance() {\r\n    this.darkMode = !this.darkMode;\r\n  }\r\n\r\n  showSublinks(event: any) {\r\n    this.openDropdown = true;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.openDropdown = false;\r\n    console.log(this.openDropdown);\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./sidebar.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_Toggle",
                        "type": "ToggleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_Toggle",
                        "type": "ToggleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\r\n  class=\"container sidebar\"\r\n  [ngClass]=\"{ darkTheme: darkMode, 'sidebar-toggle': sidebarToggler }\"\r\n>\r\n  <div\r\n    [ngClass]=\"\r\n      sidebarToggler ? 'toggle-sidebar-btn-rotated' : 'toggle-sidebar-btn'\r\n    \"\r\n    (click)=\"togglesidebar()\"\r\n  >\r\n    <div class=\"arrow\">\r\n      <img src=\"assets/images/toggle-sidebar.svg\" alt=\"toggle-sidebar\" />\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"sidebar-top-section\">\r\n    <div\r\n      class=\"row sidebar-card\"\r\n      [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n    >\r\n      <div\r\n        class=\"col-12 sidebar-header\"\r\n        [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n      >\r\n        <div class=\"col-5\">\r\n          <div class=\"image\">\r\n            <img src=\"assets/images/Icon.png\" alt=\"Logo\" />\r\n          </div>\r\n        </div>\r\n        <div class=\"col-7 sidebar-header-content\">\r\n          <div class=\"title\">\r\n            <h4>CMS Software</h4>\r\n            <small>Manage your blog</small>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div\r\n      [ngClass]=\"{ row: sidebarToggler, 'sidebar-menu-row': !sidebarToggler }\"\r\n    >\r\n      <div\r\n        class=\"col-12 sidebar-menu\"\r\n        [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n      >\r\n        <h5>Home</h5>\r\n      </div>\r\n      <div class=\"col-12 main\">\r\n        <ul class=\"main-list\">\r\n          <li>\r\n            <a href=\"dashboard\">\r\n              <div>\r\n                <div class=\"icon\">\r\n                  <img src=\"assets/images/dashboard.svg\" alt=\"dashboard\" />\r\n                </div>\r\n                <div\r\n                  class=\"link-title\"\r\n                  [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n                >\r\n                  Dashboard\r\n                </div>\r\n              </div>\r\n            </a>\r\n          </li>\r\n          <li\r\n            [routerLink]=\"['/cms/blogs']\"\r\n            [routerLinkActive]=\"darkMode ? 'darkTheme_active' : 'active'\"\r\n          >\r\n            <a>\r\n              <div>\r\n                <div class=\"icon\">\r\n                  <img src=\"assets/images/blog-posts.svg\" alt=\"blog-posts\" />\r\n                </div>\r\n                <div\r\n                  class=\"link-title\"\r\n                  [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n                >\r\n                  Blog Posts\r\n                </div>\r\n              </div>\r\n            </a>\r\n          </li>\r\n          <li\r\n            [routerLink]=\"['/cms/media-management']\"\r\n            [routerLinkActive]=\"darkMode ? 'darkTheme_active' : 'active'\"\r\n          >\r\n            <a href=\"media\">\r\n              <div>\r\n                <div class=\"icon\">\r\n                  <img\r\n                    src=\"assets/images/media-management.svg\"\r\n                    alt=\"media-management\"\r\n                  />\r\n                </div>\r\n                <div\r\n                  class=\"link-title\"\r\n                  [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n                >\r\n                  Media Management\r\n                </div>\r\n              </div>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"seo\">\r\n              <div>\r\n                <div class=\"icon\">\r\n                  <img src=\"assets/images/seo.svg\" alt=\"seo\" />\r\n                </div>\r\n                <div\r\n                  class=\"link-title\"\r\n                  [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n                >\r\n                  SEO\r\n                </div>\r\n              </div>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"reporting an\">\r\n              <div>\r\n                <div class=\"icon\">\r\n                  <img src=\"assets/images/analytic.svg\" alt=\"report&analytic\" />\r\n                </div>\r\n                <div\r\n                  class=\"link-title\"\r\n                  [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n                >\r\n                  Report & analytic\r\n                </div>\r\n              </div>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"comments\">\r\n              <div>\r\n                <div class=\"icon\">\r\n                  <img src=\"assets/images/comments.svg\" alt=\"comments\" />\r\n                </div>\r\n                <div\r\n                  class=\"link-title\"\r\n                  [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n                >\r\n                  Comments\r\n                </div>\r\n              </div>\r\n            </a>\r\n          </li>\r\n          <li\r\n            (click)=\"Dropdowntoggle()\"\r\n            [routerLinkActive]=\"darkMode ? 'darkTheme_active' : 'active'\"\r\n          >\r\n            <div class=\"drop-down\">\r\n              <div>\r\n                <div class=\"icon\">\r\n                  @if (darkMode) {\r\n                  <img src=\"assets/images/profile-circle.svg\" alt=\"profile\" />\r\n                  } @else{\r\n                  <img\r\n                    src=\"assets/images/profile-circle-dark.svg\"\r\n                    alt=\"profile\"\r\n                  />\r\n                  }\r\n                </div>\r\n                <div\r\n                  class=\"link-title\"\r\n                  [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n                >\r\n                  <div>User Management</div>\r\n                </div>\r\n              </div>\r\n\r\n              <div [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\">\r\n                @if(darkMode){\r\n                <img\r\n                  [ngClass]=\"{\r\n                    rotate: active,\r\n                    'reverse-rotate': !active\r\n                  }\"\r\n                  src=\"assets/images/angle-up-solid-dark.svg\"\r\n                  alt=\"up-arrow\"\r\n                />} @else{\r\n                <img\r\n                  [ngClass]=\"{\r\n                    rotate: active,\r\n                    'reverse-rotate': !active\r\n                  }\"\r\n                  src=\"assets/images/up-arrow.svg\"\r\n                  alt=\"up-arrow\"\r\n                />\r\n                } @if(active && !sidebarToggler){\r\n                <div class=\"sub-links\">\r\n                  <ul>\r\n                    <li\r\n                      [routerLink]=\"['/cms/management/users']\"\r\n                      routerLinkActive=\"active-sublink\"\r\n                      (click)=\"Dropdowntoggle()\"\r\n                    >\r\n                      <a> Manage Users </a>\r\n                    </li>\r\n                    <li\r\n                      [routerLink]=\"['/cms/management/roles']\"\r\n                      routerLinkActive=\"active-sublink\"\r\n                      (click)=\"[Dropdowntoggle(), showSublinks(3)]\"\r\n                    >\r\n                      <a>Manage Roles</a>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n                }\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"sidebar-bottom-section\">\r\n    <div class=\"row\">\r\n      <div\r\n        class=\"col-12 sidebar-menu\"\r\n        [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n      >\r\n        <h5>Pages</h5>\r\n      </div>\r\n      <div class=\"col-12 sidebar-menu-links\">\r\n        <ul>\r\n          <li>\r\n            <a href=\"dashboard\">\r\n              <div>\r\n                <div class=\"icon\">\r\n                  <img src=\"assets/images/settings.svg\" alt=\"settings\" />\r\n                </div>\r\n                <div\r\n                  class=\"link-title\"\r\n                  [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n                >\r\n                  Settings\r\n                </div>\r\n              </div>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"blogpost\">\r\n              <div>\r\n                <div class=\"icon\">\r\n                  <img src=\"assets/images/help-center.svg\" alt=\"help-center\" />\r\n                </div>\r\n                <div\r\n                  class=\"link-title\"\r\n                  [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n                >\r\n                  Help Center\r\n                </div>\r\n              </div>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n\r\n    <div\r\n      class=\"row sidebar-card\"\r\n      [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n    >\r\n      <div\r\n        class=\"col-12 dark-mode\"\r\n        [ngClass]=\"{ hide: sidebarToggler, show: !sidebarToggler }\"\r\n      >\r\n        <div class=\"dark-mode-section\">\r\n          <div class=\"dark-mode-icon\">\r\n            <img src=\"assets/images/moon.svg\" alt=\"moon\" />\r\n          </div>\r\n          <div class=\"link-title\">Dark Mode</div>\r\n        </div>\r\n        <div class=\"toggle\">\r\n          <div class=\"toggle\">\r\n            <label class=\"switch\">\r\n              <input (click)=\"toggleAppearance()\" type=\"checkbox\" />\r\n              <span class=\"slider round\"></span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SigninComponent",
            "id": "component-SigninComponent-2933a7d5f4cf1453daefcf44da2e29dd107912c8e1e3c964de82d684d4edea044d349d4de0a96b45644b3005dfe97bc248376940c1803d40350144e3e180279a",
            "file": "src/app/components/Authentication/signin/signin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signin",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./signin.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "eyeshow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "formInfo",
                    "defaultValue": "new FormGroup({\r\n    email: new FormControl(''),\r\n    password: new FormControl(''),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "Index",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "Number",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "numberLength",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "passwordHint",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "signInRequest",
                    "defaultValue": "{} as ILogin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILogin",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "specialChar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "uppercase",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "Submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, DoCheck, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { ILogin } from '../../../interfaces/logininterface';\r\n\r\n@Component({\r\n  selector: 'app-signin',\r\n  standalone: true,\r\n  imports: [RouterModule, FormsModule, ReactiveFormsModule, CommonModule],\r\n  templateUrl: './signin.component.html',\r\n  styleUrl: './signin.component.css',\r\n  animations: [\r\n    trigger('flipInOut', [\r\n      transition(':enter', [\r\n        animate('1s', style({ transform: 'rotateY(0deg)' })),\r\n      ]),\r\n      transition(':leave', [\r\n        animate('1s', style({ transform: 'rotateY(180deg)' })),\r\n      ]),\r\n    ]),\r\n  ],\r\n})\r\nexport class SigninComponent implements OnInit, DoCheck {\r\n\r\n  Index: number = 1;\r\n  submitted: boolean = false;\r\n  passwordHint: boolean = false;\r\n  eyeshow: boolean = false;\r\n  uppercase: boolean = false;\r\n  specialChar: boolean = false;\r\n  Number: boolean = false;\r\n  numberLength: boolean = false;\r\n  signInRequest : ILogin = {} as ILogin;\r\n\r\n\r\n  constructor(private formBuilder: FormBuilder, private _authService: AuthService, private _Router: Router) { }\r\n\r\n  formInfo = new FormGroup({\r\n    email: new FormControl(''),\r\n    password: new FormControl(''),\r\n  });\r\n\r\n\r\n  // validateAreEqual(pass:string , confimPass:string) {\r\n  //   return (group:FormGroup) => {\r\n  //     const password = group.controls[pass];\r\n  //     const confimPassword = group.controls[confimPass];\r\n  //     if(password.value !== confimPassword.value){\r\n  //       confimPassword.setErrors({passwordMismatch: true});\r\n  //     }\r\n  //   }\r\n  // }\r\n  // match(){\r\n  //   if(this.formInfo.controls.password.value == this.formSetNewPassword.controls.confirmPassword.value){\r\n  //     return true;\r\n  //   }else{\r\n  //     return false;\r\n  //   }\r\n  // }\r\n  ngDoCheck(): void { }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.formInfo = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: [\r\n        '',\r\n        [\r\n          Validators.required,\r\n        ],\r\n      ],\r\n\r\n    });\r\n  }\r\n\r\n\r\n  Submit() { //login\r\n    this.submitted = true;\r\n    if (this.formInfo.invalid) {\r\n      console.log(this.formInfo);\r\n      return;\r\n    }\r\n    const fv = this.formInfo.value!;\r\n    this.signInRequest = {\r\n      email :fv.email?.toString()??'',\r\n      password :fv.password?.toString()??'',\r\n    }\r\n\r\n    this._authService.Login(this.signInRequest).subscribe({\r\n      next: (res) => {\r\n        this._Router.navigateByUrl('/home');\r\n      },\r\n      error: (err) => {\r\n        console.log(err);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  // resetSubmit() { // send mail\r\n  //   if (this.formSendMail.invalid) {\r\n  //     console.log(this.formInfo);\r\n  //     return;\r\n  //   }\r\n  //   this.showVerification();\r\n  //   this._authService.signIn(this.formSendMail.value).subscribe((response) => {\r\n  //     if (response.message == 'success') {\r\n  //       localStorage.setItem('token',response.token);\r\n  //       this.showVerification();\r\n  //     }else{\r\n  //       alert(response.message);\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // verificationSubmit() { // send mail\r\n  //   if (this.formVerification.invalid) {\r\n  //     console.log(this.formVerification);\r\n  //     return;\r\n  //   }\r\n  //   this.showSetNewPass();\r\n  //   this._authService.signIn(this.formVerification.value).subscribe((response) => {\r\n  //     if (response.message == 'success') {\r\n  //       localStorage.setItem('token',response.token);\r\n  //       this.showSetNewPass();\r\n  //     }else{\r\n  //       alert(response.message);\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // setNewPassword(){\r\n  //   if (this.formSetNewPassword.invalid) {\r\n  //     console.log(this.formSetNewPassword);\r\n  //     return;\r\n  //   }\r\n  //   this.showChangePass()\r\n  //   this._authService.signIn(this.formSetNewPassword.value).subscribe((response) => {\r\n  //     if (response.message == 'success') {\r\n  //       localStorage.setItem('token',response.token);\r\n  //       this.showChangePass();\r\n  //     }else{\r\n  //       alert(response.message);\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // flipCotainer = document.getElementById('loginContainerId');\r\n  // loginCotainerId = document.getElementById('loginContainerId');\r\n  // resetCotainerId = document.getElementById('resetContainerId');\r\n  // showForgetPassForm() {\r\n  //   document.getElementById('resetContainerId')?.classList.add('flip-out');\r\n  // flipCotainer?.s\r\n  // this.flipCotainer?.classList.add('flip');\r\n  // this.loginCotainerId?.style.display != 'none';\r\n  // this.resetCotainerId?.style.display != 'block';\r\n  // console.log('flip');\r\n  // this.Index = 2 ;\r\n  // }\r\n\r\n  // showLoginin(){\r\n\r\n  //   this.Index = 1 ;\r\n  // }\r\n  // showVerification(){\r\n  //   this.Index = 3;\r\n  // }\r\n  // showSetNewPass(){\r\n  //   this.Index = 4;\r\n  // }\r\n  // showChangePass(){\r\n  //   this.Index = 5;\r\n  // }\r\n  // showLogout(){\r\n  //   this.Index = 6;\r\n  // }\r\n\r\n\r\n  // test() {\r\n  //   this.passwordHint = !this.passwordHint;\r\n  //   console.log(this.passwordHint);\r\n  // }\r\n\r\n  // eyeShow() {\r\n  //   this.eyeshow = !this.eyeshow;\r\n  // }\r\n}\r\n",
            "styleUrl": "./signin.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "DoCheck"
            ],
            "templateData": "<!DOCTYPE html>\r\n<div class=\"container\">\r\n  <div class=\"projName\">\r\n    <div class=\"nameContainer\">\r\n      <div><img src=\"../../../assets/images/Icon.png\" alt=\"Logo\" /></div>\r\n      <div class=\"projNDiv\"><p class=\"Name\">CMS Software</p></div>\r\n    </div>\r\n\r\n    <div class=\"selDiv\">\r\n      <select name=\"language\">\r\n        <option value=\"en\">English</option>\r\n        <option value=\"en\">Arabic</option>\r\n      </select>\r\n    </div>\r\n  </div>\r\n\r\n  <div\r\n    class=\"container1\"\r\n    [ngClass]=\"{ 'flip-out': Index == 2, 'flip-in': Index == 1 }\"\r\n    [ngClass]=\"{ 'flip-out': Index == 3, 'flip-in': Index == 4 }\"\r\n    [ngClass]=\"{ 'flip-out': Index == 5, 'flip-in': Index == 6 }\"\r\n\r\n  >\r\n\r\n    <div class=\"loginContainer\" id=\"loginContainerId\" [@flipInOut]>\r\n      <div class=\"bg\">\r\n        <div class=\"loginDiv\">\r\n          <h1>\r\n            Welcome! 👋\r\n            <!-- <i class=\"fa-solid fa-hand fa-flip-horizontal fa-lg\" style=\"color: #FFD43B;\"></i> -->\r\n          </h1>\r\n          <p class=\"info1\">Login in to your CMS System account</p>\r\n          <div>\r\n            <form\r\n              action=\"\"\r\n              [formGroup]=\"formInfo\"\r\n              (ngSubmit)=\"Submit()\"\r\n              #form=\"ngForm\"\r\n            >\r\n              <div>\r\n                <label class=\"form-label\" for=\"fromInput2\">Email</label>\r\n                <input\r\n                  type=\"email\"\r\n                  class=\"form-input\"\r\n                  id=\"fromInput2\"\r\n                  placeholder=\"i.e. Haitham.mo@company.com\"\r\n                  formControlName=\"email\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid':\r\n                      formInfo.controls.email.touched &&\r\n                      formInfo.controls.email.errors\r\n                  }\"\r\n                />\r\n                @if (formInfo.controls.email.touched &&\r\n                formInfo.controls.email.errors) {\r\n                <div class=\"invalid-feedback\">\r\n                  @if (formInfo.controls.email.errors['required']) {\r\n                  <p>Email is required</p>\r\n                  } @if (formInfo.controls.email.errors['email']) {\r\n                  <p>Email is invalid</p>\r\n                  }\r\n                </div>\r\n                }\r\n              </div>\r\n              <div class=\"label-div\">\r\n                <label class=\"form-label\" for=\"fromInput3\">Password</label>\r\n                <input\r\n                  type=\"password\"\r\n                  class=\"form-input\"\r\n                  id=\"fromInput3\"\r\n                  placeholder=\"********************\"\r\n                  formControlName=\"password\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid':\r\n                      formInfo.controls.password.touched &&\r\n                      formInfo.controls.password.errors\r\n                  }\"\r\n                />\r\n                @if (formInfo.controls.password.touched &&\r\n                formInfo.controls.password.errors) {\r\n                <div class=\"invalid-feedback\">\r\n                \r\n                </div>\r\n                }\r\n              </div>\r\n              <div class=\"checkbox\">\r\n                <div style=\"display: flex; align-items: center;\">\r\n                  <input type=\"checkbox\" id=\"checkbox\" name=\"checkbox\" />\r\n                  <label for=\"checkbox\" id=\"checkLabel\">Remember me</label>\r\n                </div>\r\n                <!-- <label style=\"display: inline; border: 1px solid #BFD4E466; width: 18px; height: 18px;\"></label> -->\r\n                \r\n                <a routerLink=\"/sendmail\"><p>Forget password?</p></a>\r\n              </div>\r\n              <button type=\"submit\" [disabled]=\"!form.valid\">LOG IN</button>\r\n              <p class=\"info2\">\r\n                Dont't have an account? <a routerLink=\"/signup\">Register</a>\r\n              </p>\r\n              <!-- <input type=\"submit\"> -->\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n\r\n     <!-- @if (Index == 2) { -->\r\n    <!-- <div class=\"resetContainer\" id=\"resetContainerId\">\r\n      <div class=\"bg2\">\r\n        <div class=\"resetDiv\">\r\n          <form action=\"\" [formGroup]=\"formSendMail\" (ngSubmit)=\"resetSubmit()\" #resetform=\"ngForm\">\r\n            <div>\r\n              <h1>Forget Password</h1>\r\n              <p class=\"info1\">\r\n                Enter your email , send link to reset password\r\n              </p>\r\n            </div>\r\n            <div>\r\n              <label class=\"form-label\" for=\"fromInput2\">Email:</label>\r\n              <input\r\n                type=\"email\"\r\n                class=\"form-input\"\r\n                id=\"fromInput2\"\r\n                placeholder=\"i.e. Haitham.mo@company.com\"\r\n                formControlName=\"forgetEmail\"\r\n                [ngClass]=\"{\r\n                  'is-invalid':\r\n                    formSendMail.controls.forgetEmail.touched &&\r\n                    formSendMail.controls.forgetEmail.errors\r\n                }\"\r\n              />\r\n              @if (formSendMail.controls.forgetEmail.touched &&\r\n              formSendMail.controls.forgetEmail.errors) {\r\n              <div class=\"invalid-feedback\">\r\n                @if (formSendMail.controls.forgetEmail.errors['required']) {\r\n                <p>Email is required</p>\r\n                } @if (formSendMail.controls.forgetEmail.errors['email']) {\r\n                <p>invalid email. please verify agian</p>\r\n                }\r\n              </div>\r\n              }\r\n            </div>\r\n            <button\r\n              type=\"submit\"\r\n              [disabled]=\"formSendMail.invalid\"\r\n            >\r\n              Reset password\r\n            </button>\r\n            <p class=\"info2\">\r\n              Did you remember your password?\r\n              <a (click)=\"showLoginin()\">LOG IN</a>\r\n            </p>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div> -->\r\n    <!-- } @if (Index==3) { -->\r\n    <!-- <div class=\"loginContainer\" id=\"loginContainerId\">\r\n      <div class=\"bg3\">\r\n        <div style=\"text-align: center\" class=\"loginDiv\">\r\n          <h1>Email Verification</h1>\r\n          <p class=\"info1\">We sent OTP code to</p>\r\n          <img\r\n            style=\"margin-left: auto; margin-right: auto\"\r\n            src=\"../../../assets/images/smartphone.svg\"\r\n            alt=\"OTP photo\"\r\n          />\r\n          <div>\r\n            <form\r\n              action=\"\"\r\n              [formGroup]=\"formVerification\"\r\n              (ngSubmit)=\"verificationSubmit()\"\r\n              #form=\"ngForm\"\r\n            >\r\n              <div>\r\n                <label for=\"verificationCode\" class=\"labelInput\"\r\n                  >Type your 6 digit security code</label\r\n                ><br />\r\n                <div class=\"verificationInpts\">\r\n                  <input\r\n                    type=\"number\"\r\n                    maxlength=\"1\"\r\n                    minlength=\"1\"\r\n                    class=\"inputVerificationStyle\"\r\n                    id=\"verificationCode\"\r\n                    formControlName=\"verificationCode1\"\r\n                    [ngClass]=\"{\r\n                      'is-invalid':\r\n                        formVerification.controls.verificationCode1.touched &&\r\n                        formVerification.controls.verificationCode1.errors\r\n                    }\"\r\n\r\n                  />\r\n                  <input\r\n                    type=\"number\"\r\n                    maxlength=\"1\"\r\n                    minlength=\"1\"\r\n                    class=\"inputVerificationStyle\"\r\n                    id=\"verificationNum\"\r\n\r\n                    formControlName=\"verificationCode2\"\r\n                    [ngClass]=\"{\r\n                      'is-invalid':\r\n                      formVerification.controls.verificationCode2.touched &&\r\n                      formVerification.controls.verificationCode2.errors\r\n                    }\"\r\n                  />\r\n                  <input\r\n                    type=\"number\"\r\n                    maxlength=\"1\"\r\n                    minlength=\"1\"\r\n                    class=\"inputVerificationStyle\"\r\n                    id=\"verificationNum\"\r\n\r\n                    formControlName=\"verificationCode3\"\r\n                    [ngClass]=\"{\r\n                      'is-invalid':\r\n                        formVerification.controls.verificationCode3.touched &&\r\n                        formVerification.controls.verificationCode3.errors\r\n                    }\"\r\n                  />\r\n                  <input\r\n                    type=\"number\"\r\n                    maxlength=\"1\"\r\n                    minlength=\"1\"\r\n                    class=\"inputVerificationStyle\"\r\n                    id=\"verificationNum\"\r\n\r\n                    formControlName=\"verificationCode4\"\r\n                    [ngClass]=\"{\r\n                      'is-invalid':\r\n                        formVerification.controls.verificationCode4.touched &&\r\n                        formVerification.controls.verificationCode4.errors\r\n                    }\"\r\n                  />\r\n                  <input\r\n                    type=\"number\"\r\n                    maxlength=\"1\"\r\n                    minlength=\"1\"\r\n                    class=\"inputVerificationStyle\"\r\n                    id=\"verificationNum\"\r\n\r\n                    formControlName=\"verificationCode5\"\r\n                    [ngClass]=\"{\r\n                      'is-invalid':\r\n                        formVerification.controls.verificationCode5.touched &&\r\n                        formVerification.controls.verificationCode5.errors\r\n                    }\"\r\n                  />\r\n                  <input\r\n                    type=\"number\"\r\n                    maxlength=\"1\"\r\n                    minlength=\"1\"\r\n                    class=\"inputVerificationStyle\"\r\n                    id=\"verificationNum\"\r\n\r\n                    formControlName=\"verificationCode6\"\r\n                    [ngClass]=\"{\r\n                      'is-invalid':\r\n                        formVerification.controls.verificationCode6.touched &&\r\n                        formVerification.controls.verificationCode6.errors\r\n                    }\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <button\r\n                type=\"submit\"\r\n\r\n              >\r\n                Reset password\r\n              </button>\r\n              <p class=\"info2\">\r\n                Dont't get the code ? <a routerLink=\"/signup\">Resend</a> or\r\n                <a routerLink=\"/signup\">call us</a>\r\n              </p>\r\n\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div> -->\r\n    <!-- } @if (Index == 4) { -->\r\n    <!-- <div class=\"loginContainer\" id=\"loginContainerId\">\r\n      <div class=\"bg3\">\r\n        <div class=\"loginDiv\">\r\n          <h1>Set a new password</h1>\r\n          <p class=\"info1\">\r\n            New password must be different from your previous passwords\r\n          </p>\r\n          <div>\r\n            <form action=\"\" [formGroup]=\"formSetNewPassword\" (ngSubmit)=\"setNewPassword()\" #setnewpassform=\"ngForm\">\r\n              <div class=\"label-div\">\r\n                <label class=\"form-label\" for=\"fromInput3\">Password</label>\r\n                <input\r\n                  type=\"password\"\r\n                  class=\"form-input passwordCheck\"\r\n                  id=\"fromInput3\"\r\n                  placeholder=\"********************\"\r\n                  formControlName=\"password\"\r\n                  [ngClass]=\"{\r\n                      'is-invalid':\r\n                      formSetNewPassword.controls.password.touched &&\r\n                      formSetNewPassword.controls.password.errors,\r\n                      'is-valid':\r\n                      formSetNewPassword.controls.password.touched &&\r\n                      formSetNewPassword.controls.password.errors == null ,\r\n                      'is-touched':\r\n                      formSetNewPassword.controls.password.untouched &&\r\n                      formSetNewPassword.controls.password.errors == null,\r\n                  }\"\r\n                  (focusin)=\"test()\"\r\n                  (focusout)=\"test()\"\r\n                />\r\n\r\n                <br />\r\n                <div class=\"passwordCheckContainer\">\r\n                  <div class=\"invalid-feedback\" [hidden]=\"!passwordHint\">\r\n                    <div class=\"strongth-password\">\r\n                      @if(formSetNewPassword.controls.password.value!.length < 6 ||\r\n                      formSetNewPassword.controls.password.value!.length >= 6 &&\r\n                      formSetNewPassword.controls.password.errors){\r\n                      <div class=\"bar\" id=\"week\"></div>\r\n                      <div class=\"bar\" id=\"mediumH\"></div>\r\n                      <div class=\"bar\" id=\"strongH\"></div>\r\n\r\n                      } @if(formSetNewPassword.controls.password.value!.length >= 6 &&\r\n                      formSetNewPassword.controls.password.value!.length < 15 &&\r\n                      formSetNewPassword.controls.password.errors==null){\r\n                      <div class=\"bar\" id=\"mediumS\"></div>\r\n                      <div class=\"bar\" id=\"medium\" #medium></div>\r\n                      <div class=\"bar\" id=\"strongH\"></div>\r\n\r\n                      } @if(formSetNewPassword.controls.password.value!.length >= 15 &&\r\n                      formSetNewPassword.controls.password.errors==null){\r\n                      <div class=\"bar\" id=\"weekH\"></div>\r\n                      <div class=\"bar\" id=\"strongS\" #medium></div>\r\n                      <div class=\"bar\" id=\"strong\" #strong></div>\r\n\r\n                      }\r\n                    </div>\r\n                  </div>\r\n                  <p\r\n                    id=\"passHint\"\r\n                    [ngClass]=\"{ show: passwordHint }\"\r\n                    [ngClass]=\"{ hide: passwordHint }\"\r\n                  >\r\n                    Password hint : 8 characters minimum\r\n                  </p>\r\n                  <div\r\n                    style=\"\r\n                      display: flex;\r\n                      align-items: center;\r\n                      justify-content: space-around;\r\n                    \"\r\n                  >\r\n                    <div style=\"margin-right: 5px\" [hidden]=\"!passwordHint\">\r\n                      @if(formSetNewPassword.controls.password.value!.length < 6 ||\r\n                      formSetNewPassword.controls.password.value!.length >= 6 &&\r\n                      formSetNewPassword.controls.password.errors){\r\n                      <p class=\"passCheckWord\">Password: Week</p>\r\n                      } @if(formSetNewPassword.controls.password.value!.length >= 6 &&\r\n                      formSetNewPassword.controls.password.value!.length < 15 &&\r\n                      formSetNewPassword.controls.password.errors==null){\r\n                      <p class=\"passCheckWord\">Password: Meduim</p>\r\n                      } @if(formSetNewPassword.controls.password.value!.length >= 15 &&\r\n                      formSetNewPassword.controls.password.errors==null){\r\n                      <p class=\"passCheckWord\">Password: Strong</p>\r\n                      }\r\n                    </div>\r\n                    <button class=\"tooltip\">\r\n                      !\r\n                      <ul class=\"tooltiptext\">\r\n                        Your Password Must Contain:\r\n                        <li>\r\n                          <span\r\n                            class=\"correctIcon\"\r\n                            [ngClass]=\"{\r\n                              changeBG: numberLength\r\n                            }\"\r\n                            >✔</span\r\n                          >At least 8 characters\r\n                        </li>\r\n                        <li>\r\n                          <span\r\n                            class=\"correctIcon\"\r\n                            [ngClass]=\"{\r\n                              changeBG: uppercase\r\n                            }\"\r\n                            >✔</span\r\n                          >At least One Capital Letter\r\n                        </li>\r\n                        <li>\r\n                          <span\r\n                            class=\"correctIcon\"\r\n                            [ngClass]=\"{\r\n                              changeBG: Number\r\n                            }\"\r\n                            >✔</span\r\n                          >At least One Numbers\r\n                        </li>\r\n                        <li>\r\n                          <span\r\n                            class=\"correctIcon\"\r\n                            [ngClass]=\"{\r\n                              changeBG: specialChar\r\n                            }\"\r\n                            >✔</span\r\n                          >At least One Special Character:!#$%^&*()_+.\r\n                        </li>\r\n                      </ul>\r\n\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              <div class=\"label-div\">\r\n                <label class=\"form-label\" for=\"fromInput4\">Confirm Password</label>\r\n                <input\r\n                  type=\"password\"\r\n                  class=\"form-input\"\r\n                  id=\"fromInput4\"\r\n                  formControlName=\"confirmPassword\"\r\n                  placeholder=\"********************\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid':\r\n                    formSetNewPassword.controls.confirmPassword.touched &&\r\n                    formSetNewPassword.controls.confirmPassword.errors,\r\n                    'is-valid':\r\n                    formSetNewPassword.controls.confirmPassword.touched &&\r\n                    formSetNewPassword.controls.confirmPassword.errors == null ,\r\n                    'is-touched':\r\n                    formSetNewPassword.controls.confirmPassword.untouched &&\r\n                    formSetNewPassword.controls.confirmPassword.errors == null,\r\n                }\"\r\n                />\r\n                @if (formSetNewPassword.controls.confirmPassword.touched &&\r\n                formSetNewPassword.controls.confirmPassword.errors) {\r\n                <div class=\"invalid-feedback\">\r\n                  @if (formSetNewPassword.controls.confirmPassword.errors['required']) {\r\n                  <p class=\"required\">Confirm Password is required</p>\r\n                  } @if (formSetNewPassword.controls.confirmPassword.errors['passwordMismatch']) {\r\n                  <p>Confirm Password does not match</p>\r\n                  }\r\n                </div>\r\n                }\r\n              </div>\r\n              <button\r\n                type=\"submit\"\r\n                [disabled]=\"formSetNewPassword.invalid\"\r\n\r\n              >\r\n                Reset password\r\n              </button>\r\n              <p class=\"info2\">\r\n                Dont't get the code ? <a>Resend</a> or\r\n                <a>call us</a>\r\n              </p>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div> -->\r\n    <!-- } -->\r\n    <!-- @if (Index == 5) {\r\n    <div class=\"loginContainer\" id=\"loginContainerId\">\r\n      <div class=\"bg3\">\r\n        <div class=\"loginDiv\">\r\n          <div style=\"padding-top: 250px\">\r\n            <h1>Password Changed</h1>\r\n            <p class=\"info1\">Your password has been changed</p>\r\n            <button (click)=\"showLogout()\">LOG IN</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    } -->\r\n    <!-- @if (Index == 6) {\r\n    <div class=\"loginContainer\" id=\"loginContainerId\">\r\n      <div>\r\n        <div class=\"loginDiv1\">\r\n          <div style=\"text-align: center\">\r\n            <img src=\"../../../assets/images/Object.svg\" alt=\"Logout\" />\r\n            <h1 class=\"logout\">You have logout</h1>\r\n            <p class=\"info1\">Redirecting in 5 seconds</p>\r\n            <p>Go to <a (click)=\"showLoginin()\">Login</a></p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    } -->\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SignupComponent",
            "id": "component-SignupComponent-26e611b3d001db410bd68bca3897a6a29d0baef6d0aed919fe4e8c608cfa4f0fb968d528d0f9084846add01c0c492fe6c09673c332e1d534aceb4a6eaecc7fc0",
            "file": "src/app/components/Authentication/signup/signup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signup",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./signup.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "eyeshow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "faEye",
                    "defaultValue": "faEye",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "faFacebook",
                    "defaultValue": "faFacebook",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "faGoogle",
                    "defaultValue": "faGoogle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "filmIcon",
                    "defaultValue": "faFilm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "formInfo",
                    "defaultValue": "new FormGroup({\r\n    fullName: new FormControl(''),\r\n    email: new FormControl(''),\r\n    password: new FormControl(''),\r\n    confirmPassword: new FormControl(''),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "Number",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "numberLength",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "passwordHint",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "signUpRequest",
                    "defaultValue": "{} as ISignupRequest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISignupRequest",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "slides",
                    "defaultValue": "[\r\n    '../../../assets/images/illustration.png',\r\n    '../../../assets/images/Frame 1000016152.svg',\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 161,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "slidIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 159
                },
                {
                    "name": "specialChar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "uppercase",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "methodsClass": [
                {
                    "name": "currentSlide",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "eyeShow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showSlides",
                    "args": [
                        {
                            "name": "i",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.slidIndex"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.slidIndex",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "Submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "test",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validateAreEqual",
                    "args": [
                        {
                            "name": "pass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "confimPass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(group: FormGroup) => void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "confimPass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressBar"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  AfterViewInit,\r\n  Component,\r\n  DoCheck,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { faFilm, faEye } from '@fortawesome/free-solid-svg-icons';\r\nimport { faFacebook, faGoogle } from '@fortawesome/free-brands-svg-icons';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { MatProgressBar } from '@angular/material/progress-bar';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\nimport { ISignupRequest } from '../../../interfaces/signupinterface';\r\n\r\n@Component({\r\n  selector: 'app-signup',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    FontAwesomeModule,\r\n    RouterModule,\r\n    MatProgressBar,\r\n\r\n  ],\r\n  templateUrl: './signup.component.html',\r\n  styleUrl: './signup.component.css',\r\n  animations: [\r\n    trigger('flipInOut', [\r\n      transition(':enter', [\r\n        animate('1s', style({ transform: 'rotateY(90deg)' })),\r\n      ]),\r\n      transition(':leave', [\r\n        animate('1s', style({ transform: 'rotateY(180deg)' })),\r\n      ]),\r\n    ]),\r\n  ],\r\n})\r\nexport class SignupComponent implements OnInit, DoCheck, AfterViewInit {\r\n  [x: string]: any;\r\n  filmIcon = faFilm;\r\n  faFacebook = faFacebook;\r\n  faGoogle = faGoogle;\r\n  faEye = faEye;\r\n  submitted = false;\r\n  passwordHint: boolean = false;\r\n  eyeshow: boolean = false;\r\n  uppercase: boolean = false;\r\n  specialChar: boolean = false;\r\n  Number: boolean = false;\r\n  numberLength: boolean = false;\r\n  signUpRequest:ISignupRequest= {} as ISignupRequest;\r\n\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private _authService: AuthService,\r\n    private _Router: Router\r\n  ) { }\r\n\r\n  ngAfterViewInit(): void { }\r\n\r\n  ngDoCheck(): void {\r\n    this.numberLength = /.{8,}/.test(this.formInfo.controls.password.value!);\r\n    this.uppercase = /[A-Z]/.test(this.formInfo.controls.password.value!);\r\n    this.specialChar = /[#?!@$%^&*-]/.test(\r\n      this.formInfo.controls.password.value!\r\n    );\r\n    this.Number = /[0-9]/.test(this.formInfo.controls.password.value!);\r\n  }\r\n\r\n  formInfo = new FormGroup({\r\n    fullName: new FormControl(''),\r\n    email: new FormControl(''),\r\n    password: new FormControl(''),\r\n    confirmPassword: new FormControl(''),\r\n  });\r\n  validateAreEqual(pass: string, confimPass: string) {\r\n    return (group: FormGroup) => {\r\n      const password = group.controls[pass];\r\n      const confimPassword = group.controls[confimPass];\r\n      if (password.value !== confimPassword.value) {\r\n        confimPassword.setErrors({ passwordMismatch: true });\r\n      }\r\n    };\r\n  }\r\n\r\n  // match() {\r\n  //   if (\r\n  //     this.formInfo.controls.password.value ===\r\n  //     this.formInfo.controls.confirmPassword.value\r\n  //   ) {\r\n  //     return true;\r\n  //   } else {\r\n  //     return false;\r\n  //   }\r\n  // }\r\n\r\n  ngOnInit(): void {\r\n    this.formInfo = this.formBuilder.group(\r\n      {\r\n        fullName: [\r\n          '',\r\n          [\r\n            Validators.required,\r\n            Validators.minLength(4),\r\n            Validators.maxLength(16),\r\n          ],\r\n        ],\r\n        email: ['', [Validators.required, Validators.email]],\r\n        password: [\r\n          '',\r\n          [\r\n            Validators.required,\r\n            Validators.maxLength(40),\r\n            Validators.minLength(6),\r\n            Validators.pattern(\r\n              '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$'\r\n            ),\r\n          ],\r\n        ],\r\n        confirmPassword: ['', [Validators.required]],\r\n      },\r\n      { validator: this.validateAreEqual('password', 'confirmPassword') }\r\n    );\r\n\r\n    // const password = document.getElementsByClassName('passwordCheck');\r\n\r\n    // const mediumBar = document.getElementById('medium');\r\n    // const strongBar = document.getElementById('strong');\r\n\r\n    // if (password?.length < 5) {\r\n    //   document.getElementById('week')!.style.flexGrow = '1';\r\n    //   document.getElementById('medium')!.style.flexGrow = 'none';\r\n    //   document.getElementById('strong')!.style.flexGrow = 'none';\r\n    //   console.log(password.length);\r\n    // } else if (password.length > 5 && password.length < 15) {\r\n    //   document.getElementById('week')!.style.flexGrow = 'none';\r\n    //   document.getElementById('medium')!.style.flexGrow = '1';\r\n    //   document.getElementById('strong')!.style.flexGrow = 'none';\r\n    // } else if (password.length > 15) {\r\n    //   document.getElementById('week')!.style.flexGrow = 'none';\r\n    //   document.getElementById('medium')!.style.flexGrow = 'none';\r\n    //   document.getElementById('strong')!.style.flexGrow = '1';\r\n    // }\r\n  }\r\n\r\n  slidIndex: number = 0;\r\n\r\n  public slides: string[] = [\r\n    '../../../assets/images/illustration.png',\r\n    '../../../assets/images/Frame 1000016152.svg',\r\n  ];\r\n  \r\n  Submit() {\r\n    //this.submitted = true;\r\n    if (this.formInfo.invalid) {\r\n      console.log(this.formInfo);\r\n      return;\r\n    }\r\n    const fv = this.formInfo.value!;\r\n    this.signUpRequest = {\r\n      fullName :fv.fullName?.toString()??'',\r\n      email :fv.email?.toString()??'',\r\n      password :fv.password?.toString()??'',\r\n      confirmPassword :fv.confirmPassword?.toString()??''\r\n    }\r\n    console.log(fv);\r\n    this._authService.signUp(this.signUpRequest).subscribe({\r\n      next:(res)=>{\r\n        console.log(res);\r\n        sessionStorage.setItem('token' , res.token);\r\n        sessionStorage.setItem('email' , res.email);\r\n        this._Router.navigateByUrl('/signupverification');\r\n        // this._authService.setTokenInSessionStorage(res['token']);\r\n      },\r\n      error: (err) => {\r\n        console.log(err);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  showSlides(i = this.slidIndex) {\r\n    //   let i = 0;\r\n    //   const slideId = document.getElementById('mySlide');\r\n    //   const slides =document.getElementsByClassName('mySlides');\r\n    //   const dots = document.getElementsByClassName('dot');\r\n    //   if(n > slides.length){\r\n    //     this.slidIndex = 1\r\n    //   }\r\n    //   if(n < slides.length){\r\n    //     this.slidIndex = slides.length;\r\n    //   }\r\n    //   for(i=0;i < slides.length ; i++){\r\n    //     slides[i].classList.toggle('active');\r\n    //   }\r\n    // }\r\n    // if (this.slidIndex == 1) {\r\n    // document.getElementById('inside')!.style.display = 'none';\r\n    // document.getElementById('dot2')!.className = 'active-dot';\r\n    // document.getElementById('dot1')!.className = 'dot';\r\n    // } else {\r\n    // document.getElementById('inside')!.style.display = 'flex';\r\n    // document.getElementById('dot2')!.className = 'dot';\r\n    // document.getElementById('dot1')!.className = 'active-dot';\r\n    // }\r\n\r\n    let silde = this.slides[i];\r\n    return silde;\r\n  }\r\n  // nextSlides() {\r\n  //   this.slidIndex += 1;\r\n  //   if (this.slidIndex == 2) {\r\n  //     this.slidIndex = 0;\r\n  //   }\r\n\r\n  //   return this.showSlides();\r\n  // }\r\n  // prevSlides() {\r\n  //   this.slidIndex -= 1;\r\n  //   if (this.slidIndex == -1) {\r\n  //     this.slidIndex = 1;\r\n  //   }\r\n  //   return this.showSlides();\r\n  // }\r\n  currentSlide(i: number) {\r\n    console.log(i);\r\n    this.slidIndex = i;\r\n    return this.showSlides();\r\n  }\r\n\r\n  test() {\r\n    this.passwordHint = !this.passwordHint;\r\n    console.log(this.passwordHint);\r\n  }\r\n\r\n  eyeShow() {\r\n    this.eyeshow = !this.eyeshow;\r\n  }\r\n}\r\n",
            "styleUrl": "./signup.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "DoCheck",
                "AfterViewInit"
            ],
            "templateData": "<!DOCTYPE html>\r\n<div class=\"container\">\r\n\r\n  \r\n  <div class=\"formDiv\">\r\n    <div class=\"projName\">\r\n      <img src=\"../../../assets/images/Icon.png\" alt=\"ProjectIcon\" />\r\n      <p>CMS Software</p>\r\n    </div>\r\n\r\n    <h1 id=\"welcomeId\">\r\n      Welcome! 👋\r\n      <!-- <i class=\"fa-solid fa-hand fa-flip-horizontal fa-lg\" style=\"color: #FFD43B;\"></i> -->\r\n    </h1>\r\n    <p id=\"info\" style=\"text-align: center;\">Sign Up to Manage Blog post account</p>\r\n\r\n    <form\r\n      class=\"form-group\"\r\n      [formGroup]=\"formInfo\"\r\n      (ngSubmit)=\"Submit()\"\r\n      #form=\"ngForm\"\r\n    >\r\n      <div class=\"FLinksContainer\">\r\n        <div class=\"formLinks\">\r\n          <a href=\"https://www.google.com/\">\r\n            <p>\r\n              <img src=\"../../../../assets/images/Logo.png\" alt=\"\">\r\n              <span class=\"whenComputer\">Sign up with Google</span>\r\n              <span class=\"whenPhone\">With Google</span>\r\n            </p>\r\n          </a>\r\n        </div>\r\n        <div class=\"formLinks\">\r\n          <a href=\"https://www.facebook.com/\">\r\n            <p>\r\n              <img src=\"../../../../assets/images/Logo (1).png\" alt=\"\">\r\n              \r\n              <span class=\"whenComputer\">Sign up with Facebook</span>\r\n              <span class=\"whenPhone\">With Facebook</span>\r\n            </p>\r\n          </a>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"line\">\r\n        <hr />\r\n        <span>OR</span>\r\n        <hr />\r\n      </div>\r\n      <div>\r\n        <label class=\"form-label\" for=\"fromInput1\">Full Name</label>\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-input\"\r\n          formControlName=\"fullName\"\r\n          [ngClass]=\"{\r\n            'is-invalid':\r\n            formInfo.controls.fullName.touched &&\r\n            formInfo.controls.fullName.errors,\r\n            'is-valid':\r\n            formInfo.controls.fullName.touched && \r\n            formInfo.controls.fullName.errors == null ,\r\n            'is-touched':\r\n            formInfo.controls.fullName.untouched && \r\n            formInfo.controls.fullName.errors == null,\r\n        }\"\r\n          id=\"fromInput1\"\r\n          placeholder=\"i.e. Haitham mohamed\"\r\n        />\r\n        @if (formInfo.controls.fullName.errors &&\r\n        formInfo.controls.fullName.touched) {\r\n        <div class=\"invalid-feedback\">\r\n          @if (formInfo.controls.fullName.errors['required']) {\r\n          <p class=\"required\">Fullname is required</p>\r\n          }\r\n        </div>\r\n        }\r\n      </div>\r\n      <div>\r\n        <label class=\"form-label\" for=\"fromInput2\">Email</label>\r\n        <input\r\n          type=\"email\"\r\n          class=\"form-input\"\r\n          id=\"fromInput2\"\r\n          placeholder=\"i.e. Haitham.mo@company.com\"\r\n          formControlName=\"email\"\r\n          [ngClass]=\"{\r\n            'is-invalid':\r\n            formInfo.controls.email.touched &&\r\n            formInfo.controls.email.errors,\r\n            'is-valid':\r\n            formInfo.controls.email.touched && \r\n            formInfo.controls.email.errors == null ,\r\n            'is-touched':\r\n            formInfo.controls.email.untouched && \r\n            formInfo.controls.email.errors == null,\r\n        }\"\r\n        />\r\n        @if (formInfo.controls.email.touched && formInfo.controls.email.errors)\r\n        {\r\n        <div class=\"invalid-feedback\">\r\n          @if (formInfo.controls.email.errors['required']) {\r\n          <p class=\"required\">Email is required</p>\r\n          } @if (formInfo.controls.email.errors['email']) {\r\n          <p>Email is invalid</p>\r\n          }\r\n        </div>\r\n        }\r\n      </div>\r\n      <div class=\"label-div\">\r\n        <label class=\"form-label\" for=\"fromInput3\">Password</label>\r\n        <input\r\n          type=\"password\"\r\n          class=\"form-input passwordCheck\"\r\n          id=\"fromInput3\"\r\n          placeholder=\"********************\"\r\n          formControlName=\"password\"\r\n          [ngClass]=\"{\r\n              'is-invalid':\r\n              formInfo.controls.password.touched &&\r\n              formInfo.controls.password.errors,\r\n              'is-valid':\r\n              formInfo.controls.password.touched && \r\n              formInfo.controls.password.errors == null ,\r\n              'is-touched':\r\n              formInfo.controls.password.untouched && \r\n              formInfo.controls.password.errors == null,\r\n          }\"\r\n          (focusin)=\"test()\"\r\n          (focusout)=\"test()\"\r\n        />\r\n\r\n        <!-- <span\r\n          class=\"p-viewer\"\r\n          [ngClass]=\"{ show: !passwordHint }\"\r\n          [ngClass]=\"{ hide: !passwordHint }\"\r\n        >\r\n          <fa-icon [icon]=\"faEye\" class=\"faEye\" (click)=\"eyeShow()\"></fa-icon>\r\n          <hr\r\n            [ngClass]=\"{ show: eyeshow }\"\r\n            [ngClass]=\"{ hide: eyeshow }\"\r\n            class=\"eyeHr\"\r\n          />\r\n        </span> -->\r\n\r\n        <br />\r\n        <div class=\"passwordCheckContainer\">\r\n          <div class=\"invalid-feedback\" [hidden]=\"!passwordHint\">\r\n            <div class=\"strongth-password\">\r\n              @if(formInfo.controls.password.value!.length < 6 ||\r\n              formInfo.controls.password.value!.length >= 6 &&\r\n              formInfo.controls.password.errors){\r\n              <div class=\"bar\" id=\"week\"></div>\r\n              <div class=\"bar\" id=\"mediumH\"></div>\r\n              <div class=\"bar\" id=\"strongH\"></div>\r\n\r\n              } @if(formInfo.controls.password.value!.length >= 6 &&\r\n              formInfo.controls.password.value!.length < 15 &&\r\n              formInfo.controls.password.errors==null){\r\n              <div class=\"bar\" id=\"mediumS\"></div>\r\n              <div class=\"bar\" id=\"medium\" #medium></div>\r\n              <div class=\"bar\" id=\"strongH\"></div>\r\n\r\n              } @if(formInfo.controls.password.value!.length >= 15 &&\r\n              formInfo.controls.password.errors==null){\r\n              <div class=\"bar\" id=\"weekH\"></div>\r\n              <div class=\"bar\" id=\"strongS\" #medium></div>\r\n              <div class=\"bar\" id=\"strong\" #strong></div>\r\n              }\r\n            </div>\r\n          </div>\r\n          <p\r\n            id=\"passHint\"\r\n            [ngClass]=\"{ show: passwordHint }\"\r\n            [ngClass]=\"{ hide: passwordHint }\"\r\n          >\r\n            Password hint : 8 characters minimum\r\n          </p>\r\n          <div\r\n            style=\"\r\n              display: flex;\r\n              align-items: center;\r\n              justify-content: space-around;\r\n            \"\r\n          >\r\n            <div style=\"margin-right: 5px\" [hidden]=\"!passwordHint\">\r\n              @if(formInfo.controls.password.value!.length < 6 ||\r\n              formInfo.controls.password.value!.length >= 6 &&\r\n              formInfo.controls.password.errors){\r\n              <p class=\"passCheckWord\">Password: Week</p>\r\n              } @if(formInfo.controls.password.value!.length >= 6 &&\r\n              formInfo.controls.password.value!.length < 15 &&\r\n              formInfo.controls.password.errors==null){\r\n              <p class=\"passCheckWord\">Password: Meduim</p>\r\n              } @if(formInfo.controls.password.value!.length >= 15 &&\r\n              formInfo.controls.password.errors==null){\r\n              <p class=\"passCheckWord\">Password: Strong</p>\r\n              }\r\n            </div>\r\n            <button class=\"tooltip\">\r\n              !\r\n              <ul class=\"tooltiptext\">\r\n                Your Password Must Contain:\r\n                <li>\r\n                  <span\r\n                    class=\"correctIcon\"\r\n                    [ngClass]=\"{\r\n                      changeBG: numberLength\r\n                    }\"\r\n                    >✔</span\r\n                  >At least 8 characters\r\n                </li>\r\n                <li>\r\n                  <span\r\n                    class=\"correctIcon\"\r\n                    [ngClass]=\"{\r\n                      changeBG: uppercase\r\n                    }\"\r\n                    >✔</span\r\n                  >At least One Capital Letter\r\n                </li>\r\n                <li>\r\n                  <span\r\n                    class=\"correctIcon\"\r\n                    [ngClass]=\"{\r\n                      changeBG: Number\r\n                    }\"\r\n                    >✔</span\r\n                  >At least One Numbers\r\n                </li>\r\n                <li>\r\n                  <span\r\n                    class=\"correctIcon\"\r\n                    [ngClass]=\"{\r\n                      changeBG: specialChar\r\n                    }\"\r\n                    >✔</span\r\n                  >At least One Special Character:!#$%^&*()_+.\r\n                </li>\r\n              </ul>\r\n              <!-- <span id=\"length\"></span> -->\r\n              <!-- <span id=\"upercase\">At least contain 1 upercase</span>\r\n            <span id=\"number\">At least contain 3 numbers</span> -->\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"label-div\">\r\n        <label class=\"form-label\" for=\"fromInput4\">Confirm Password</label>\r\n        <!-- <span class=\"p-viewer1\">\r\n\t\t\t\t\t<fa-icon [icon]=\"faEye\"></fa-icon>\r\n\t\t\t\t</span> -->\r\n        <input\r\n          type=\"password\"\r\n          class=\"form-input\"\r\n          id=\"fromInput4\"\r\n          formControlName=\"confirmPassword\"\r\n          placeholder=\"********************\"\r\n          [ngClass]=\"{\r\n            'is-invalid':\r\n            formInfo.controls.confirmPassword.touched &&\r\n            formInfo.controls.confirmPassword.errors,\r\n            'is-valid':\r\n            formInfo.controls.confirmPassword.touched && \r\n            formInfo.controls.confirmPassword.errors == null ,\r\n            'is-touched':\r\n            formInfo.controls.confirmPassword.untouched && \r\n            formInfo.controls.confirmPassword.errors == null,\r\n        }\"\r\n        />\r\n        @if (formInfo.controls.confirmPassword.touched &&\r\n        formInfo.controls.confirmPassword.errors) {\r\n        <div class=\"invalid-feedback\">\r\n          @if (formInfo.controls.confirmPassword.errors['required']) {\r\n          <p class=\"required\">Confirm Password is required</p>\r\n          } @if (formInfo.controls.confirmPassword.errors['passwordMismatch']) {\r\n          <p>Confirm Password does not match</p>\r\n          }\r\n        </div>\r\n        }\r\n      </div>\r\n\r\n      <button type=\"submit\" class=\"submitButton\" [disabled]=\"formInfo.invalid\">\r\n        Sign Up\r\n      </button>\r\n    </form>\r\n    <div class=\"paragraphs\">\r\n      <p class=\"info\">Have an Account? <a routerLink=\"/signin\">Login</a></p>\r\n      <p class=\"info\">\r\n        By signing up you agree to out\r\n        <a style=\"font-weight: 400\" href=\"\">Terms</a> and\r\n        <a href=\"\" style=\"font-weight: 400\">privacy policy</a>\r\n      </p>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"SlidesContainer\">\r\n    <!-- Slideshow container -->\r\n    <div class=\"slideshow-container\">\r\n      <!-- Full-width images with number and caption text -->\r\n      <div id=\"mySlide\" class=\"mySlides fade\">\r\n        <div class=\"cardDiv\">\r\n          <div class=\"avatar\" [ngClass]=\"{ hide: slidIndex == 1 }\">\r\n            <img\r\n              src=\"../../../assets/images/data.svg\"\r\n              alt=\"Data\"\r\n              class=\"insideImg\"\r\n              id=\"inside\"\r\n            />\r\n          </div>\r\n          \r\n          <img src=\"{{ showSlides() }}\" alt=\"Slides\" class=\"img1\" />\r\n        </div>\r\n        <div class=\"text\">\r\n          <p style=\"font-size: 22px;font-weight: 500;\">Manage Any Content Anywhere</p>\r\n          <p>\r\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Omnis\r\n            repellat modi dicta suscipit vero\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <!-- Next and previous buttons -->\r\n      <!-- <div style=\"display: flex; justify-content: space-between; position: relative; top: -50%;\">\r\n        <a class=\"prev\" (click)=\"prevSlides()\">&#10094;</a>\r\n        <a class=\"next\" (click)=\"nextSlides()\">&#10095;</a>\r\n      </div> -->\r\n    </div>\r\n\r\n    <div class=\"dots\" style=\"text-align: center\">\r\n      <span style=\"text-align: center; color: white;cursor: pointer;align-items: center;\" (click)=\"currentSlide(0)\">&#x2190;</span>\r\n      <span\r\n        id=\"dot1\"\r\n        class=\"active-dot\"\r\n        (click)=\"currentSlide(0)\"\r\n        [ngClass]=\"{ dot: slidIndex == 1, 'active-dot': slidIndex == 0 }\"\r\n      ></span>\r\n      <span\r\n        id=\"dot2\"\r\n        class=\"dot\"\r\n        (click)=\"currentSlide(1)\"\r\n        [ngClass]=\"{ 'active-dot': slidIndex == 1 }\"\r\n      ></span>\r\n      <span style=\"text-align: center; color: white;cursor: pointer;align-items: center;\" (click)=\"currentSlide(1)\">&#x2192;</span>\r\n    </div>\r\n\r\n    <!-- The dots/circles -->\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SignupverificationComponent",
            "id": "component-SignupverificationComponent-bd4c5d6e48f5151d970fc64ed23cfd19c506690427912c3e4b588e552fd524ee3a7e9e9794ab74c3c7a27d1886f336f601e076aa4d4ac69deac4e031632abe7b",
            "file": "src/app/components/Authentication/signupverification/signupverification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signupverification",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./signupverification.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formVerification",
                    "defaultValue": "new FormGroup({\r\n    verificationCode1: new FormControl(''),\r\n    verificationCode2: new FormControl(''),\r\n    verificationCode3: new FormControl(''),\r\n    verificationCode4: new FormControl(''),\r\n    verificationCode5: new FormControl(''),\r\n    verificationCode6: new FormControl(''),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "str",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "str1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "str2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "str3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "str4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "str5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "str6",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resendOTP",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "verificationSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { Route, Router, RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-signupverification',\r\n  standalone: true,\r\n  imports: [RouterModule, FormsModule, ReactiveFormsModule, CommonModule],\r\n  templateUrl: './signupverification.component.html',\r\n  styleUrl: './signupverification.component.css',\r\n})\r\nexport class SignupverificationComponent implements OnInit {\r\n  str1!: string;\r\n  str2!: string;\r\n  str3!: string;\r\n  str4!: string;\r\n  str5!: string;\r\n  str6!: string;\r\n\r\n  str: string = '';\r\n  formVerification = new FormGroup({\r\n    verificationCode1: new FormControl(''),\r\n    verificationCode2: new FormControl(''),\r\n    verificationCode3: new FormControl(''),\r\n    verificationCode4: new FormControl(''),\r\n    verificationCode5: new FormControl(''),\r\n    verificationCode6: new FormControl(''),\r\n  });\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private _authService: AuthService,\r\n    private _Router: Router\r\n  ) {}\r\n  ngOnInit(): void {\r\n    this.formVerification = this.formBuilder.group({\r\n      verificationCode1: ['', [Validators.required, Validators.maxLength(1)]],\r\n      verificationCode2: ['', [Validators.required, Validators.maxLength(1)]],\r\n      verificationCode3: ['', [Validators.required, Validators.maxLength(1)]],\r\n      verificationCode4: ['', [Validators.required, Validators.maxLength(1)]],\r\n      verificationCode5: ['', [Validators.required, Validators.maxLength(1)]],\r\n      verificationCode6: ['', [Validators.required, Validators.maxLength(1)]],\r\n    });\r\n  }\r\n\r\n  verificationSubmit() {\r\n    // send mail\r\n    if (this.formVerification.invalid) {\r\n      console.log(this.formVerification);\r\n      return;\r\n    }\r\n    // this.showSetNewPass();\r\n    this.str = `${this.str1}${this.str2}${this.str3}${this.str4}${this.str5}${this.str6}`\r\n    console.log(this.str);\r\n    this._authService.verificationCode(this.str).subscribe({\r\n      next: (res) => {\r\n        //Clear the session\r\n        sessionStorage.clear();\r\n        this._Router.navigateByUrl('/signin');\r\n        // this._authService.setToken(res.token);\r\n        // this.showSetNewPass();\r\n        console.log(res);\r\n      },\r\n      error: (err) => {\r\n        console.log(err);\r\n      },\r\n    });\r\n  }\r\n\r\n\r\n  resendOTP(){\r\n    this._authService.resendOTP().subscribe({\r\n      next: (res) => {\r\n        console.log(res);\r\n        // this._authService.setToken(res.token);\r\n        // this.showSetNewPass();\r\n      },\r\n      error: (err) => {\r\n        console.log(err);\r\n      },\r\n    })\r\n\r\n  }\r\n  \r\n}\r\n",
            "styleUrl": "./signupverification.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_Router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<!DOCTYPE html>\r\n<div class=\"container\">\r\n  <div class=\"formDiv\">\r\n    <div class=\"projName\">\r\n      <img src=\"../../../assets/images/Icon.png\" alt=\"ProjectIcon\" />\r\n      <p>CMS Software</p>\r\n    </div>\r\n\r\n    <div style=\"text-align: center\" class=\"loginDiv\">\r\n        <h1>Email Verification</h1>\r\n        <p class=\"info1\">We sent OTP code to <span style=\"color: #0660FC;\">Hait*********.com</span></p>\r\n        <img\r\n          style=\"margin-left: auto; margin-right: auto\"\r\n          src=\"../../../assets/images/smartphone.svg\"\r\n          alt=\"OTP photo\"\r\n        />\r\n        \r\n        <form\r\n            action=\"\"\r\n            [formGroup]=\"formVerification\"\r\n            (ngSubmit)=\"verificationSubmit()\"\r\n            #form=\"ngForm\"\r\n          >\r\n            <div>\r\n              <label for=\"verificationCode\" class=\"labelInput\"\r\n                >Type your 6 digit security code </label\r\n              ><br />\r\n              <div class=\"verificationInpts\">\r\n                <input\r\n                  type=\"text\"\r\n                  maxlength=\"1\"\r\n                  min=\"0\"\r\n                  max=\"9\"\r\n                  oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n                  class=\"inputVerificationStyle\"\r\n                  id=\"verificationCode\"\r\n                  [(ngModel)]=\"str1\"\r\n                  formControlName=\"verificationCode1\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode1.touched &&\r\n                      formVerification.controls.verificationCode1.errors\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-valid':\r\n                      formVerification.controls.verificationCode1.touched &&\r\n                      formVerification.controls.verificationCode1.errors ==\r\n                        null &&\r\n                      formVerification.controls.verificationCode1.dirty\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode1.errors &&\r\n                      formVerification.controls.verificationCode1.dirty, \r\n                  }\"\r\n\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  maxlength=\"1\"\r\n                  min=\"0\"\r\n                  max=\"9\"\r\n                  oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n                  class=\"inputVerificationStyle\"\r\n                  id=\"verificationNum\"\r\n                  [(ngModel)]=\"str2\"\r\n                  formControlName=\"verificationCode2\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                    formVerification.controls.verificationCode2.touched &&\r\n                    formVerification.controls.verificationCode2.errors\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-valid':\r\n                      formVerification.controls.verificationCode2.touched &&\r\n                      formVerification.controls.verificationCode2.errors ==\r\n                        null &&\r\n                      formVerification.controls.verificationCode2.dirty\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode2.errors &&\r\n                      formVerification.controls.verificationCode2.dirty, \r\n                  }\"\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  maxlength=\"1\"\r\n                  min=\"0\"\r\n                  max=\"9\"\r\n                  oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n                  [(ngModel)]=\"str3\"\r\n                  class=\"inputVerificationStyle\"\r\n                  id=\"verificationNum\"\r\n\r\n                  formControlName=\"verificationCode3\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode3.touched &&\r\n                      formVerification.controls.verificationCode3.errors\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-valid':\r\n                      formVerification.controls.verificationCode3.touched &&\r\n                      formVerification.controls.verificationCode3.errors ==\r\n                        null &&\r\n                      formVerification.controls.verificationCode3.dirty\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode3.errors &&\r\n                      formVerification.controls.verificationCode3.dirty, \r\n                  }\"\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  maxlength=\"1\"\r\n                  min=\"0\"\r\n                  max=\"9\"\r\n                  oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n                  class=\"inputVerificationStyle\"\r\n                  id=\"verificationNum\"\r\n                  [(ngModel)]=\"str4\"\r\n                  formControlName=\"verificationCode4\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode4.touched &&\r\n                      formVerification.controls.verificationCode4.errors\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-valid':\r\n                      formVerification.controls.verificationCode4.touched &&\r\n                      formVerification.controls.verificationCode4.errors ==\r\n                        null &&\r\n                      formVerification.controls.verificationCode4.dirty\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode4.errors &&\r\n                      formVerification.controls.verificationCode4.dirty, \r\n                  }\"\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  maxlength=\"1\"\r\n                  min=\"0\"\r\n                  max=\"9\"\r\n                  oninput=\"this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1');\"\r\n                  class=\"inputVerificationStyle\"\r\n                  id=\"verificationNum\"\r\n                  [(ngModel)]=\"str5\"\r\n                  formControlName=\"verificationCode5\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode5.touched &&\r\n                      formVerification.controls.verificationCode5.errors\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-valid':\r\n                      formVerification.controls.verificationCode5.touched &&\r\n                      formVerification.controls.verificationCode5.errors ==\r\n                        null &&\r\n                      formVerification.controls.verificationCode5.dirty\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode5.errors &&\r\n                      formVerification.controls.verificationCode5.dirty, \r\n                  }\"\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  maxlength=\"1\"\r\n                  \r\n                  class=\"inputVerificationStyle\"\r\n                  id=\"verificationNum\"\r\n                  [(ngModel)]=\"str6\"\r\n                  formControlName=\"verificationCode6\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode6.touched &&\r\n                      formVerification.controls.verificationCode6.errors\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-valid':\r\n                      formVerification.controls.verificationCode6.touched &&\r\n                      formVerification.controls.verificationCode6.errors ==\r\n                        null &&\r\n                      formVerification.controls.verificationCode6.dirty\r\n                  }\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid1':\r\n                      formVerification.controls.verificationCode6.errors &&\r\n                      formVerification.controls.verificationCode6.dirty, \r\n                  }\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <button\r\n              type=\"submit\"\r\n              [disabled]=\"formVerification.invalid\"\r\n            >\r\n              Submit Code\r\n            </button>\r\n            <p class=\"info2\">\r\n              Dont't get the code ? <a (click)=\"resendOTP()\">Resend</a> or\r\n              <a>call us</a>\r\n            </p>\r\n            <!-- <input type=\"submit\"> -->\r\n          </form>\r\n    </div>\r\n    <div class=\"paragraphs\">\r\n      <p class=\"info\">\r\n      By signing up you agree to out\r\n      <a style=\"font-weight: 400\" href=\"\">Terms</a> and\r\n      <a href=\"\" style=\"font-weight: 400\">privacy policy</a>\r\n    </p>\r\n    </div>\r\n    \r\n  </div>\r\n\r\n  <div class=\"SlidesContainer\">\r\n    <!-- Slideshow container -->\r\n    <div class=\"slideshow-container\">\r\n      <!-- Full-width images with number and caption text -->\r\n      <div id=\"mySlide\" class=\"mySlides\">\r\n        <div class=\"cardDiv\">\r\n\r\n          <!-- <img src=\"../../../assets/images/Right side (4).svg\" alt=\"Slides\" class=\"img1\" /> -->\r\n        </div>\r\n        <!-- <div class=\"text\">\r\n          <p>Manage Any Content Anywhere</p>\r\n          <p>\r\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Omnis\r\n            repellat modi dicta suscipit vero\r\n          </p>\r\n        </div> -->\r\n      </div>\r\n      <!-- Next and previous buttons -->\r\n      <!-- <div style=\"display: flex; justify-content: space-between; position: relative; top: -50%;\">\r\n        <a class=\"prev\" (click)=\"prevSlides()\">&#10094;</a>\r\n        <a class=\"next\" (click)=\"nextSlides()\">&#10095;</a>\r\n      </div> -->\r\n    </div>\r\n    <!-- The dots/circles -->\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "UserManagementComponent",
            "id": "component-UserManagementComponent-6dd9fde667b71e3881bd74d160d354cd6971e40edee8400dfbdf4a5da6d4611eb3365e43c5d4fcb7eb85c927db2e5dd0837d373b162f1beae36ff5cb4277c5a9",
            "file": "src/app/components/core/management/user-role-combine/user-management.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-management",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-management.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "SidebarComponent",
                    "type": "component"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Router, RouterLink, RouterModule, Routes } from '@angular/router';\r\n\r\nimport { SidebarComponent } from '../../../../shared/sidebar/sidebar.component';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-user-management',\r\n  standalone: true,\r\n  imports: [SidebarComponent, RouterOutlet, RouterLink, RouterModule],\r\n  templateUrl: './user-management.component.html',\r\n  styleUrl: './user-management.component.css'\r\n})\r\nexport class UserManagementComponent {\r\n\r\n  constructor() { }\r\n\r\n}\r\n",
            "styleUrl": "./user-management.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "extends": [],
            "templateData": "<!DOCTYPE html>\r\n<router-outlet></router-outlet>"
        },
        {
            "name": "UserProfileComponent",
            "id": "component-UserProfileComponent-380f1176316d18fdfe1919e90bcea6f37510bbfac00dece0403d20f79bb91e00959441af51adb5d252860884e163d212f6eab3b4c418cd3d33c042d54826591c",
            "file": "src/app/components/core/user-profile/user-profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-profile",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-profile.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "defaultValue": "'edit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "searchText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "display",
                    "args": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterLink, RouterModule, RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-user-profile',\r\n  standalone: true,\r\n  imports: [RouterOutlet, RouterModule, RouterLink, FormsModule],\r\n  templateUrl: './user-profile.component.html',\r\n  styleUrl: './user-profile.component.css'\r\n})\r\nexport class UserProfileComponent {\r\n\r\n  searchText: string = '';\r\n  activeTab: string = 'edit';\r\n\r\n  display(tab: string) {\r\n    this.activeTab = tab;\r\n  }\r\n}\r\n",
            "styleUrl": "./user-profile.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container\">\r\n\r\n    <div class=\"user-profile-container\">\r\n\r\n        <div class=\"user-header\">\r\n            <div class=\"header-icons\">\r\n                <div class=\"refresh\">\r\n                    <img src=\"assets/images/refresh-2.svg\" alt=\"\">\r\n\r\n                    <p>Last update : Today,15:05pm</p>\r\n                </div>\r\n\r\n\r\n                <img src=\"assets/images/cross-square.svg\" alt=\"\">\r\n\r\n            </div>\r\n\r\n\r\n            <div class=\"user-info\">\r\n                <img src=\"assets/images/Screenshot 2024-02-14 092120.png\" alt=\"user-img\">\r\n                <div class=\"edit\"> <img src=\"assets/images/edit.svg\" alt=\"\"></div>\r\n                <h3>Haitham Mohamed</h3>\r\n                <p>Supper Admin</p>\r\n            </div>\r\n\r\n\r\n\r\n            <div class=\"user-actions\">\r\n                <div class=\"a-box\">\r\n                    <a (click)=\"display('edit')\" [class.active]=\"activeTab =='edit'\"> Information</a>\r\n                </div>\r\n\r\n                <div class=\"hr\"></div>\r\n                <div class=\"a-box\">\r\n                    <a (click)=\"display('change-password')\" [class.active]=\"activeTab =='change-password'\">Password</a>\r\n                </div>\r\n\r\n                <div class=\"hr\"></div>\r\n                <div class=\"a-box\">\r\n                    <a (click)=\"display('activity')\" [class.active]=\"activeTab =='activity'\">Activity log</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        @if(activeTab=='edit'){\r\n        <div class=\"user-form\">\r\n\r\n            <div class=\"user-form-header\">\r\n                <div class=\"inner-text\">\r\n                    <h3>Edit account information</h3>\r\n                    <p>Lorem ipsum is placeholder text commonly</p>\r\n                </div>\r\n                <button>Edit</button>\r\n\r\n            </div>\r\n            <div class=\"hr2\"></div>\r\n\r\n\r\n            <form>\r\n\r\n\r\n                <div class=\"inputs-container\">\r\n                    <div class=\"input\">\r\n                        <label for=\"name\">Name</label>\r\n                        <input type=\"text\" id=\"name\" value=\"Haitham Mohamed\" disabled>\r\n                    </div>\r\n                    <div class=\"input\">\r\n                        <label for=\"role\">Role& permissions</label>\r\n                        <input type=\"text\" id=\"role\" value=\"Super Admin\" disabled>\r\n                    </div>\r\n                </div>\r\n                <div class=\"inputs-container\">\r\n                    <div class=\"input\">\r\n                        <label for=\"email\">Email</label>\r\n                        <input type=\"text\" id=\"email\" value=\"HaithamMohamed@saptiumsoftware.com\" disabled>\r\n                    </div>\r\n                    <div class=\"select\">\r\n                        <label for=\"number\">Phone</label>\r\n                        <div class=\"phone\">\r\n                            <select name=\"\" id=\"\">\r\n                                <!-- <option value=\"\"><img src=\"Group.svg\" alt=\"\"></option> -->\r\n                            </select>\r\n                            <input type=\"text\" value=\"+1258525645-555\" disabled>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n            </form>\r\n\r\n\r\n\r\n\r\n\r\n            <div class=\"hr3\"></div>\r\n            <div class=\"user-form-footer\">\r\n                <div class=\"inner-text\">\r\n                    <h3>Delete Account</h3>\r\n                    <p>Lorem ipsum is placeholder text commonly</p>\r\n                </div>\r\n                <button>Delete Account</button>\r\n            </div>\r\n\r\n        </div>\r\n    }\r\n\r\n\r\n    \r\n    @if(activeTab=='change-password'){\r\n\r\n        <div class=\"user-form\">\r\n\r\n            <div class=\"user-form-header\">\r\n                <div class=\"inner-text\">\r\n                    <h3>Change Password</h3>\r\n                    <p>Lorem ipsum is placeholder text commonly</p>\r\n                </div>\r\n                <button>Edit</button>\r\n            </div>\r\n            <div class=\"hr2\"></div>\r\n\r\n            <div class=\"form-container\">\r\n                <form action=\"\">\r\n                    <div class=\"input\">\r\n                        <label for=\"password\">Current Password</label>\r\n                        <input type=\"password\" id=\"password\" placeholder=\"Enter the Current Password\" disabled>\r\n                    </div>\r\n\r\n                    <div class=\"input\">\r\n                        <label for=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" value=\"12345678910\" disabled>\r\n                    </div>\r\n\r\n                    <div class=\"input\">\r\n                        <label for=\"confirm-password\">Confirm Password</label>\r\n                        <input type=\"password\" id=\"confirm-password\" value=\"12345678910\" disabled>\r\n                    </div>\r\n                </form>\r\n                <img src=\"assets/images/Group 1000016543.svg\" alt=\"\">\r\n            </div>\r\n\r\n\r\n        </div>\r\n    }\r\n    \r\n        @if(activeTab=='activity'){\r\n        <div class=\"user-form\" >\r\n\r\n            <div class=\"user-form-header\">\r\n                <div class=\"inner-text\">\r\n                    <h3>Activity Log</h3>\r\n                    <p>Lorem ipsum is placeholder text commonly</p>\r\n                </div>\r\n                <div class=\"search\">\r\n                    <img src=\"assets/images/magnifier.svg\" alt=\"search\">\r\n                    <input type=\"text\" placeholder=\"search...\">\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n\r\n\r\n            <div class=\"activity\">\r\n                <ul>\r\n                    <li>\r\n                        <div class=\"txt-left\">\r\n                            <div class=\"img-container\">\r\n                                <img src=\"assets/images/message-text.svg\" alt=\"\">\r\n                            </div>\r\n                            There are 2 new comment for you in “AirPlus Mobile App” .\r\n                        </div>\r\n                        <div class=\"time\"> <img src=\"assets/images/time.svg\" alt=\"time-icon\">4:23 PM</div>\r\n                    </li>\r\n\r\n\r\n                    <li>\r\n                        <div class=\"txt-left\">\r\n                            <div class=\"img-container\">\r\n                                <img src=\"assets/images/pin.svg\" alt=\"\">\r\n                            </div>\r\n                            New Blog post is assigned to you.\r\n                        </div>\r\n                        <div class=\"time\"> <img src=\"assets/images/time.svg\" alt=\"time-icon\">4:23 PM</div>\r\n                    </li>\r\n                    <li>\r\n                        <div class=\"txt-left\">\r\n                            <div class=\"img-container\">\r\n                                <img src=\"assets/images/files-folders.svg\" alt=\"\">\r\n                            </div>\r\n                            12 new Files uploaded now.\r\n                        </div>\r\n                        <div class=\"time\"> <img src=\"assets/images/time.svg\" alt=\"time-icon\">4:23 PM</div>\r\n                    </li>\r\n                    <li>\r\n                        <div class=\"txt-left\">\r\n                            <div class=\"img-container\">\r\n                                <img src=\"assets/images/message-text.svg\" alt=\"\">\r\n                            </div>\r\n                            There are 2 new comment for you in “AirPlus Mobile App” .\r\n                        </div>\r\n                        <div class=\"time\"> <img src=\"assets/images/time.svg\" alt=\"time-icon\">4:23 PM</div>\r\n                    </li>\r\n                    <li>\r\n                        <div class=\"txt-left\">\r\n                            <div class=\"img-container\">\r\n                                <img src=\"assets/images/files-folders.svg\" alt=\"\">\r\n                            </div>\r\n                            12 new Files uploaded now .\r\n                        </div>\r\n                        <div class=\"time\"> <img src=\"assets/images/time.svg\" alt=\"time-icon\">4:23 PM</div>\r\n                    </li>\r\n                    <li>\r\n                        <div class=\"txt-left\">\r\n                            <div class=\"img-container\">\r\n                                <img src=\"assets/images/message-text.svg\" alt=\"\">\r\n                            </div>\r\n                            New Blog post is assigned to you .\r\n                        </div>\r\n                        <div class=\"time\"> <img src=\"assets/images/time.svg\" alt=\"time-icon\">4:23 PM</div>\r\n                    </li>\r\n                </ul>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    }\r\n    </div>\r\n</div>"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideRouter(routes, withViewTransitions()),\r\n    provideHttpClient(withFetch()),\r\n    provideClientHydration(),\r\n    provideAnimationsAsync(),\r\n  ],\r\n}"
            },
            {
                "name": "authGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/guards/auth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(\r\n  route: ActivatedRouteSnapshot,\r\n  state: RouterStateSnapshot\r\n) =>{\r\n    return inject(AuthService).isLoggedIn\r\n      ? true\r\n      : inject(Router).createUrlTree(['']);\r\n}"
            },
            {
                "name": "bootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => bootstrapApplication(AppComponent, config)"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    BASEURL: '',\r\n    production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    BASEURL:'https://192.168.1.74:7109/',\r\n    production: false\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'large',\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    user: {\r\n      name: 'Jane Doe',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\r\n    await expect(loginButton).toBeInTheDocument();\r\n    await userEvent.click(loginButton);\r\n    await expect(loginButton).not.toBeInTheDocument();\r\n\r\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\r\n    await expect(logoutButton).toBeInTheDocument();\r\n  },\r\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\r\n  title: 'Example/Button',\r\n  component: ButtonComponent,\r\n  tags: ['autodocs'],\r\n  render: (args: ButtonComponent) => ({\r\n    props: {\r\n      backgroundColor: null,\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    backgroundColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HeaderComponent>",
                "defaultValue": "{\r\n  title: 'Example/Header',\r\n  component: HeaderComponent,\r\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PageComponent>",
                "defaultValue": "{\r\n  title: 'Example/Page',\r\n  component: PageComponent,\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\r\n  parameters: {\r\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/i,\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    primary: true,\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "serverConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideServerRendering()\r\n  ]\r\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'small',\r\n    label: 'Button',\r\n  },\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HeaderComponent>",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PageComponent>",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideRouter(routes, withViewTransitions()),\r\n    provideHttpClient(withFetch()),\r\n    provideClientHydration(),\r\n    provideAnimationsAsync(),\r\n  ],\r\n}"
                }
            ],
            "src/app/guards/auth.guard.ts": [
                {
                    "name": "authGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/guards/auth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(\r\n  route: ActivatedRouteSnapshot,\r\n  state: RouterStateSnapshot\r\n) =>{\r\n    return inject(AuthService).isLoggedIn\r\n      ? true\r\n      : inject(Router).createUrlTree(['']);\r\n}"
                }
            ],
            "src/main.server.ts": [
                {
                    "name": "bootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => bootstrapApplication(AppComponent, config)"
                }
            ],
            "src/app/app.config.server.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
                },
                {
                    "name": "serverConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideServerRendering()\r\n  ]\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    BASEURL: '',\r\n    production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    BASEURL:'https://192.168.1.74:7109/',\r\n    production: false\r\n}"
                }
            ],
            "src/stories/button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'large',\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\r\n  title: 'Example/Button',\r\n  component: ButtonComponent,\r\n  tags: ['autodocs'],\r\n  render: (args: ButtonComponent) => ({\r\n    props: {\r\n      backgroundColor: null,\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    backgroundColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    primary: true,\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'small',\r\n    label: 'Button',\r\n  },\r\n}"
                }
            ],
            "src/stories/header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    user: {\r\n      name: 'Jane Doe',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HeaderComponent>",
                    "defaultValue": "{\r\n  title: 'Example/Header',\r\n  component: HeaderComponent,\r\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
                }
            ],
            "src/stories/page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\r\n    await expect(loginButton).toBeInTheDocument();\r\n    await userEvent.click(loginButton);\r\n    await expect(loginButton).not.toBeInTheDocument();\r\n\r\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\r\n    await expect(logoutButton).toBeInTheDocument();\r\n  },\r\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PageComponent>",
                    "defaultValue": "{\r\n  title: 'Example/Page',\r\n  component: PageComponent,\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\r\n  parameters: {\r\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/i,\r\n      },\r\n    },\r\n  },\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/stories/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HeaderComponent>",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PageComponent>",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Authentication/correctchages/correctchages.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CorrectchagesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Authentication/email-verification/email-verification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmailVerificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Authentication/sendmail/sendmail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SendmailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Authentication/setnewpassword/setnewpassword.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SetnewpasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Authentication/signin/signin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SigninComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Authentication/signup/signup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/components/Authentication/signupverification/signupverification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignupverificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/core/blog/blog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BlogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/core/cms-main/cms-main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CmsMainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/core/management/manage-roles/manageroles.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ManageRolesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/core/management/manage-users/manage-users.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ManageUsersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/core/management/user-role-combine/user-management.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserManagementComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/core/user-profile/user-profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notfound/notfound.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotfoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/guards/auth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/iforget-pass-request.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IForgetPassRequest",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/isign-in-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISignInResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/isign-up-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISignUpResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/logininterface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILogin",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/signupinterface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ISignupRequest",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/services/reset-password.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ResetPasswordService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/toggleBtn/toggle.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToggleService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/token.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "TokenInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}